package docs

var BigQueryFunctions = map[string]string{
	"abs":                                    "```sql\nABS(X)\n\n```\nDescription\nComputes absolute value. Returns an error if the argument is an integer and the\noutput value can\"t be represented as the same type; this happens only for the\nlargest negative input value, which has no positive representation.\nReturn Data Type\nDescription\nComputes the principal value of the inverse cosine of X. The return value is in\nthe range [0,π]. Generates an error if X is a value outside of the\nrange [-1, 1].\nDescription\nComputes the inverse hyperbolic cosine of X. Generates an error if X is a value\nless than 1.\nDescription\nComputes the principal value of the inverse sine of X. The return value is in\nthe range [-π/2,π/2]. Generates an error if X is outside of\nthe range [-1, 1].\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#abs)",
	"acos":                                   "```sql\nACOS(X)\n\n```\nDescription\nComputes the principal value of the inverse cosine of X. The return value is in\nthe range [0,π]. Generates an error if X is a value outside of the\nrange [-1, 1].\nDescription\nComputes the inverse hyperbolic cosine of X. Generates an error if X is a value\nless than 1.\nDescription\nComputes the principal value of the inverse sine of X. The return value is in\nthe range [-π/2,π/2]. Generates an error if X is outside of\nthe range [-1, 1].\nDescription\nComputes the inverse hyperbolic sine of X. Doesn\"t fail.\nDescription\nComputes the principal value of the inverse tangent of X. The return value is\nin the range [-π/2,π/2]. Doesn\"t fail.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#acos)",
	"acosh":                                  "```sql\nACOSH(X)\n\n```\nDescription\nComputes the inverse hyperbolic cosine of X. Generates an error if X is a value\nless than 1.\nDescription\nComputes the principal value of the inverse sine of X. The return value is in\nthe range [-π/2,π/2]. Generates an error if X is outside of\nthe range [-1, 1].\nDescription\nComputes the inverse hyperbolic sine of X. Doesn\"t fail.\nDescription\nComputes the principal value of the inverse tangent of X. The return value is\nin the range [-π/2,π/2]. Doesn\"t fail.\nDescription\nCalculates the principal value of the inverse tangent of X/Y using the signs of\nthe two arguments to determine the quadrant. The return value is in the range\n[-π,π].\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#acosh)",
	"aead.decrypt_bytes":                     "```sql\nAEAD.DECRYPT_BYTES(keyset, ciphertext, additional_data)\n\n```\nDescription\nUses the matching key from keyset to decrypt ciphertext and verifies the\nintegrity of the data using additional_data. Returns an error if decryption or\nverification fails.\nkeyset is a serialized BYTES value returned by one of the\nKEYS functions or a STRUCT returned by\nKEYS.KEYSET_CHAIN. keyset must contain the key that was used to\nencrypt ciphertext, and the key must be in an \"ENABLED\" state, or else the\nfunction returns an error. AEAD.DECRYPT_BYTES identifies the matching key\nin keyset by finding the key with the key ID that matches the one encrypted in\nciphertext.\nciphertext is a BYTES value that\"s the result of\na call to AEAD.ENCRYPT where the input plaintext was of type\nBYTES.\nIf ciphertext includes an initialization vector (IV),\nit should be the first bytes of ciphertext. If ciphertext includes an\nauthentication tag, it should be the last bytes of ciphertext. If the\nIV and authentic tag are one (SIV), it should be the first bytes of\nciphertext. The IV and authentication tag commonly require 16 bytes, but may\nvary in size.\nadditional_data is a STRING or BYTES value that binds the ciphertext to\nits context. This forces the ciphertext to be decrypted in the same context in\nwhich it was encrypted. This function casts any\nSTRING value to BYTES.\nThis must be the same as the additional_data provided to AEAD.ENCRYPT to\nencrypt ciphertext, ignoring its type, or else the function returns an error.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#aeaddecrypt_bytes)",
	"aead.decrypt_string":                    "```sql\nAEAD.DECRYPT_STRING(keyset, ciphertext, additional_data)\n\n```\nDescription\nLike AEAD.DECRYPT_BYTES, but where additional_data is\nof type STRING.\nReturn Data Type\nSTRING\nDescription\nEncrypts plaintext using the primary cryptographic key in keyset. The\nalgorithm of the primary key must be AEAD_AES_GCM_256. Binds the ciphertext to\nthe context defined by additional_data. Returns NULL if any input is NULL.\nkeyset is a serialized BYTES value returned by one of the\nKEYS functions or a STRUCT returned by\nKEYS.KEYSET_CHAIN.\nplaintext is the STRING or\nBYTES value to be encrypted.\nadditional_data is a STRING or BYTES value that binds the ciphertext to\nits context. This forces the ciphertext to be decrypted in the same context in\nwhich it was encrypted. plaintext and additional_data must be of the same\ntype. AEAD.ENCRYPT(keyset, string1, string2) is equivalent to\nAEAD.ENCRYPT(keyset, CAST(string1 AS BYTES), CAST(string2 AS BYTES)).\nThe output is ciphertext BYTES. The ciphertext contains a\nTink-specific prefix indicating the key used to perform the encryption.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#aeaddecrypt_string)",
	"aead.encrypt":                           "```sql\nAEAD.ENCRYPT(keyset, plaintext, additional_data)\n\n```\nDescription\nEncrypts plaintext using the primary cryptographic key in keyset. The\nalgorithm of the primary key must be AEAD_AES_GCM_256. Binds the ciphertext to\nthe context defined by additional_data. Returns NULL if any input is NULL.\nkeyset is a serialized BYTES value returned by one of the\nKEYS functions or a STRUCT returned by\nKEYS.KEYSET_CHAIN.\nplaintext is the STRING or\nBYTES value to be encrypted.\nadditional_data is a STRING or BYTES value that binds the ciphertext to\nits context. This forces the ciphertext to be decrypted in the same context in\nwhich it was encrypted. plaintext and additional_data must be of the same\ntype. AEAD.ENCRYPT(keyset, string1, string2) is equivalent to\nAEAD.ENCRYPT(keyset, CAST(string1 AS BYTES), CAST(string2 AS BYTES)).\nThe output is ciphertext BYTES. The ciphertext contains a\nTink-specific prefix indicating the key used to perform the encryption.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#aeadencrypt)",
	"any_value":                              "```sql\nANY_VALUE(\n  expression\n  [ HAVING { MAX | MIN } expression2 ]\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns expression for some row chosen from the group. Which row is chosen is\nnondeterministic, not random. Returns NULL when the input produces no\nrows. Returns NULL when expression\nor expression2 is\nNULL for all rows in the group.\nIf expression contains any non-NULL values, then ANY_VALUE behaves as if\nIGNORE NULLS is specified;\nrows for which expression is NULL aren\"t considered and won\"t be\nselected.\nIf the HAVING clause is included in the ANY_VALUE function, the\nOVER clause can\"t be used with this function.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSupported Argument Types\nAny\nReturned Data Types\nMatches the input data type.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#any_value)",
	"appends":                                "```sql\nAPPENDS(\n  TABLE table,\n  start_timestamp DEFAULT NULL,\n  end_timestamp DEFAULT NULL)\n\n```\nDescription\nThe APPENDS function returns all rows appended to a table for a given\ntime range.\nThe following operations add rows to the APPENDS change history:\nDefinitions\nDetails\nRecords of inserted rows persist even if that data is later deleted. Deletions\naren\"t reflected in the APPENDS function. If a table\nis copied, calling the APPENDS function on the copied table returns every row\nas inserted at the time of table creation. If a row is modified due to an\nUPDATE operation, there\"s no effect.\nOutput\nThe APPENDS function returns a table with the following columns:\nLimitations\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time-series-functions#appends)",
	"approx_count_distinct":                  "```sql\nAPPROX_COUNT_DISTINCT(\n  expression\n)\n\n```\nDescription\nReturns the approximate result for COUNT(DISTINCT expression). The value\nreturned is a statistical estimate, not necessarily the actual value.\nThis function is less accurate than COUNT(DISTINCT expression), but performs\nbetter on huge input.\nSupported Argument Types\nAny data type except:\nReturned Data Types\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions#approx_count_distinct)",
	"approx_quantiles":                       "```sql\nAPPROX_QUANTILES(\n  [ DISTINCT ]\n  expression, number\n  [ { IGNORE | RESPECT } NULLS ]\n)\n\n```\nDescription\nReturns the approximate boundaries for a group of expression values, where\nnumber represents the number of quantiles to create. This function returns an\narray of number + 1 elements, sorted in ascending order, where the\nfirst element is the approximate minimum and the last element is the approximate\nmaximum.\nReturns NULL if there are zero input rows or expression evaluates to\nNULL for all rows.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nSupported Argument Types\nReturned Data Types\nARRAY<T> where T is the type specified by expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions#approx_quantiles)",
	"approx_top_count":                       "```sql\nAPPROX_TOP_COUNT(\n  expression, number\n)\n\n```\nDescription\nReturns the approximate top elements of expression as an array of STRUCTs.\nThe number parameter specifies the number of elements returned.\nEach STRUCT contains two fields. The first field (named value) contains an\ninput value. The second field (named count) contains an INT64 specifying the\nnumber of times the value was returned.\nReturns NULL if there are zero input rows.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nSupported Argument Types\nReturned Data Types\nARRAY<STRUCT>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions#approx_top_count)",
	"approx_top_sum":                         "```sql\nAPPROX_TOP_SUM(\n  expression, weight, number\n)\n\n```\nDescription\nReturns the approximate top elements of expression, ordered by the sum of the\nweight values provided for each unique value of expression. The number\nparameter specifies the number of elements returned.\nIf the weight input is negative or NaN, this function returns an error.\nThe elements are returned as an array of STRUCTs.\nEach STRUCT contains two fields: value and sum.\nThe value field contains the value of the input expression. The sum field is\nthe same type as weight, and is the approximate sum of the input weight\nassociated with the value field.\nReturns NULL if there are zero input rows.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nSupported Argument Types\nReturned Data Types\nARRAY<STRUCT>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions#approx_top_sum)",
	"array":                                  "```sql\nARRAY(subquery)\n\n```\nDescription\nThe ARRAY function returns an ARRAY with one element for each row in a\nsubquery.\nIf subquery produces a\nSQL table,\nthe table must have exactly one column. Each element in the output ARRAY is\nthe value of the single column of a row in the table.\nIf subquery produces a\nvalue table,\nthen each element in the output ARRAY is the entire corresponding row of the\nvalue table.\nConstraints\nReturn type\nARRAY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array)",
	"array_agg":                              "```sql\nARRAY_AGG(\n  [ DISTINCT ]\n  expression\n  [ { IGNORE | RESPECT } NULLS ]\n  [ ORDER BY key [ { ASC | DESC } ] [, ... ] ]\n  [ LIMIT n ]\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns an ARRAY of expression values.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nIf this function is used with the OVER clause, it\"s part of a\nwindow function call. In a window function call,\naggregate function clauses can\"t be used.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nAn error is raised if an array in the final query result contains a NULL\nelement.\nSupported Argument Types\nAll data types except ARRAY.\nReturned Data Types\nARRAY\nIf there are zero input rows, this function returns NULL.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#array_agg)",
	"array_concat":                           "```sql\nARRAY_CONCAT(array_expression[, ...])\n\n```\nDescription\nConcatenates one or more arrays with the same element type into a single array.\nThe function returns NULL if any input argument is NULL.\nReturn type\nARRAY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_concat)",
	"array_concat_agg":                       "```sql\nARRAY_CONCAT_AGG(\n  expression\n  [ ORDER BY key [ { ASC | DESC } ] [, ... ] ]\n  [ LIMIT n ]\n)\n\n```\nDescription\nConcatenates elements from expression of type ARRAY, returning a single\narray as a result.\nThis function ignores NULL input arrays, but respects the NULL elements in\nnon-NULL input arrays. An\nerror is raised, however, if an array in the final query result contains a\nNULL element. Returns NULL if there are zero input rows or\nexpression evaluates to NULL for all rows.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nSupported Argument Types\nARRAY\nReturned Data Types\nARRAY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#array_concat_agg)",
	"array_first":                            "```sql\nARRAY_FIRST(array_expression)\n\n```\nDescription\nTakes an array and returns the first element in the array.\nProduces an error if the array is empty.\nReturns NULL if array_expression is NULL.\nReturn type\nMatches the data type of elements in array_expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_first)",
	"array_last":                             "```sql\nARRAY_LAST(array_expression)\n\n```\nDescription\nTakes an array and returns the last element in the array.\nProduces an error if the array is empty.\nReturns NULL if array_expression is NULL.\nReturn type\nMatches the data type of elements in array_expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_last)",
	"array_length":                           "```sql\nARRAY_LENGTH(array_expression)\n\n```\nDescription\nReturns the size of the array. Returns 0 for an empty array. Returns NULL if\nthe array_expression is NULL.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_length)",
	"array_reverse":                          "```sql\nARRAY_REVERSE(value)\n\n```\nDescription\nReturns the input ARRAY with elements in reverse order.\nReturn type\nARRAY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_reverse)",
	"array_slice":                            "```sql\nARRAY_SLICE(array_to_slice, start_offset, end_offset)\n\n```\nDescription\nReturns an array containing zero or more consecutive elements from the\ninput array.\nAn offset can be positive or negative. A positive offset starts from the\nbeginning of the input array and is 0-based. A negative offset starts from\nthe end of the input array. Out-of-bounds offsets are supported. Here are some\nexamples:\n\n\n\nInput offset\nFinal offset in array\nNotes\n\n\n\n\n0\n[\"a\", \"b\", \"c\", \"d\"]\nThe final offset is 0.\n\n\n3\n[\"a\", \"b\", \"c\", \"d\"]\nThe final offset is 3.\n\n\n5\n[\"a\", \"b\", \"c\", \"d\"]\n\n        Because the input offset is out of bounds,\n        the final offset is 3 (array length - 1).\n      \n\n\n-1\n[\"a\", \"b\", \"c\", \"d\"]\n\n        Because a negative offset is used, the offset starts at the end of the\n        array. The final offset is 3\n        (array length - 1).\n      \n\n\n-2\n[\"a\", \"b\", \"c\", \"d\"]\n\n        Because a negative offset is used, the offset starts at the end of the\n        array. The final offset is 2\n        (array length - 2).\n      \n\n\n-4\n[\"a\", \"b\", \"c\", \"d\"]\n\n        Because a negative offset is used, the offset starts at the end of the\n        array. The final offset is 0\n        (array length - 4).\n      \n\n\n-5\n[\"a\", \"b\", \"c\", \"d\"]\n\n        Because the offset is negative and out of bounds, the final offset is\n        0 (array length - array length).\n      \n\n\n\nAdditional details:\nReturn type\nARRAY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_slice)",
	"array_to_string":                        "```sql\nARRAY_TO_STRING(array_expression, delimiter[, null_text])\n\n```\nDescription\nReturns a concatenation of the elements in array_expression\nas a STRING. The value for array_expression\ncan either be an array of STRING or\nBYTES data types.\nIf the null_text parameter is used, the function replaces any NULL values in\nthe array with the value of null_text.\nIf the null_text parameter isn\"t used, the function omits the NULL value\nand its preceding delimiter.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_to_string)",
	"ascii":                                  "```sql\nASCII(value)\n\n```\nDescription\nReturns the ASCII code for the first character or byte in value. Returns\n0 if value is empty or the ASCII code is 0 for the first character\nor byte.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#ascii)",
	"asin":                                   "```sql\nASIN(X)\n\n```\nDescription\nComputes the principal value of the inverse sine of X. The return value is in\nthe range [-π/2,π/2]. Generates an error if X is outside of\nthe range [-1, 1].\nDescription\nComputes the inverse hyperbolic sine of X. Doesn\"t fail.\nDescription\nComputes the principal value of the inverse tangent of X. The return value is\nin the range [-π/2,π/2]. Doesn\"t fail.\nDescription\nCalculates the principal value of the inverse tangent of X/Y using the signs of\nthe two arguments to determine the quadrant. The return value is in the range\n[-π,π].\nDescription\nComputes the inverse hyperbolic tangent of X. Generates an error if X is outside\nof the range (-1, 1).\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#asin)",
	"asinh":                                  "```sql\nASINH(X)\n\n```\nDescription\nComputes the inverse hyperbolic sine of X. Doesn\"t fail.\nDescription\nComputes the principal value of the inverse tangent of X. The return value is\nin the range [-π/2,π/2]. Doesn\"t fail.\nDescription\nCalculates the principal value of the inverse tangent of X/Y using the signs of\nthe two arguments to determine the quadrant. The return value is in the range\n[-π,π].\nDescription\nComputes the inverse hyperbolic tangent of X. Generates an error if X is outside\nof the range (-1, 1).\nDescription\nComputes the cube root of X. X can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#asinh)",
	"atan":                                   "```sql\nATAN(X)\n\n```\nDescription\nComputes the principal value of the inverse tangent of X. The return value is\nin the range [-π/2,π/2]. Doesn\"t fail.\nDescription\nCalculates the principal value of the inverse tangent of X/Y using the signs of\nthe two arguments to determine the quadrant. The return value is in the range\n[-π,π].\nDescription\nComputes the inverse hyperbolic tangent of X. Generates an error if X is outside\nof the range (-1, 1).\nDescription\nComputes the cube root of X. X can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#atan)",
	"atan2":                                  "```sql\nATAN2(X, Y)\n\n```\nDescription\nCalculates the principal value of the inverse tangent of X/Y using the signs of\nthe two arguments to determine the quadrant. The return value is in the range\n[-π,π].\nDescription\nComputes the inverse hyperbolic tangent of X. Generates an error if X is outside\nof the range (-1, 1).\nDescription\nComputes the cube root of X. X can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#atan2)",
	"atanh":                                  "```sql\nATANH(X)\n\n```\nDescription\nComputes the inverse hyperbolic tangent of X. Generates an error if X is outside\nof the range (-1, 1).\nDescription\nComputes the cube root of X. X can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#atanh)",
	"avg":                                    "```sql\nAVG(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the average of non-NULL values in an aggregated group.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nIf this function is used with the OVER clause, it\"s part of a\nwindow function call. In a window function call,\naggregate function clauses can\"t be used.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nAVG can be used with differential privacy. For more information, see\nDifferentially private aggregate functions.\nCaveats:\nSupported Argument Types\nReturned Data Types\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#avg)",
	"bag_of_words":                           "```sql\nBAG_OF_WORDS(tokenized_document)\n\n```\nDefinition\nGets the frequency of each term (token) in a tokenized document.\nDefinitions\nReturn type\nARRAY<STRUCT<term STRING, count INT64>>\nDefinitions:\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/text-analysis-functions#bag_of_words)",
	"bit_and":                                "```sql\nBIT_AND(\n  expression\n)\n\n```\nDescription\nPerforms a bitwise AND operation on expression and returns the result.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nSupported Argument Types\nReturned Data Types\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#bit_and)",
	"bit_count":                              "```sql\nBIT_COUNT(expression)\n\n```\nDescription\nThe input, expression, must be an\ninteger or BYTES.\nReturns the number of bits that are set in the input expression.\nFor signed integers, this is the number of bits in two\"s complement form.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/bit_functions#bit_count)",
	"bit_or":                                 "```sql\nBIT_OR(\n  expression\n)\n\n```\nDescription\nPerforms a bitwise OR operation on expression and returns the result.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nSupported Argument Types\nReturned Data Types\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#bit_or)",
	"bit_xor":                                "```sql\nBIT_XOR(\n  [ DISTINCT ]\n  expression\n)\n\n```\nDescription\nPerforms a bitwise XOR operation on expression and returns the result.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nSupported Argument Types\nReturned Data Types\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#bit_xor)",
	"bool":                                   "```sql\nBOOL(json_expr)\n\n```\nDescription\nConverts a JSON boolean to a SQL BOOL value.\nArguments:\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#bool_for_json)",
	"byte_length":                            "```sql\nBYTE_LENGTH(value)\n\n```\nDescription\nGets the number of BYTES in a STRING or BYTES value,\nregardless of whether the value is a STRING or BYTES type.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#byte_length)",
	"cast":                                   "```sql\nCAST(expression AS typename [format_clause])\n\n```\nDescription\nCast syntax is used in a query to indicate that the result type of an\nexpression should be converted to some other type.\nWhen using CAST, a query can fail if GoogleSQL is unable to perform\nthe cast. If you want to protect your queries from these types of errors, you\ncan use SAFE_CAST.\nCasts between supported types that don\"t successfully map from the original\nvalue to the target domain produce runtime errors. For example, casting\nBYTES to STRING where the byte sequence isn\"t valid UTF-8 results in a\nruntime error.\nSome casts can include a format clause, which provides\ninstructions for how to conduct the\ncast. For example, you could\ninstruct a cast to convert a sequence of bytes to a BASE64-encoded string\ninstead of a UTF-8-encoded string.\nThe structure of the format clause is unique to each type of cast and more\ninformation is available in the section for that cast.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#cast)",
	"cbrt":                                   "```sql\nCBRT(X)\n\n```\nDescription\nComputes the cube root of X. X can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cbrt)",
	"ceil":                                   "```sql\nCEIL(X)\n\n```\nDescription\nReturns the smallest integral value that isn\"t less than X.\nReturn Data Type\nDescription\nSynonym of CEIL(X)\nDescription\nComputes the cosine of X where X is specified in radians. Never fails.\nDescription\nComputes the hyperbolic cosine of X where X is specified in radians.\nGenerates an error if overflow occurs.\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ceil)",
	"ceiling":                                "```sql\nCEILING(X)\n\n```\nDescription\nSynonym of CEIL(X)\nDescription\nComputes the cosine of X where X is specified in radians. Never fails.\nDescription\nComputes the hyperbolic cosine of X where X is specified in radians.\nGenerates an error if overflow occurs.\nDescription\nComputes the cosine distance between two vectors.\nDefinitions\nDetails\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ceiling)",
	"changes":                                "```sql\nCHANGES(\n  TABLE table,\n  start_timestamp DEFAULT NULL,\n  end_timestamp)\n\n```\nDescription\nThe CHANGES function returns all rows that have changed in a table for a given\ntime range. To use the CHANGES function on a table, you must set the table\"s\nenable_change_history option\nto TRUE.\nThe following operations add rows to the CHANGES change history:\nDefinitions\nDetails\nIf a row is inserted, a record of the new row with an INSERT change type is\nproduced.\nIf a row is deleted, a record of the deleted row with a DELETE change type is\nproduced.\nIf a row is updated, a record of the old row with a DELETE change type and a\nrecord of the new row with an UPDATE change type are produced.\nOutput\nThe CHANGES function returns a table with the following columns:\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time-series-functions#changes)",
	"char_length":                            "```sql\nCHAR_LENGTH(value)\n\n```\nDescription\nGets the number of characters in a STRING value.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#char_length)",
	"character_length":                       "```sql\nCHARACTER_LENGTH(value)\n\n```\nDescription\nSynonym for CHAR_LENGTH.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#character_length)",
	"chr":                                    "```sql\nCHR(value)\n\n```\nDescription\nTakes a Unicode code point and returns\nthe character that matches the code point. Each valid code point should fall\nwithin the range of [0, 0xD7FF] and [0xE000, 0x10FFFF]. Returns an empty string\nif the code point is 0. If an invalid Unicode code point is specified, an\nerror is returned.\nTo work with an array of Unicode code points, see\nCODE_POINTS_TO_STRING\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#chr)",
	"code_points_to_bytes":                   "```sql\nCODE_POINTS_TO_BYTES(ascii_code_points)\n\n```\nDescription\nTakes an array of extended ASCII\ncode points\nas ARRAY<INT64> and returns BYTES.\nTo convert from BYTES to an array of code points, see\nTO_CODE_POINTS.\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#code_points_to_bytes)",
	"code_points_to_string":                  "```sql\nCODE_POINTS_TO_STRING(unicode_code_points)\n\n```\nDescription\nTakes an array of Unicode code points\nas ARRAY<INT64> and returns a STRING.\nTo convert from a string to an array of code points, see\nTO_CODE_POINTS.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#code_points_to_string)",
	"collate":                                "```sql\nCOLLATE(value, collate_specification)\n\n```\nTakes a STRING and a collation specification. Returns\na STRING with a collation specification. If collate_specification is empty,\nreturns a value with collation removed from the STRING.\nThe collation specification defines how the resulting STRING can be compared\nand sorted. To learn more, see\nCollation.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#collate)",
	"concat":                                 "```sql\nCONCAT(value1[, ...])\n\n```\nDescription\nConcatenates one or more values into a single result. All values must be\nBYTES or data types that can be cast to STRING.\nThe function returns NULL if any input argument is NULL.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#concat)",
	"contains_substr":                        "```sql\nCONTAINS_SUBSTR(\n  expression,\n  search_value_literal\n  [, json_scope => json_scope_value ]\n)\n\n```\nDescription\nPerforms a normalized, case-insensitive search to see if a value exists as a\nsubstring in an expression. Returns TRUE if the value exists, otherwise\nreturns FALSE.\nBefore values are compared, they are normalized and case folded with NFKC\nnormalization. Wildcard searches aren\"t\nsupported.\nArguments\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#contains_substr)",
	"corr":                                   "```sql\nCORR(\n  X1, X2\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the Pearson coefficient\nof correlation of a set of number pairs. For each number pair, the first number\nis the dependent variable and the second number is the independent variable.\nThe return result is between -1 and 1. A result of 0 indicates no\ncorrelation.\nAll numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.\nThis function ignores any input pairs that contain one or more NULL values. If\nthere are fewer than two input pairs without NULL values, this function\nreturns NULL.\nNaN is produced if:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#corr)",
	"cos":                                    "```sql\nCOS(X)\n\n```\nDescription\nComputes the cosine of X where X is specified in radians. Never fails.\nDescription\nComputes the hyperbolic cosine of X where X is specified in radians.\nGenerates an error if overflow occurs.\nDescription\nComputes the cosine distance between two vectors.\nDefinitions\nDetails\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cos)",
	"cosh":                                   "```sql\nCOSH(X)\n\n```\nDescription\nComputes the hyperbolic cosine of X where X is specified in radians.\nGenerates an error if overflow occurs.\nDescription\nComputes the cosine distance between two vectors.\nDefinitions\nDetails\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cosh)",
	"cosine_distance":                        "```sql\nCOSINE_DISTANCE(vector1, vector2)\n\n```\nDescription\nComputes the cosine distance between two vectors.\nDefinitions\nDetails\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cosine_distance)",
	"cot":                                    "```sql\nCOT(X)\n\n```\nDescription\nComputes the cotangent for the angle of X, where X is specified in radians.\nX can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cot)",
	"coth":                                   "```sql\nCOTH(X)\n\n```\nDescription\nComputes the hyperbolic cotangent for the angle of X, where X is specified\nin radians. X can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#coth)",
	"count":                                  "```sql\nCOUNT(*)\n[ OVER over_clause ]\n\n```\nDescription\nGets the number of rows in the input or the number of rows with an\nexpression evaluated to any value other than NULL.\nDefinitions\nDetails\nTo count the number of distinct values of an expression for which a\ncertain condition is satisfied, you can use the following recipe:\nIF returns the value of expression if condition is TRUE, or\nNULL otherwise. The surrounding COUNT(DISTINCT ...) ignores the NULL\nvalues, so it counts only the distinct values of expression for which\ncondition is TRUE.\nTo count the number of non-distinct values of an expression for which a\ncertain condition is satisfied, consider using the\nCOUNTIF function.\nThis function with DISTINCT supports specifying collation.\nCOUNT can be used with differential privacy. For more information, see\nDifferentially private aggregate functions.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#count)",
	"countif":                                "```sql\nCOUNTIF(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nGets the number of TRUE values for an expression.\nDefinitions\nDetails\nThe function signature COUNTIF(DISTINCT ...) is generally not useful. If you\nwould like to use DISTINCT, use COUNT with DISTINCT IF. For more\ninformation, see the COUNT function.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#countif)",
	"covar_pop":                              "```sql\nCOVAR_POP(\n  X1, X2\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the population covariance of\na set of number pairs. The first number is the dependent variable; the second\nnumber is the independent variable. The return result is between -Inf and\n+Inf.\nAll numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.\nThis function ignores any input pairs that contain one or more NULL values. If\nthere is no input pair without NULL values, this function returns NULL.\nIf there is exactly one input pair without NULL values, this function returns\n0.\nNaN is produced if:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#covar_pop)",
	"covar_samp":                             "```sql\nCOVAR_SAMP(\n  X1, X2\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the sample covariance of a\nset of number pairs. The first number is the dependent variable; the second\nnumber is the independent variable. The return result is between -Inf and\n+Inf.\nAll numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.\nThis function ignores any input pairs that contain one or more NULL values. If\nthere are fewer than two input pairs without NULL values, this function\nreturns NULL.\nNaN is produced if:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#covar_samp)",
	"csc":                                    "```sql\nCSC(X)\n\n```\nDescription\nComputes the cosecant of the input angle, which is in radians.\nX can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#csc)",
	"csch":                                   "```sql\nCSCH(X)\n\n```\nDescription\nComputes the hyperbolic cosecant of the input angle, which is in radians.\nX can be any data type\nthat coerces to FLOAT64.\nSupports the SAFE. prefix.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#csch)",
	"cume_dist":                              "```sql\nCUME_DIST()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n\n\n```\nDescription\nReturn the relative rank of a row defined as NP/NR. NP is defined to be the\nnumber of rows that either precede or are peers with the current row. NR is the\nnumber of rows in the partition.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#cume_dist)",
	"current_date":                           "```sql\nCURRENT_DATE()\n\n```\nDescription\nReturns the current date as a DATE object. Parentheses are optional when\ncalled with no arguments.\nThis function supports the following arguments:\nThe current date value is set at the start of the query statement that contains\nthis function. All invocations of CURRENT_DATE() within a query statement\nyield the same value.\nReturn Data Type\nDATE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#current_date)",
	"current_datetime":                       "```sql\nCURRENT_DATETIME([time_zone])\n\n```\nDescription\nReturns the current time as a DATETIME object. Parentheses are optional when\ncalled with no arguments.\nThis function supports an optional time_zone parameter.\nSee Time zone definitions for\ninformation on how to specify a time zone.\nThe current date and time value is set at the start of the query statement that\ncontains this function. All invocations of CURRENT_DATETIME() within a query\nstatement yield the same value.\nReturn Data Type\nDATETIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#current_datetime)",
	"current_time":                           "```sql\nCURRENT_TIME([time_zone])\n\n```\nDescription\nReturns the current time as a TIME object. Parentheses are optional when\ncalled with no arguments.\nThis function supports an optional time_zone parameter.\nSee Time zone definitions for information\non how to specify a time zone.\nThe current time value is set at the start of the query statement that contains\nthis function. All invocations of CURRENT_TIME() within a query statement\nyield the same value.\nReturn Data Type\nTIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#current_time)",
	"current_timestamp":                      "```sql\nCURRENT_TIMESTAMP()\n\n```\nDescription\nReturns the current date and time as a timestamp object. The timestamp is\ncontinuous, non-ambiguous, has exactly 60 seconds per minute and doesn\"t repeat\nvalues over the leap second. Parentheses are optional.\nThis function handles leap seconds by smearing them across a window of 20 hours\naround the inserted leap second.\nThe current timestamp value is set at the start of the query statement that\ncontains this function. All invocations of CURRENT_TIMESTAMP() within a query\nstatement yield the same value.\nSupported Input Types\nNot applicable\nResult Data Type\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#current_timestamp)",
	"date":                                   "```sql\nDATE(year, month, day)\n\n```\nDescription\nConstructs or extracts a date.\nThis function supports the following arguments:\nReturn Data Type\nDATE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date)",
	"date_add":                               "```sql\nDATE_ADD(date_expression, INTERVAL int64_expression date_part)\n\n```\nDescription\nAdds a specified time interval to a DATE.\nDATE_ADD supports the following date_part values:\nSpecial handling is required for MONTH, QUARTER, and YEAR parts when\nthe date is at (or near) the last day of the month. If the resulting\nmonth has fewer days than the original date\"s day, then the resulting\ndate is the last date of that month.\nReturn Data Type\nDATE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_add)",
	"date_bucket":                            "```sql\nDATE_BUCKET(date_in_bucket, bucket_width)\n\n```\nDescription\nGets the lower bound of the date bucket that contains a date.\nDefinitions\nReturn type\nDATE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time-series-functions#date_bucket)",
	"date_diff":                              "```sql\nDATE_DIFF(end_date, start_date, granularity)\n\n```\nDescription\nGets the number of unit boundaries between two DATE values (end_date -\nstart_date) at a particular time granularity.\nDefinitions\nDetails\nIf end_date is earlier than start_date, the output is negative.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_diff)",
	"date_from_unix_date":                    "```sql\nDATE_FROM_UNIX_DATE(int64_expression)\n\n```\nDescription\nInterprets int64_expression as the number of days since 1970-01-01.\nReturn Data Type\nDATE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_from_unix_date)",
	"date_sub":                               "```sql\nDATE_SUB(date_expression, INTERVAL int64_expression date_part)\n\n```\nDescription\nSubtracts a specified time interval from a DATE.\nDATE_SUB supports the following date_part values:\nSpecial handling is required for MONTH, QUARTER, and YEAR parts when\nthe date is at (or near) the last day of the month. If the resulting\nmonth has fewer days than the original date\"s day, then the resulting\ndate is the last date of that month.\nReturn Data Type\nDATE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_sub)",
	"date_trunc":                             "```sql\nDATE_TRUNC(date_value, date_granularity)\n\n```\nDescription\nTruncates a DATE, DATETIME, or TIMESTAMP value at a particular\ngranularity.\nDefinitions\n\nDate granularity definitions\n\nTime granularity definitions\n\nTime zone part definitions\nDetails\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_trunc)",
	"datetime":                               "```sql\n1. DATETIME(year, month, day, hour, minute, second)\n2. DATETIME(date_expression[, time_expression])\n3. DATETIME(timestamp_expression [, time_zone])\n\n```\nDescription\nReturn Data Type\nDATETIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime)",
	"datetime_add":                           "```sql\nDATETIME_ADD(datetime_expression, INTERVAL int64_expression part)\n\n```\nDescription\nAdds int64_expression units of part to the DATETIME object.\nDATETIME_ADD supports the following values for part:\nSpecial handling is required for MONTH, QUARTER, and YEAR parts when the\ndate is at (or near) the last day of the month. If the resulting month has fewer\ndays than the original DATETIME\"s day, then the result day is the last day of\nthe new month.\nReturn Data Type\nDATETIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime_add)",
	"datetime_bucket":                        "```sql\nDATETIME_BUCKET(datetime_in_bucket, bucket_width)\n\n```\nDescription\nGets the lower bound of the datetime bucket that contains a datetime.\nDefinitions\nReturn type\nDATETIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time-series-functions#datetime_bucket)",
	"datetime_diff":                          "```sql\nDATETIME_DIFF(end_datetime, start_datetime, granularity)\n\n```\nDescription\nGets the number of unit boundaries between two DATETIME values\n(end_datetime - start_datetime) at a particular time granularity.\nDefinitions\nDetails\nIf end_datetime is earlier than start_datetime, the output is negative.\nProduces an error if the computation overflows, such as if the difference\nin microseconds\nbetween the two DATETIME values overflows.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime_diff)",
	"datetime_sub":                           "```sql\nDATETIME_SUB(datetime_expression, INTERVAL int64_expression part)\n\n```\nDescription\nSubtracts int64_expression units of part from the DATETIME.\nDATETIME_SUB supports the following values for part:\nSpecial handling is required for MONTH, QUARTER, and YEAR parts when the\ndate is at (or near) the last day of the month. If the resulting month has fewer\ndays than the original DATETIME\"s day, then the result day is the last day of\nthe new month.\nReturn Data Type\nDATETIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime_sub)",
	"datetime_trunc":                         "```sql\nDATETIME_TRUNC(datetime_value, datetime_granularity)\n\n```\nDescription\nTruncates a DATETIME or TIMESTAMP value at a particular granularity.\nDefinitions\n\nDate granularity definitions\n\nTime granularity definitions\n\nTime zone part definitions\nDetails\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime_trunc)",
	"dense_rank":                             "```sql\nDENSE_RANK()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n\n\n```\nDescription\nReturns the ordinal (1-based) rank of each row within the window partition.\nAll peer rows receive the same rank value, and the subsequent rank value is\nincremented by one.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#dense_rank)",
	"deterministic_decrypt_bytes":            "```sql\nDETERMINISTIC_DECRYPT_BYTES(keyset, ciphertext, additional_data)\n\n```\nDescription\nUses the matching key from keyset to decrypt ciphertext and verifies the\nintegrity of the data using additional_data. Returns an error if decryption\nfails.\nkeyset is a serialized BYTES value or a STRUCT\nvalue returned by one of the KEYS functions. keyset must contain\nthe key that was used to encrypt ciphertext, the key must be in an \"ENABLED\"\nstate, and the key must be of type DETERMINISTIC_AEAD_AES_SIV_CMAC_256, or\nelse the function returns an error. DETERMINISTIC_DECRYPT_BYTES identifies the\nmatching key in keyset by finding the key with the key ID that matches the one\nencrypted in ciphertext.\nciphertext is a BYTES value that\"s the result of a call to\nDETERMINISTIC_ENCRYPT where the input plaintext was of type BYTES.\nThe ciphertext must follow Tink\"s wire format. The first\nbyte of ciphertext should contain a Tink key version followed by a 4 byte key\nhint. If ciphertext includes an initialization vector (IV), it should be the\nnext bytes of ciphertext. If ciphertext includes an authentication tag, it\nshould be the last bytes of ciphertext. If the IV and authentic tag are one\n(SIV), it should be the first bytes of ciphertext. The IV and authentication\ntag commonly require 16 bytes, but may vary in size.\nadditional_data is a STRING or BYTES value that binds the ciphertext to\nits context. This forces the ciphertext to be decrypted in the same context in\nwhich it was encrypted. This function casts any STRING value to BYTES. This\nmust be the same as the additional_data provided to DETERMINISTIC_ENCRYPT to\nencrypt ciphertext, ignoring its type, or else the function returns an error.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#deterministic_decrypt_bytes)",
	"deterministic_decrypt_string":           "```sql\nDETERMINISTIC_DECRYPT_STRING(keyset, ciphertext, additional_data)\n\n```\nDescription\nLike DETERMINISTIC_DECRYPT_BYTES, but where\nplaintext is of type STRING.\nReturn Data Type\nSTRING\nDescription\nEncrypts plaintext using the primary cryptographic key in keyset using\ndeterministic AEAD. The algorithm of the primary key must\nbe DETERMINISTIC_AEAD_AES_SIV_CMAC_256. Binds the ciphertext to the context\ndefined by additional_data. Returns NULL if any input is NULL.\nkeyset is a serialized BYTES value or a STRUCT\nvalue returned by one of the KEYS functions.\nplaintext is the STRING or BYTES value to be encrypted.\nadditional_data is a STRING or BYTES value that binds the ciphertext to\nits context. This forces the ciphertext to be decrypted in the same context in\nwhich it was encrypted. plaintext and additional_data must be of the same\ntype. DETERMINISTIC_ENCRYPT(keyset, string1, string2) is equivalent to\nDETERMINISTIC_ENCRYPT(keyset, CAST(string1 AS BYTES), CAST(string2 AS BYTES)).\nThe output is ciphertext BYTES. The ciphertext contains a\nTink-specific prefix indicating the key used to perform the encryption.\nGiven an identical keyset and plaintext, this function returns the same\nciphertext each time it\"s invoked (including across queries).\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#deterministic_decrypt_string)",
	"deterministic_encrypt":                  "```sql\nDETERMINISTIC_ENCRYPT(keyset, plaintext, additional_data)\n\n```\nDescription\nEncrypts plaintext using the primary cryptographic key in keyset using\ndeterministic AEAD. The algorithm of the primary key must\nbe DETERMINISTIC_AEAD_AES_SIV_CMAC_256. Binds the ciphertext to the context\ndefined by additional_data. Returns NULL if any input is NULL.\nkeyset is a serialized BYTES value or a STRUCT\nvalue returned by one of the KEYS functions.\nplaintext is the STRING or BYTES value to be encrypted.\nadditional_data is a STRING or BYTES value that binds the ciphertext to\nits context. This forces the ciphertext to be decrypted in the same context in\nwhich it was encrypted. plaintext and additional_data must be of the same\ntype. DETERMINISTIC_ENCRYPT(keyset, string1, string2) is equivalent to\nDETERMINISTIC_ENCRYPT(keyset, CAST(string1 AS BYTES), CAST(string2 AS BYTES)).\nThe output is ciphertext BYTES. The ciphertext contains a\nTink-specific prefix indicating the key used to perform the encryption.\nGiven an identical keyset and plaintext, this function returns the same\nciphertext each time it\"s invoked (including across queries).\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#deterministic_encrypt)",
	"div":                                    "```sql\nDIV(X, Y)\n\n```\nDescription\nReturns the result of integer division of X by Y. Division by zero returns\nan error. Division by -1 may overflow.\nReturn Data Type\nThe return data type is determined by the argument types with the following\ntable.\n\n\n\nINPUTINT64NUMERICBIGNUMERIC\n\n\n\nINT64INT64NUMERICBIGNUMERIC\nNUMERICNUMERICNUMERICBIGNUMERIC\nBIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERIC\n\n\nDescription\nComputes e to the power of X, also called the natural exponential function. If\nthe result underflows, this function returns a zero. Generates an error if the\nresult overflows.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#div)",
	"dlp_deterministic_encrypt":              "```sql\nDLP_DETERMINISTIC_ENCRYPT(key, plaintext, surrogate)\n\n```\nDescription\nThis function derives a data encryption key from key and context, and then\nencrypts plaintext. You can use surrogate to prepend the\nencryption result. To use DLP functions, you need a\nnew cryptographic key and then use that key to get a wrapped key.\nDefinitions\nReturn data type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/dlp_functions#dlp_deterministic_encrypt)",
	"dlp_deterministic_decrypt":              "```sql\nDLP_DETERMINISTIC_DECRYPT(key, ciphertext, surrogate)\n\n```\nDescription\nThis function decrypts ciphertext using an encryption key derived from key\nand context. You can use surrogate to prepend the decryption\nresult. To use DLP functions, you need a\nnew cryptographic key and then use that key to get a wrapped key.\nDefinitions\nReturn data type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/dlp_functions#dlp_deterministic_decrypt)",
	"dlp_key_chain":                          "```sql\nDLP_KEY_CHAIN(kms_resource_name, wrapped_key)\n\n```\nDescription\nYou can use this function instead of the key argument for\nDLP deterministic encryption functions. This function lets\nyou use the AES-SIV encryption functions\nwithout including plaintext keys in a query. To use DLP functions, you need a\nnew cryptographic key and then use that key to get a wrapped key.\nDefinitions\nReturn data type\nSTRUCT\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/dlp_functions#dlp_key_chain)",
	"float64":                                "```sql\nFLOAT64(\n  json_expr\n  [, wide_number_mode => { \"exact\" | \"round\" } ]\n)\n\n```\nDescription\nConverts a JSON number to a SQL FLOAT64 value.\nArguments:\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#double_for_json)",
	"edit_distance":                          "```sql\nEDIT_DISTANCE(\n  value1,\n  value2,\n  [ max_distance => max_distance_value ]\n)\n\n```\nDescription\nComputes the Levenshtein distance between two STRING or\nBYTES values.\nDefinitions\nDetails\nIf value1 or value2 is NULL, NULL is returned.\nYou can only compare values of the same type. Otherwise, an error is produced.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#edit_distance)",
	"ends_with":                              "```sql\nENDS_WITH(value, suffix)\n\n```\nDescription\nTakes two STRING or BYTES values. Returns TRUE if suffix\nis a suffix of value.\nThis function supports specifying collation.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#ends_with)",
	"error":                                  "```sql\nERROR(error_message)\n\n```\nDescription\nReturns an error.\nDefinitions\nDetails\nERROR is treated like any other expression that may\nresult in an error: there is no special guarantee of evaluation order.\nReturn Data Type\nGoogleSQL infers the return type in context.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging_functions#error)",
	"exp":                                    "```sql\nEXP(X)\n\n```\nDescription\nComputes e to the power of X, also called the natural exponential function. If\nthe result underflows, this function returns a zero. Generates an error if the\nresult overflows.\nReturn Data Type\nDescription\nComputes the Euclidean distance between two vectors.\nDefinitions\nDetails\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#exp)",
	"external_object_transform":              "```sql\nEXTERNAL_OBJECT_TRANSFORM(TABLE object_table_name, transform_types_array)\n\n```\nDescription\nThis function returns a transformed object table with the original columns plus\none or more additional columns, depending on the transform_types values\nspecified.\nThis function only supports\nobject tables\nas inputs. Subqueries or any other types of tables aren\"t supported.\nobject_table_name is the name of the object table to be transformed, in\nthe format dataset_name.object_table_name.\ntransform_types_array is an array of STRING literals. Currently, the only\nsupported transform_types_array value is SIGNED_URL. Specifying SIGNED_URL\ncreates read-only signed URLs for the objects in the identified object table,\nwhich are returned in a signed_url column. Generated signed URLs are\nvalid for 6 hours.\nReturn Type\nTABLE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/table-functions-built-in#external_object_transform)",
	"external_query":                         "```sql\nEXTERNAL_QUERY(\"connection_id\", \"\"\"external_database_query\"\"\"[, \"options\"])\n\n```\nDescription\nExecutes a query on an external database and returns the results as a\ntemporary table. The external database data type is\nconverted to a GoogleSQL data type in the temporary\nresult table with these data type mappings.\nAdditional notes:\nReturn Data Type\nBigQuery table\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/federated_query_functions#external_query)",
	"extract":                                "```sql\nEXTRACT(part FROM timestamp_expression [AT TIME ZONE time_zone])\n\n```\nDescription\nReturns a value that corresponds to the specified part from\na supplied timestamp_expression. This function supports an optional\ntime_zone parameter. See\nTime zone definitions for information\non how to specify a time zone.\nAllowed part values are:\nReturned values truncate lower order time periods. For example, when extracting\nseconds, EXTRACT truncates the millisecond and microsecond values.\nReturn Data Type\nINT64, except in the following cases:\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#extract)",
	"euclidean_distance":                     "```sql\nEUCLIDEAN_DISTANCE(vector1, vector2)\n\n```\nDescription\nComputes the Euclidean distance between two vectors.\nDefinitions\nDetails\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#euclidean_distance)",
	"farm_fingerprint":                       "```sql\nFARM_FINGERPRINT(value)\n\n```\nDescription\nComputes the fingerprint of the STRING or BYTES input using the\nFingerprint64 function from the\nopen-source FarmHash library. The output\nof this function for a particular input will never change.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions#farm_fingerprint)",
	"first_value":                            "```sql\nFIRST_VALUE (value_expression [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the value of the value_expression for the first row in the current\nwindow frame.\nThis function includes NULL values in the calculation unless IGNORE NULLS is\npresent. If IGNORE NULLS is present, the function excludes NULL values from\nthe calculation.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSupported Argument Types\nvalue_expression can be any data type that an expression can return.\nReturn Data Type\nSame type as value_expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#first_value)",
	"floor":                                  "```sql\nFLOOR(X)\n\n```\nDescription\nReturns the largest integral value that isn\"t greater than X.\nReturn Data Type\nDescription\nReturns the greatest value among X1,...,XN. If any argument is NULL, returns\nNULL. Otherwise, in the case of floating-point arguments, if any argument is\nNaN, returns NaN. In all other cases, returns the value among X1,...,XN\nthat has the greatest value according to the ordering used by the ORDER BY\nclause. The arguments X1, ..., XN must be coercible to a common supertype, and\nthe supertype must support ordering.\nThis function supports specifying collation.\nReturn Data Types\nData type of the input values.\nDescription\nDivides X by Y; this function never fails. Returns\nFLOAT64. Unlike the division operator (/),\nthis function doesn\"t generate errors for division by zero or overflow.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#floor)",
	"format_date":                            "```sql\nFORMAT_DATE(format_string, date_expr)\n\n```\nDescription\nFormats a DATE value according to a specified format string.\nDefinitions\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#format_date)",
	"format_datetime":                        "```sql\nFORMAT_DATETIME(format_string, datetime_expr)\n\n```\nDescription\nFormats a DATETIME value according to a specified format string.\nDefinitions\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#format_datetime)",
	"format_time":                            "```sql\nFORMAT_TIME(format_string, time_expr)\n\n```\nDescription\nFormats a TIME value according to the specified format string.\nDefinitions\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#format_time)",
	"format_timestamp":                       "```sql\nFORMAT_TIMESTAMP(format_string, timestamp_expr[, time_zone])\n\n```\nDescription\nFormats a TIMESTAMP value according to the specified format string.\nDefinitions\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#format_timestamp)",
	"format":                                 "```sql\nFORMAT(format_string_expression, data_type_expression[, ...])\n\n```\nDescription\nFORMAT formats a data type expression as a string.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#format_string)",
	"from_base32":                            "```sql\nFROM_BASE32(string_expr)\n\n```\nDescription\nConverts the base32-encoded input string_expr into BYTES format. To convert\nBYTES to a base32-encoded STRING, use TO_BASE32.\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#from_base32)",
	"from_base64":                            "```sql\nFROM_BASE64(string_expr)\n\n```\nDescription\nConverts the base64-encoded input string_expr into\nBYTES format. To convert\nBYTES to a base64-encoded STRING,\nuse TO_BASE64.\nThere are several base64 encodings in common use that vary in exactly which\nalphabet of 65 ASCII characters are used to encode the 64 digits and padding.\nSee RFC 4648 for details. This\nfunction expects the alphabet [A-Za-z0-9+/=].\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#from_base64)",
	"from_hex":                               "```sql\nFROM_HEX(string)\n\n```\nDescription\nConverts a hexadecimal-encoded STRING into BYTES format. Returns an error\nif the input STRING contains characters outside the range\n(0..9, A..F, a..f). The lettercase of the characters doesn\"t matter. If the\ninput STRING has an odd number of characters, the function acts as if the\ninput has an additional leading 0. To convert BYTES to a hexadecimal-encoded\nSTRING, use TO_HEX.\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#from_hex)",
	"gap_fill":                               "```sql\nGAP_FILL (\n  TABLE time_series_table,\n  time_series_column,\n  bucket_width,\n  [, partitioning_columns => value ]\n  [, value_columns => value ]\n  [, origin => value ]\n  [, ignore_null_values => { TRUE | FALSE } ]\n)\n\n```\nDescription\nFinds and fills gaps in a time series.\nDefinitions\nDetails\nSometimes the fixed time intervals produced by time bucket functions have gaps,\neither due to irregular sampling intervals or an event that caused data loss\nfor some time period. This can cause irregularities in reporting. For example,\na plot with irregular intervals might have visible discontinuity. You can use\nthe GAP_FILL function to employ various gap-filling methods to fill in\nthose missing data points.\ntime_series_column and origin must be of the same data type.\nReturn type\nTABLE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time-series-functions#gap_fill)",
	"generate_array":                         "```sql\nGENERATE_ARRAY(start_expression, end_expression[, step_expression])\n\n```\nDescription\nReturns an array of values. The start_expression and end_expression\nparameters determine the inclusive start and end of the array.\nThe GENERATE_ARRAY function accepts the following data types as inputs:\nThe step_expression parameter determines the increment used to\ngenerate array values. The default value for this parameter is 1.\nThis function returns an error if step_expression is set to 0, or if any\ninput is NaN.\nIf any argument is NULL, the function will return a NULL array.\nReturn Data Type\nARRAY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#generate_array)",
	"generate_date_array":                    "```sql\nGENERATE_DATE_ARRAY(start_date, end_date[, INTERVAL INT64_expr date_part])\n\n```\nDescription\nReturns an array of dates. The start_date and end_date\nparameters determine the inclusive start and end of the array.\nThe GENERATE_DATE_ARRAY function accepts the following data types as inputs:\nThe INT64_expr parameter determines the increment used to generate dates. The\ndefault value for this parameter is 1 day.\nThis function returns an error if INT64_expr is set to 0.\nReturn Data Type\nARRAY containing 0 or more DATE values.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#generate_date_array)",
	"generate_range_array":                   "```sql\nGENERATE_RANGE_ARRAY(range_to_split, step_interval)\n\n```\nDescription\nSplits a range into an array of subranges.\nDefinitions\nDetails\nReturns NULL if any input isNULL.\nReturn type\nARRAY<RANGE<T>>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/range-functions#generate_range_array)",
	"generate_timestamp_array":               "```sql\nGENERATE_TIMESTAMP_ARRAY(start_timestamp, end_timestamp,\n                         INTERVAL step_expression date_part)\n\n```\nDescription\nReturns an ARRAY of TIMESTAMPS separated by a given interval. The\nstart_timestamp and end_timestamp parameters determine the inclusive\nlower and upper bounds of the ARRAY.\nThe GENERATE_TIMESTAMP_ARRAY function accepts the following data types as\ninputs:\nThe step_expression parameter determines the increment used to generate\ntimestamps.\nReturn Data Type\nAn ARRAY containing 0 or more TIMESTAMP values.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#generate_timestamp_array)",
	"generate_uuid":                          "```sql\nGENERATE_UUID()\n\n```\nDescription\nReturns a random universally unique identifier (UUID) as a STRING.\nThe returned STRING consists of 32 hexadecimal\ndigits in five groups separated by hyphens in the form 8-4-4-4-12. The\nhexadecimal digits represent 122 random bits and 6 fixed bits, in compliance\nwith RFC 4122 section 4.4.\nThe returned STRING is lowercase.\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/utility-functions#generate_uuid)",
	"greatest":                               "```sql\nGREATEST(X1,...,XN)\n\n```\nDescription\nReturns the greatest value among X1,...,XN. If any argument is NULL, returns\nNULL. Otherwise, in the case of floating-point arguments, if any argument is\nNaN, returns NaN. In all other cases, returns the value among X1,...,XN\nthat has the greatest value according to the ordering used by the ORDER BY\nclause. The arguments X1, ..., XN must be coercible to a common supertype, and\nthe supertype must support ordering.\nThis function supports specifying collation.\nReturn Data Types\nData type of the input values.\nDescription\nDivides X by Y; this function never fails. Returns\nFLOAT64. Unlike the division operator (/),\nthis function doesn\"t generate errors for division by zero or overflow.\nDescription\nReturns TRUE if the value is positive or negative infinity.\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#greatest)",
	"grouping":                               "```sql\nGROUPING(groupable_value)\n\n```\nDescription\nIf a groupable item in the GROUP BY clause is aggregated\n(and thus not grouped), this function returns 1. Otherwise,\nthis function returns 0.\nDefinitions:\nDetails:\nThe GROUPING function is helpful if you need to determine which rows are\nproduced by which grouping sets. A grouping set is a group of columns by which\nrows can be grouped together. So, if you need to filter rows by\na few specific grouping sets, you can use the GROUPING function to identify\nwhich grouping sets grouped which rows by creating a matrix of the results.\nIn addition, you can use the GROUPING function to determine the type of\nNULL produced by the GROUP BY clause. In some cases, the GROUP BY clause\nproduces a NULL placeholder. This placeholder represents all groupable items\nthat are aggregated (not grouped) in the current grouping set. This is different\nfrom a standard NULL, which can also be produced by a query.\nFor more information, see the following examples.\nReturned Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#grouping)",
	"hll_count.extract":                      "```sql\nHLL_COUNT.EXTRACT(sketch)\n\n```\nDescription\nA scalar function that extracts a cardinality estimate of a single\nHLL++ sketch.\nIf sketch is NULL, this function returns a cardinality estimate of 0.\nSupported input types\nBYTES\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions#hll_countextract)",
	"hll_count.init":                         "```sql\nHLL_COUNT.INIT(input [, precision])\n\n```\nDescription\nAn aggregate function that takes one or more input values and aggregates them\ninto a HLL++ sketch. Each sketch\nis represented using the BYTES data type. You can then merge sketches using\nHLL_COUNT.MERGE or HLL_COUNT.MERGE_PARTIAL. If no merging is needed,\nyou can extract the final count of distinct values from the sketch using\nHLL_COUNT.EXTRACT.\nThis function supports an optional parameter, precision. This parameter\ndefines the accuracy of the estimate at the cost of additional memory required\nto process the sketches or store them on disk. The range for this value is\n10 to 24. The default value is 15. For more information about precision,\nsee Precision for sketches.\nIf the input is NULL, this function returns NULL.\nFor more information, see HyperLogLog in Practice: Algorithmic Engineering of\na State of The Art Cardinality Estimation Algorithm.\nSupported input types\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions#hll_countinit)",
	"hll_count.merge":                        "```sql\nHLL_COUNT.MERGE(sketch)\n\n```\nDescription\nAn aggregate function that returns the cardinality of several\nHLL++ sketches by computing their union.\nEach sketch must be initialized on the same type. Attempts to merge sketches\nfor different types results in an error. For example, you can\"t merge a sketch\ninitialized from INT64 data with one initialized from STRING data.\nIf the merged sketches were initialized with different precisions, the precision\nwill be downgraded to the lowest precision involved in the merge.\nThis function ignores NULL values when merging sketches. If the merge happens\nover zero rows or only over NULL values, the function returns 0.\nSupported input types\nBYTES\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions#hll_countmerge)",
	"hll_count.merge_partial":                "```sql\nHLL_COUNT.MERGE_PARTIAL(sketch)\n\n```\nDescription\nAn aggregate function that takes one or more\nHLL++ sketch\ninputs and merges them into a new sketch.\nEach sketch must be initialized on the same type. Attempts to merge sketches\nfor different types results in an error. For example, you can\"t merge a sketch\ninitialized from INT64 data with one initialized from STRING data.\nIf the merged sketches were initialized with different precisions, the precision\nwill be downgraded to the lowest precision involved in the merge. For example,\nif MERGE_PARTIAL encounters sketches of precision 14 and 15, the returned new\nsketch will have precision 14.\nThis function returns NULL if there is no input or all inputs are NULL.\nSupported input types\nBYTES\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions#hll_countmerge_partial)",
	"ieee_divide":                            "```sql\nIEEE_DIVIDE(X, Y)\n\n```\nDescription\nDivides X by Y; this function never fails. Returns\nFLOAT64. Unlike the division operator (/),\nthis function doesn\"t generate errors for division by zero or overflow.\nDescription\nReturns TRUE if the value is positive or negative infinity.\nDescription\nReturns TRUE if the value is a NaN value.\nDescription\nReturns the least value among X1,...,XN. If any argument is NULL, returns\nNULL. Otherwise, in the case of floating-point arguments, if any argument is\nNaN, returns NaN. In all other cases, returns the value among X1,...,XN\nthat has the least value according to the ordering used by the ORDER BY\nclause. The arguments X1, ..., XN must be coercible to a common supertype, and\nthe supertype must support ordering.\nThis function supports specifying collation.\nReturn Data Types\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ieee_divide)",
	"initcap":                                "```sql\nINITCAP(value[, delimiters])\n\n```\nDescription\nTakes a STRING and returns it with the first character in each word in\nuppercase and all other characters in lowercase. Non-alphabetic characters\nremain the same.\ndelimiters is an optional string argument that\"s used to override the default\nset of characters used to separate words. If delimiters isn\"t specified, it\ndefaults to the following characters: \n<whitespace> [ ] ( ) { } / | \\ < > ! ? @ \" ^ # $ & ~ _ , . : ; * % + -\nIf value or delimiters is NULL, the function returns NULL.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#initcap)",
	"instr":                                  "```sql\nINSTR(value, subvalue[, position[, occurrence]])\n\n```\nDescription\nReturns the lowest 1-based position of subvalue in value.\nvalue and subvalue must be the same type, either\nSTRING or BYTES.\nIf position is specified, the search starts at this position in\nvalue, otherwise it starts at 1, which is the beginning of\nvalue. If position is negative, the function searches backwards\nfrom the end of value, with -1 indicating the last character.\nposition is of type INT64 and can\"t be 0.\nIf occurrence is specified, the search returns the position of a specific\ninstance of subvalue in value. If not specified, occurrence\ndefaults to 1 and returns the position of the first occurrence.\nFor occurrence > 1, the function includes overlapping occurrences.\noccurrence is of type INT64 and must be positive.\nThis function supports specifying collation.\nReturns 0 if:\nReturns NULL if:\nReturns an error if:\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#instr)",
	"int64":                                  "```sql\nINT64(json_expr)\n\n```\nDescription\nConverts a JSON number to a SQL INT64 value.\nArguments:\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#int64_for_json)",
	"is_inf":                                 "```sql\nIS_INF(X)\n\n```\nDescription\nReturns TRUE if the value is positive or negative infinity.\nDescription\nReturns TRUE if the value is a NaN value.\nDescription\nReturns the least value among X1,...,XN. If any argument is NULL, returns\nNULL. Otherwise, in the case of floating-point arguments, if any argument is\nNaN, returns NaN. In all other cases, returns the value among X1,...,XN\nthat has the least value according to the ordering used by the ORDER BY\nclause. The arguments X1, ..., XN must be coercible to a common supertype, and\nthe supertype must support ordering.\nThis function supports specifying collation.\nReturn Data Types\nData type of the input values.\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#is_inf)",
	"is_nan":                                 "```sql\nIS_NAN(X)\n\n```\nDescription\nReturns TRUE if the value is a NaN value.\nDescription\nReturns the least value among X1,...,XN. If any argument is NULL, returns\nNULL. Otherwise, in the case of floating-point arguments, if any argument is\nNaN, returns NaN. In all other cases, returns the value among X1,...,XN\nthat has the least value according to the ordering used by the ORDER BY\nclause. The arguments X1, ..., XN must be coercible to a common supertype, and\nthe supertype must support ordering.\nThis function supports specifying collation.\nReturn Data Types\nData type of the input values.\nDescription\nComputes the natural logarithm of X. Generates an error if X is less than or\nequal to zero.\nReturn Data Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#is_nan)",
	"json_array":                             "```sql\nJSON_ARRAY([value][, ...])\n\n```\nDescription\nCreates a JSON array from zero or more SQL values.\nArguments:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_array)",
	"json_array_append":                      "```sql\nJSON_ARRAY_APPEND(\n  json_expr,\n  json_path_value_pair[, ...]\n  [, append_each_element => { TRUE | FALSE } ]\n)\n\njson_path_value_pair:\n  json_path, value\n\n```\nAppends JSON data to the end of a JSON array.\nArguments:\nDetails:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_array_append)",
	"json_array_insert":                      "```sql\nJSON_ARRAY_INSERT(\n  json_expr,\n  json_path_value_pair[, ...]\n  [, insert_each_element => { TRUE | FALSE } ]\n)\n\njson_path_value_pair:\n  json_path, value\n\n```\nProduces a new JSON value that\"s created by inserting JSON data into\na JSON array.\nArguments:\nDetails:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_array_insert)",
	"json_extract":                           "```sql\nJSON_EXTRACT(json_string_expr, json_path)\n\n```\nDescription\nExtracts a JSON value and converts it to a\nSQL JSON-formatted STRING or JSON value.\nThis function uses single quotes and brackets to escape invalid\nJSONPath characters in JSON keys. For example: [\"a.b\"].\nArguments:\nThere are differences between the JSON-formatted string and JSON input types.\nFor details, see Differences between the JSON and JSON-formatted STRING types.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract)",
	"json_extract_array":                     "```sql\nJSON_EXTRACT_ARRAY(json_string_expr[, json_path])\n\n```\nDescription\nExtracts a JSON array and converts it to\na SQL ARRAY<JSON-formatted STRING> or\nARRAY<JSON> value.\nThis function uses single quotes and brackets to escape invalid\nJSONPath characters in JSON keys. For example: [\"a.b\"].\nArguments:\nThere are differences between the JSON-formatted string and JSON input types.\nFor details, see Differences between the JSON and JSON-formatted STRING types.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract_array)",
	"json_extract_scalar":                    "```sql\nJSON_EXTRACT_SCALAR(json_string_expr[, json_path])\n\n```\nDescription\nExtracts a JSON scalar value and converts it to a SQL STRING value.\nIn addition, this function:\nArguments:\nThere are differences between the JSON-formatted string and JSON input types.\nFor details, see Differences between the JSON and JSON-formatted STRING types.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract_scalar)",
	"json_extract_string_array":              "```sql\nJSON_EXTRACT_STRING_ARRAY(json_string_expr[, json_path])\n\n```\nDescription\nExtracts a JSON array of scalar values and converts it to a SQL ARRAY<STRING>\nvalue. In addition, this function:\nArguments:\nThere are differences between the JSON-formatted string and JSON input types.\nFor details, see Differences between the JSON and JSON-formatted STRING types.\nCaveats:\nReturn type\nARRAY<STRING>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract_string_array)",
	"json_keys":                              "```sql\nJSON_KEYS(\n  json_expr\n  [, max_depth ]\n  [, mode => { \"strict\" | \"lax\" | \"lax recursive\" } ]\n)\n\n```\nDescription\nExtracts unique JSON keys from a JSON expression.\nArguments:\nDetails:\nReturn type\nARRAY<STRING>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_keys)",
	"json_object":                            "```sql\nJSON_OBJECT([json_key, json_value][, ...])\n\n```\nDescription\nCreates a JSON object, using key-value pairs.\nArguments:\nDetails:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_object)",
	"json_query":                             "```sql\nJSON_QUERY(json_string_expr, json_path)\n\n```\nDescription\nExtracts a JSON value and converts it to a SQL\nJSON-formatted STRING or\nJSON value.\nThis function uses double quotes to escape invalid\nJSONPath characters in JSON keys. For example: \"a.b\".\nArguments:\nThere are differences between the JSON-formatted string and JSON input types.\nFor details, see Differences between the JSON and JSON-formatted STRING types.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_query)",
	"json_query_array":                       "```sql\nJSON_QUERY_ARRAY(json_string_expr[, json_path])\n\n```\nDescription\nExtracts a JSON array and converts it to\na SQL ARRAY<JSON-formatted STRING> or\nARRAY<JSON> value.\nIn addition, this function uses double quotes to escape invalid\nJSONPath characters in JSON keys. For example: \"a.b\".\nArguments:\nThere are differences between the JSON-formatted string and JSON input types.\nFor details, see Differences between the JSON and JSON-formatted STRING types.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_query_array)",
	"json_remove":                            "```sql\nJSON_REMOVE(json_expr, json_path[, ...])\n\n```\nProduces a new SQL JSON value with the specified JSON data removed.\nArguments:\nDetails:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_remove)",
	"json_set":                               "```sql\nJSON_SET(\n  json_expr,\n  json_path_value_pair[, ...]\n  [, create_if_missing => { TRUE | FALSE } ]\n)\n\njson_path_value_pair:\n  json_path, value\n\n```\nProduces a new SQL JSON value with the specified JSON data inserted\nor replaced.\nArguments:\nDetails:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_set)",
	"json_strip_nulls":                       "```sql\nJSON_STRIP_NULLS(\n  json_expr\n  [, json_path ]\n  [, include_arrays => { TRUE | FALSE } ]\n  [, remove_empty => { TRUE | FALSE } ]\n)\n\n```\nRecursively removes JSON nulls from JSON objects and JSON arrays.\nArguments:\nDetails:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_strip_nulls)",
	"json_type":                              "```sql\nJSON_TYPE(json_expr)\n\n```\nDescription\nGets the JSON type of the outermost JSON value and converts the name of\nthis type to a SQL STRING value. The names of these JSON types can be\nreturned: object, array, string, number, boolean, null\nArguments:\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_type)",
	"json_value":                             "```sql\nJSON_VALUE(json_string_expr[, json_path])\n\n```\nDescription\nExtracts a JSON scalar value and converts it to a SQL STRING value.\nIn addition, this function:\nArguments:\nThere are differences between the JSON-formatted string and JSON input types.\nFor details, see Differences between the JSON and JSON-formatted STRING types.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_value)",
	"json_value_array":                       "```sql\nJSON_VALUE_ARRAY(json_string_expr[, json_path])\n\n```\nDescription\nExtracts a JSON array of scalar values and converts it to a SQL\nARRAY<STRING> value.\nIn addition, this function:\nArguments:\nThere are differences between the JSON-formatted string and JSON input types.\nFor details, see Differences between the JSON and JSON-formatted STRING types.\nCaveats:\nReturn type\nARRAY<STRING>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_value_array)",
	"justify_days":                           "```sql\nJUSTIFY_DAYS(interval_expression)\n\n```\nDescription\nNormalizes the day part of the interval to the range from -29 to 29 by\nincrementing/decrementing the month or year part of the interval.\nReturn Data Type\nINTERVAL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#justify_days)",
	"justify_hours":                          "```sql\nJUSTIFY_HOURS(interval_expression)\n\n```\nDescription\nNormalizes the time part of the interval to the range from -23:59:59.999999 to\n23:59:59.999999 by incrementing/decrementing the day part of the interval.\nReturn Data Type\nINTERVAL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#justify_hours)",
	"justify_interval":                       "```sql\nJUSTIFY_INTERVAL(interval_expression)\n\n```\nDescription\nNormalizes the days and time parts of the interval.\nReturn Data Type\nINTERVAL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#justify_interval)",
	"keys.add_key_from_raw_bytes":            "```sql\nKEYS.ADD_KEY_FROM_RAW_BYTES(keyset, key_type, raw_key_bytes)\n\n```\nDescription\nReturns a serialized keyset as BYTES with the\naddition of a key to keyset based on key_type and raw_key_bytes.\nThe primary cryptographic key remains the same as in keyset. The expected\nlength of raw_key_bytes depends on the value of key_type. The following are\nsupported key_types:\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keysadd_key_from_raw_bytes)",
	"keys.keyset_chain":                      "```sql\nKEYS.KEYSET_CHAIN(kms_resource_name, first_level_keyset)\n\n```\nDescription\nCan be used in place of the keyset argument to the AEAD\nand deterministic\nencryption functions to pass a Tink keyset that\"s encrypted\nwith a Cloud KMS key. This function lets you use\nother AEAD functions without including plaintext keys in a query.\nThis function takes the following arguments:\nReturn Data Type\nSTRUCT\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keyskeyset_chain)",
	"keys.keyset_from_json":                  "```sql\nKEYS.KEYSET_FROM_JSON(json_keyset)\n\n```\nDescription\nReturns the input json_keyset STRING as\nserialized BYTES, which is a valid input for other\nKEYS and AEAD functions. The JSON STRING must\nbe compatible with the definition of the\ngoogle.crypto.tink.Keyset\nprotocol buffer message: the JSON keyset should be a JSON object containing\nobjects and name-value pairs corresponding to those in the \"keyset\" message in\nthe google.crypto.tink.Keyset definition. You can convert the output serialized\nBYTES representation back to a JSON\nSTRING using KEYS.KEYSET_TO_JSON.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keyskeyset_from_json)",
	"keys.keyset_length":                     "```sql\nKEYS.KEYSET_LENGTH(keyset)\n\n```\nDescription\nReturns the number of keys in the provided keyset.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keyskeyset_length)",
	"keys.keyset_to_json":                    "```sql\nKEYS.KEYSET_TO_JSON(keyset)\n\n```\nDescription\nReturns a JSON STRING representation of the input\nkeyset. The returned JSON STRING is compatible\nwith the definition of the\ngoogle.crypto.tink.Keyset\nprotocol buffer message. You can convert the JSON\nSTRING representation back to\nBYTES using KEYS.KEYSET_FROM_JSON.\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keyskeyset_to_json)",
	"keys.new_keyset":                        "```sql\nKEYS.NEW_KEYSET(key_type)\n\n```\nDescription\nReturns a serialized keyset containing a new key based on key_type. The\nreturned keyset is a serialized BYTES\nrepresentation of\ngoogle.crypto.tink.Keyset\nthat contains a primary cryptographic key and no additional keys. You can use\nthe keyset with the AEAD.ENCRYPT, AEAD.DECRYPT_BYTES, and\nAEAD.DECRYPT_STRING functions for encryption and decryption, as well as with\nthe KEYS group of key- and keyset-related functions.\nkey_type is a STRING literal representation of the type of key to create.\nkey_type can\"t be NULL. key_type can be:\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keysnew_keyset)",
	"keys.new_wrapped_keyset":                "```sql\nKEYS.NEW_WRAPPED_KEYSET(kms_resource_name, key_type)\n\n```\nDescription\nCreates a new keyset and encrypts it with a\nCloud KMS key.\nReturns the wrapped keyset as a BYTES\nrepresentation of google.crypto.tink.Keyset\nthat contains a primary cryptographic key and no additional keys.\nThis function takes the following arguments:\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keysnew_wrapped_keyset)",
	"keys.rewrap_keyset":                     "```sql\nKEYS.REWRAP_KEYSET(source_kms_resource_name, target_kms_resource_name, wrapped_keyset)\n\n```\nDescription\nRe-encrypts a wrapped keyset with a new\nCloud KMS key. Returns the wrapped keyset as a\nBYTES representation of google.crypto.tink.Keyset\nthat contains a primary cryptographic key and no additional keys.\nWhen this function is used, a wrapped keyset is decrypted by\nsource_kms_resource_name and then re-encrypted by target_kms_resource_name.\nDuring this process, the decrypted keyset is never visible to customers.\nThis function takes the following arguments:\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keysrewrap_keyset)",
	"keys.rotate_keyset":                     "```sql\nKEYS.ROTATE_KEYSET(keyset, key_type)\n\n```\nDescription\nAdds a new key to keyset based on key_type. This new key becomes the primary\ncryptographic key of the new keyset. Returns the new keyset serialized as\nBYTES.\nThe old primary cryptographic key from the input keyset remains an additional\nkey in the returned keyset.\nThe new key_type must match the key type of existing keys in the keyset.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keysrotate_keyset)",
	"keys.rotate_wrapped_keyset":             "```sql\nKEYS.ROTATE_WRAPPED_KEYSET(kms_resource_name, wrapped_keyset, key_type)\n\n```\nDescription\nTakes an existing wrapped keyset and returns a rotated and\nrewrapped keyset. The returned wrapped keyset is a BYTES\nrepresentation of google.crypto.tink.Keyset.\nWhen this function is used, the wrapped keyset is decrypted,\nthe new key is added, and then the keyset is re-encrypted. The primary\ncryptographic key from the input wrapped_keyset remains as an\nadditional key in the returned keyset. During this rotation process,\nthe decrypted keyset is never visible to customers.\nThis function takes the following arguments:\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions#keysrotate_wrapped_keyset)",
	"kll_quantiles.extract_int64":            "```sql\nKLL_QUANTILES.EXTRACT_INT64(sketch, num_quantiles)\n\n```\nDescription\nGets a selected number of approximate quantiles from an\nINT64-initialized KLL sketch, including the minimum value and the\nmaximum value in the input set.\nSupported Argument Types\nDetails\nThe number of returned values produced is always num_quantiles + 1 as\nan array in this order:\nFor example, if num_quantiles is 3, and the result of this function\nis [0, 34, 67, 100], this means that 0 is the minimum value,\n34 and 67 are the approximate quantiles, and 100 is the maximum value.\nIn addition, the result represents the following three segments:\n0 to 34, 34 to 67, and 67 to 100.\nReturn Type\nARRAY<INT64>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesextract_int64)",
	"kll_quantiles.extract_float64":          "```sql\nKLL_QUANTILES.EXTRACT_FLOAT64(sketch, num_quantiles)\n\n```\nDescription\nLike KLL_QUANTILES.EXTRACT_INT64,\nbut accepts KLL sketches initialized on data of type\nFLOAT64.\nReturn Type\nARRAY<FLOAT64>\nDescription\nTakes a single KLL sketch as BYTES and returns a single quantile.\nThe phi argument specifies the quantile to return as a fraction of the total\nnumber of rows in the input, normalized between 0 and 1. This means that the\nfunction will return a value v such that approximately Φ * n inputs are less\nthan or equal to v, and a (1-Φ) * n inputs are greater than or equal to v.\nThis is a scalar function.\nReturns an error if the underlying type of the input sketch isn\"t compatible\nwith type INT64.\nReturns an error if the input isn\"t a valid KLL quantiles sketch.\nSupported Argument Types\nReturn Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesextract_double)",
	"kll_quantiles.extract_point_int64":      "```sql\nKLL_QUANTILES.EXTRACT_POINT_INT64(sketch, phi)\n\n```\nDescription\nTakes a single KLL sketch as BYTES and returns a single quantile.\nThe phi argument specifies the quantile to return as a fraction of the total\nnumber of rows in the input, normalized between 0 and 1. This means that the\nfunction will return a value v such that approximately Φ * n inputs are less\nthan or equal to v, and a (1-Φ) * n inputs are greater than or equal to v.\nThis is a scalar function.\nReturns an error if the underlying type of the input sketch isn\"t compatible\nwith type INT64.\nReturns an error if the input isn\"t a valid KLL quantiles sketch.\nSupported Argument Types\nReturn Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesextract_point_int64)",
	"kll_quantiles.extract_point_float64":    "```sql\nKLL_QUANTILES.EXTRACT_POINT_FLOAT64(sketch, phi)\n\n```\nDescription\nLike KLL_QUANTILES.EXTRACT_POINT_INT64,\nbut accepts KLL sketches initialized on data of type\nFLOAT64.\nSupported Argument Types\nReturn Type\nFLOAT64\nDescription\nTakes one or more input values and aggregates them into a\nKLL sketch. This function represents the output sketch\nusing the BYTES data type. This is an\naggregate function.\nSupported Argument Types\nReturn Type\nKLL sketch as BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesextract_point_double)",
	"kll_quantiles.init_int64":               "```sql\nKLL_QUANTILES.INIT_INT64(\n  input\n  [, precision [, weight => input_weight ]]\n)\n\n```\nDescription\nTakes one or more input values and aggregates them into a\nKLL sketch. This function represents the output sketch\nusing the BYTES data type. This is an\naggregate function.\nSupported Argument Types\nReturn Type\nKLL sketch as BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesinit_int64)",
	"kll_quantiles.init_float64":             "```sql\nKLL_QUANTILES.INIT_FLOAT64(input[, precision[, weight => input_weight]])\n\n```\nDescription\nLike KLL_QUANTILES.INIT_INT64,\nbut accepts input of type FLOAT64.\nKLL_QUANTILES.INIT_FLOAT64 orders values according to the GoogleSQL\nfloating point sort order. For example, NaN orders before\n&#8209;inf.\nSupported Argument Types\nReturn Type\nKLL sketch as BYTES\nDescription\nTakes KLL sketches as BYTES and merges them into\na new sketch, then returns the quantiles that divide the input into\nnum_quantiles equal-sized groups, along with the minimum and maximum values of the\ninput. The output is an ARRAY containing the exact minimum value from\nthe input data that you used to initialize the sketches, each\napproximate quantile, and the exact maximum value from the initial input data.\nThis is an aggregate function.\nIf the merged sketches were initialized with different precisions, the precision\nis downgraded to the lowest precision involved in the merge — except if the\naggregations are small enough to still capture the input exactly — then the\nmergee\"s precision is maintained.\nReturns an error if the underlying type of one or more input sketches isn\"t\ncompatible with type INT64.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesinit_double)",
	"kll_quantiles.merge_int64":              "```sql\nKLL_QUANTILES.MERGE_INT64(sketch, num_quantiles)\n\n```\nDescription\nTakes KLL sketches as BYTES and merges them into\na new sketch, then returns the quantiles that divide the input into\nnum_quantiles equal-sized groups, along with the minimum and maximum values of the\ninput. The output is an ARRAY containing the exact minimum value from\nthe input data that you used to initialize the sketches, each\napproximate quantile, and the exact maximum value from the initial input data.\nThis is an aggregate function.\nIf the merged sketches were initialized with different precisions, the precision\nis downgraded to the lowest precision involved in the merge — except if the\naggregations are small enough to still capture the input exactly — then the\nmergee\"s precision is maintained.\nReturns an error if the underlying type of one or more input sketches isn\"t\ncompatible with type INT64.\nReturns an error if the input isn\"t a valid KLL quantiles sketch.\nSupported Argument Types\nReturn Type\nARRAY<INT64>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesmerge_int64)",
	"kll_quantiles.merge_float64":            "```sql\nKLL_QUANTILES.MERGE_FLOAT64(sketch, num_quantiles)\n\n```\nDescription\nLike KLL_QUANTILES.MERGE_INT64,\nbut accepts KLL sketches initialized on data of type\nFLOAT64.\nKLL_QUANTILES.MERGE_FLOAT64 orders values according to the GoogleSQL\nfloating point sort order. For example, NaN orders before\n&#8209;inf.\nSupported Argument Types\nReturn Type\nARRAY<FLOAT64>\nDescription\nTakes KLL sketches of the same underlying type and merges them to return a new\nsketch of the same underlying type. This is an aggregate function.\nIf the merged sketches were initialized with different precisions, the precision\nis downgraded to the lowest precision involved in the merge — except if the\naggregations are small enough to still capture the input exactly — then the\nmergee\"s precision is maintained.\nReturns an error if two or more sketches don\"t have compatible underlying types,\nsuch as one sketch of INT64 values and another of\nFLOAT64 values.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesmerge_double)",
	"kll_quantiles.merge_partial":            "```sql\nKLL_QUANTILES.MERGE_PARTIAL(sketch)\n\n```\nDescription\nTakes KLL sketches of the same underlying type and merges them to return a new\nsketch of the same underlying type. This is an aggregate function.\nIf the merged sketches were initialized with different precisions, the precision\nis downgraded to the lowest precision involved in the merge — except if the\naggregations are small enough to still capture the input exactly — then the\nmergee\"s precision is maintained.\nReturns an error if two or more sketches don\"t have compatible underlying types,\nsuch as one sketch of INT64 values and another of\nFLOAT64 values.\nReturns an error if one or more inputs aren\"t a valid KLL quantiles sketch.\nIgnores NULL sketches. If the input contains zero rows or only NULL\nsketches, the function returns NULL.\nSupported Argument Types\nReturn Type\nKLL sketch as BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesmerge_partial)",
	"kll_quantiles.merge_point_int64":        "```sql\nKLL_QUANTILES.MERGE_POINT_INT64(sketch, phi)\n\n```\nDescription\nTakes KLL sketches as BYTES and merges them, then extracts a single\nquantile from the merged sketch. The phi argument specifies the quantile\nto return as a fraction of the total number of rows in the input, normalized\nbetween 0 and 1. This means that the function will return a value v such that\napproximately Φ * n inputs are less than or equal to v, and a (1-Φ) * n\ninputs are greater than or equal to v. This is an aggregate function.\nIf the merged sketches were initialized with different precisions, the precision\nis downgraded to the lowest precision involved in the merge — except if the\naggregations are small enough to still capture the input exactly — then the\nmergee\"s precision is maintained.\nReturns an error if the underlying type of one or more input sketches isn\"t\ncompatible with type INT64.\nReturns an error if the input isn\"t a valid KLL quantiles sketch.\nSupported Argument Types\nReturn Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesmerge_point_int64)",
	"kll_quantiles.merge_point_float64":      "```sql\nKLL_QUANTILES.MERGE_POINT_FLOAT64(sketch, phi)\n\n```\nDescription\nLike KLL_QUANTILES.MERGE_POINT_INT64,\nbut accepts KLL sketches initialized on data of type\nFLOAT64.\nKLL_QUANTILES.MERGE_POINT_FLOAT64 orders values according to the\nGoogleSQL floating point sort order. For example, NaN\norders before &#8209;inf.\nSupported Argument Types\nReturn Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/kll_functions#kll_quantilesmerge_point_double)",
	"lag":                                    "```sql\nLAG (value_expression[, offset [, default_expression]])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n\n\n```\nDescription\nReturns the value of the value_expression on a preceding row. Changing the\noffset value changes which preceding row is returned; the default value is\n1, indicating the previous row in the window frame. An error occurs if\noffset is NULL or a negative value.\nThe optional default_expression is used if there isn\"t a row in the window\nframe at the specified offset. This expression must be a constant expression and\nits type must be implicitly coercible to the type of value_expression. If left\nunspecified, default_expression defaults to NULL.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSupported Argument Types\nReturn Data Type\nSame type as value_expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#lag)",
	"last_day":                               "```sql\nLAST_DAY(datetime_expression[, date_part])\n\n```\nDescription\nReturns the last day from a datetime expression that contains the date.\nThis is commonly used to return the last day of the month.\nYou can optionally specify the date part for which the last day is returned.\nIf this parameter isn\"t used, the default value is MONTH.\nLAST_DAY supports the following values for date_part:\nReturn Data Type\nDATE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#last_day)",
	"last_value":                             "```sql\nLAST_VALUE (value_expression [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the value of the value_expression for the last row in the current\nwindow frame.\nThis function includes NULL values in the calculation unless IGNORE NULLS is\npresent. If IGNORE NULLS is present, the function excludes NULL values from\nthe calculation.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSupported Argument Types\nvalue_expression can be any data type that an expression can return.\nReturn Data Type\nSame type as value_expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#last_value)",
	"lax_bool":                               "```sql\nLAX_BOOL(json_expr)\n\n```\nDescription\nAttempts to convert a JSON value to a SQL BOOL value.\nArguments:\nDetails:\nConversion rules\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_bool)",
	"lax_float64":                            "```sql\nLAX_FLOAT64(json_expr)\n\n```\nDescription\nAttempts to convert a JSON value to a\nSQL FLOAT64 value.\nArguments:\nDetails:\nConversion rules\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_double)",
	"lax_int64":                              "```sql\nLAX_INT64(json_expr)\n\n```\nDescription\nAttempts to convert a JSON value to a SQL INT64 value.\nArguments:\nDetails:\nConversion rules\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_int64)",
	"lax_string":                             "```sql\nLAX_STRING(json_expr)\n\n```\nDescription\nAttempts to convert a JSON value to a SQL STRING value.\nArguments:\nDetails:\nConversion rules\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_string)",
	"lead":                                   "```sql\nLEAD (value_expression[, offset [, default_expression]])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n\n\n```\nDescription\nReturns the value of the value_expression on a subsequent row. Changing the\noffset value changes which subsequent row is returned; the default value is\n1, indicating the next row in the window frame. An error occurs if offset is\nNULL or a negative value.\nThe optional default_expression is used if there isn\"t a row in the window\nframe at the specified offset. This expression must be a constant expression and\nits type must be implicitly coercible to the type of value_expression. If left\nunspecified, default_expression defaults to NULL.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSupported Argument Types\nReturn Data Type\nSame type as value_expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#lead)",
	"least":                                  "```sql\nLEAST(X1,...,XN)\n\n```\nDescription\nReturns the least value among X1,...,XN. If any argument is NULL, returns\nNULL. Otherwise, in the case of floating-point arguments, if any argument is\nNaN, returns NaN. In all other cases, returns the value among X1,...,XN\nthat has the least value according to the ordering used by the ORDER BY\nclause. The arguments X1, ..., XN must be coercible to a common supertype, and\nthe supertype must support ordering.\nThis function supports specifying collation.\nReturn Data Types\nData type of the input values.\nDescription\nComputes the natural logarithm of X. Generates an error if X is less than or\nequal to zero.\nReturn Data Type\nDescription\nIf only X is present, LOG is a synonym of LN. If Y is also present,\nLOG computes the logarithm of X to base Y.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#least)",
	"left":                                   "```sql\nLEFT(value, length)\n\n```\nDescription\nReturns a STRING or BYTES value that consists of the specified\nnumber of leftmost characters or bytes from value. The length is an\nINT64 that specifies the length of the returned\nvalue. If value is of type BYTES, length is the number of leftmost bytes\nto return. If value is STRING, length is the number of leftmost characters\nto return.\nIf length is 0, an empty STRING or BYTES value will be\nreturned. If length is negative, an error will be returned. If length\nexceeds the number of characters or bytes from value, the original value\nwill be returned.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#left)",
	"length":                                 "```sql\nLENGTH(value)\n\n```\nDescription\nReturns the length of the STRING or BYTES value. The returned\nvalue is in characters for STRING arguments and in bytes for the BYTES\nargument.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#length)",
	"ln":                                     "```sql\nLN(X)\n\n```\nDescription\nComputes the natural logarithm of X. Generates an error if X is less than or\nequal to zero.\nReturn Data Type\nDescription\nIf only X is present, LOG is a synonym of LN. If Y is also present,\nLOG computes the logarithm of X to base Y.\nReturn Data Type\nDescription\nSimilar to LOG, but computes logarithm to base 10.\nReturn Data Type\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ln)",
	"log":                                    "```sql\nLOG(X [, Y])\n\n```\nDescription\nIf only X is present, LOG is a synonym of LN. If Y is also present,\nLOG computes the logarithm of X to base Y.\nReturn Data Type\nDescription\nSimilar to LOG, but computes logarithm to base 10.\nReturn Data Type\nDescription\nModulo function: returns the remainder of the division of X by Y. Returned\nvalue has the same sign as X. An error is generated if Y is 0.\nReturn Data Type\nThe return data type is determined by the argument types with the following\ntable.\n\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#log)",
	"log10":                                  "```sql\nLOG10(X)\n\n```\nDescription\nSimilar to LOG, but computes logarithm to base 10.\nReturn Data Type\nDescription\nModulo function: returns the remainder of the division of X by Y. Returned\nvalue has the same sign as X. An error is generated if Y is 0.\nReturn Data Type\nThe return data type is determined by the argument types with the following\ntable.\n\n\n\nINPUTINT64NUMERICBIGNUMERIC\n\n\n\nINT64INT64NUMERICBIGNUMERIC\nNUMERICNUMERICNUMERICBIGNUMERIC\nBIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERIC\n\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#log10)",
	"logical_and":                            "```sql\nLOGICAL_AND(\n  expression\n)\n\n```\nDescription\nReturns the logical AND of all non-NULL expressions. Returns NULL if there\nare zero input rows or expression evaluates to NULL for all rows.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nSupported Argument Types\nBOOL\nReturn Data Types\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#logical_and)",
	"logical_or":                             "```sql\nLOGICAL_OR(\n  expression\n)\n\n```\nDescription\nReturns the logical OR of all non-NULL expressions. Returns NULL if there\nare zero input rows or expression evaluates to NULL for all rows.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nSupported Argument Types\nBOOL\nReturn Data Types\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#logical_or)",
	"lower":                                  "```sql\nLOWER(value)\n\n```\nDescription\nFor STRING arguments, returns the original string with all alphabetic\ncharacters in lowercase. Mapping between lowercase and uppercase is done\naccording to the\nUnicode Character Database\nwithout taking into account language-specific mappings.\nFor BYTES arguments, the argument is treated as ASCII text, with all bytes\ngreater than 127 left intact.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#lower)",
	"lpad":                                   "```sql\nLPAD(original_value, return_length[, pattern])\n\n```\nDescription\nReturns a STRING or BYTES value that consists of original_value prepended\nwith pattern. The return_length is an INT64 that\nspecifies the length of the returned value. If original_value is of type\nBYTES, return_length is the number of bytes. If original_value is\nof type STRING, return_length is the number of characters.\nThe default value of pattern is a blank space.\nBoth original_value and pattern must be the same data type.\nIf return_length is less than or equal to the original_value length, this\nfunction returns the original_value value, truncated to the value of\nreturn_length. For example, LPAD(\"hello world\", 7); returns \"hello w\".\nIf original_value, return_length, or pattern is NULL, this function\nreturns NULL.\nThis function returns an error if:\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#lpad)",
	"ltrim":                                  "```sql\nLTRIM(value1[, value2])\n\n```\nDescription\nIdentical to TRIM, but only removes leading characters.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#ltrim)",
	"make_interval":                          "```sql\nMAKE_INTERVAL(\n  [ [ year => ] value ]\n  [, [ month => ] value ]\n  [, [ day => ] value ]\n  [, [ hour => ] value ]\n  [, [ minute => ] value ]\n  [, [ second => ] value ]\n)\n\n```\nDescription\nConstructs an INTERVAL object using INT64 values\nrepresenting the year, month, day, hour, minute, and second. All arguments are\noptional, 0 by default, and can be named arguments.\nReturn Data Type\nINTERVAL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#make_interval)",
	"max":                                    "```sql\nMAX(\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the maximum non-NULL value in an aggregated group.\nCaveats:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nThis function supports specifying collation.\nSupported Argument Types\nAny orderable data type except for ARRAY.\nReturn Data Types\nThe data type of the input values.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#max)",
	"max_by":                                 "```sql\nMAX_BY(\n  x, y\n)\n\n```\nDescription\nSynonym for ANY_VALUE(x HAVING MAX y).\nReturn Data Types\nMatches the input x data type.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#max_by)",
	"md5":                                    "```sql\nMD5(input)\n\n```\nDescription\nComputes the hash of the input using the\nMD5 algorithm. The input can either be\nSTRING or BYTES. The string version treats the input as an array of bytes.\nThis function returns 16 bytes.\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions#md5)",
	"min":                                    "```sql\nMIN(\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the minimum non-NULL value in an aggregated group.\nCaveats:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nThis function supports specifying collation.\nSupported Argument Types\nAny orderable data type except for ARRAY.\nReturn Data Types\nThe data type of the input values.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#min)",
	"min_by":                                 "```sql\nMIN_BY(\n  x, y\n)\n\n```\nDescription\nSynonym for ANY_VALUE(x HAVING MIN y).\nReturn Data Types\nMatches the input x data type.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#min_by)",
	"mod":                                    "```sql\nMOD(X, Y)\n\n```\nDescription\nModulo function: returns the remainder of the division of X by Y. Returned\nvalue has the same sign as X. An error is generated if Y is 0.\nReturn Data Type\nThe return data type is determined by the argument types with the following\ntable.\n\n\n\nINPUTINT64NUMERICBIGNUMERIC\n\n\n\nINT64INT64NUMERICBIGNUMERIC\nNUMERICNUMERICNUMERICBIGNUMERIC\nBIGNUMERICBIGNUMERICBIGNUMERICBIGNUMERIC\n\n\nDescription\nReturns the value of X raised to the power of Y. If the result underflows and\nisn\"t representable, then the function returns a value of zero.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#mod)",
	"net.host":                               "```sql\nNET.HOST(url)\n\n```\nDescription\nTakes a URL as a STRING value and returns the host. For best results, URL\nvalues should comply with the format as defined by\nRFC 3986. If the URL value doesn\"t comply\nwith RFC 3986 formatting, this function makes a best effort to parse the input\nand return a relevant result. If the function can\"t parse the input, it\nreturns NULL.\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#nethost)",
	"net.ip_from_string":                     "```sql\nNET.IP_FROM_STRING(addr_str)\n\n```\nDescription\nConverts an IPv4 or IPv6 address from text (STRING) format to binary (BYTES)\nformat in network byte order.\nThis function supports the following formats for addr_str:\nThis function doesn\"t support CIDR notation, such as 10.1.2.3/32.\nIf this function receives a NULL input, it returns NULL. If the input is\nconsidered invalid, an OUT_OF_RANGE error occurs.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netip_from_string)",
	"net.ip_net_mask":                        "```sql\nNET.IP_NET_MASK(num_output_bytes, prefix_length)\n\n```\nDescription\nReturns a network mask: a byte sequence with length equal to num_output_bytes,\nwhere the first prefix_length bits are set to 1 and the other bits are set to\n0. num_output_bytes and prefix_length are INT64.\nThis function throws an error if num_output_bytes isn\"t 4 (for IPv4) or 16\n(for IPv6). It also throws an error if prefix_length is negative or greater\nthan 8 * num_output_bytes.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netip_net_mask)",
	"net.ip_to_string":                       "```sql\nNET.IP_TO_STRING(addr_bin)\n\n```\nDescription\nConverts an IPv4 or IPv6 address from binary (BYTES) format in network byte\norder to text (STRING) format.\nIf the input is 4 bytes, this function returns an IPv4 address as a STRING. If\nthe input is 16 bytes, it returns an IPv6 address as a STRING.\nIf this function receives a NULL input, it returns NULL. If the input has\na length different from 4 or 16, an OUT_OF_RANGE error occurs.\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netip_to_string)",
	"net.ip_trunc":                           "```sql\nNET.IP_TRUNC(addr_bin, prefix_length)\n\n```\nDescription\nTakes addr_bin, an IPv4 or IPv6 address in binary (BYTES) format in network\nbyte order, and returns a subnet address in the same format. The result has the\nsame length as addr_bin, where the first prefix_length bits are equal to\nthose in addr_bin and the remaining bits are 0.\nThis function throws an error if LENGTH(addr_bin) isn\"t 4 or 16, or if\nprefix_len is negative or greater than LENGTH(addr_bin) * 8.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netip_trunc)",
	"net.ipv4_from_int64":                    "```sql\nNET.IPV4_FROM_INT64(integer_value)\n\n```\nDescription\nConverts an IPv4 address from integer format to binary (BYTES) format in network\nbyte order. In the integer input, the least significant bit of the IP address is\nstored in the least significant bit of the integer, regardless of host or client\narchitecture. For example, 1 means 0.0.0.1, and 0x1FF means 0.0.1.255.\nThis function checks that either all the most significant 32 bits are 0, or all\nthe most significant 33 bits are 1 (sign-extended from a 32-bit integer).\nIn other words, the input should be in the range [-0x80000000, 0xFFFFFFFF];\notherwise, this function throws an error.\nThis function doesn\"t support IPv6.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netipv4_from_int64)",
	"net.ipv4_to_int64":                      "```sql\nNET.IPV4_TO_INT64(addr_bin)\n\n```\nDescription\nConverts an IPv4 address from binary (BYTES) format in network byte order to\ninteger format. In the integer output, the least significant bit of the IP\naddress is stored in the least significant bit of the integer, regardless of\nhost or client architecture. For example, 1 means 0.0.0.1, and 0x1FF means\n0.0.1.255. The output is in the range [0, 0xFFFFFFFF].\nIf the input length isn\"t 4, this function throws an error.\nThis function doesn\"t support IPv6.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netipv4_to_int64)",
	"net.public_suffix":                      "```sql\nNET.PUBLIC_SUFFIX(url)\n\n```\nDescription\nTakes a URL as a STRING value and returns the public suffix (such as com,\norg, or net). A public suffix is an ICANN domain registered at\npublicsuffix.org. For best results, URL values\nshould comply with the format as defined by\nRFC 3986. If the URL value doesn\"t comply\nwith RFC 3986 formatting, this function makes a best effort to parse the input\nand return a relevant result.\nThis function returns NULL if any of the following is true:\nBefore looking up the public suffix, this function temporarily normalizes the\nhost by converting uppercase English letters to lowercase and encoding all\nnon-ASCII characters with Punycode.\nThe function then returns the public suffix as part of the original host instead\nof the normalized host.\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netpublic_suffix)",
	"net.reg_domain":                         "```sql\nNET.REG_DOMAIN(url)\n\n```\nDescription\nTakes a URL as a string and returns the registered or registrable domain (the\npublic suffix plus one preceding label), as a\nstring. For best results, URL values should comply with the format as defined by\nRFC 3986. If the URL value doesn\"t comply\nwith RFC 3986 formatting, this function makes a best effort to parse the input\nand return a relevant result.\nThis function returns NULL if any of the following is true:\nBefore looking up the public suffix, this function temporarily normalizes the\nhost by converting uppercase English letters to lowercase and encoding all\nnon-ASCII characters with Punycode. The function then\nreturns the registered or registerable domain as part of the original host\ninstead of the normalized host.\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netreg_domain)",
	"net.safe_ip_from_string":                "```sql\nNET.SAFE_IP_FROM_STRING(addr_str)\n\n```\nDescription\nSimilar to NET.IP_FROM_STRING, but returns NULL\ninstead of throwing an error if the input is invalid.\nReturn Data Type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions#netsafe_ip_from_string)",
	"normalize":                              "```sql\nNORMALIZE(value[, normalization_mode])\n\n```\nDescription\nTakes a string value and returns it as a normalized string. If you don\"t\nprovide a normalization mode, NFC is used.\nNormalization is used to ensure that\ntwo strings are equivalent. Normalization is often used in situations in which\ntwo strings render the same on the screen but have different Unicode code\npoints.\nNORMALIZE supports four optional normalization modes:\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#normalize)",
	"normalize_and_casefold":                 "```sql\nNORMALIZE_AND_CASEFOLD(value[, normalization_mode])\n\n```\nDescription\nTakes a string value and returns it as a normalized string. If you don\"t\nprovide a normalization mode, NFC is used.\nNormalization is used to ensure that\ntwo strings are equivalent. Normalization is often used in situations in which\ntwo strings render the same on the screen but have different Unicode code\npoints.\nCase folding is used for the caseless\ncomparison of strings. If you need to compare strings and case shouldn\"t be\nconsidered, use NORMALIZE_AND_CASEFOLD, otherwise use\nNORMALIZE.\nNORMALIZE_AND_CASEFOLD supports four optional normalization modes:\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#normalize_and_casefold)",
	"nth_value":                              "```sql\nNTH_VALUE (value_expression, constant_integer_expression [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the value of value_expression at the Nth row of the current window\nframe, where Nth is defined by constant_integer_expression. Returns NULL if\nthere is no such row.\nThis function includes NULL values in the calculation unless IGNORE NULLS is\npresent. If IGNORE NULLS is present, the function excludes NULL values from\nthe calculation.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSupported Argument Types\nReturn Data Type\nSame type as value_expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#nth_value)",
	"ntile":                                  "```sql\nNTILE(constant_integer_expression)\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n\n\n```\nDescription\nThis function divides the rows into constant_integer_expression\nbuckets based on row ordering and returns the 1-based bucket number that is\nassigned to each row. The number of rows in the buckets can differ by at most 1.\nThe remainder values (the remainder of number of rows divided by buckets) are\ndistributed one for each bucket, starting with bucket 1. If\nconstant_integer_expression evaluates to NULL, 0 or negative, an\nerror is provided.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#ntile)",
	"obj.fetch_metadata":                     "```sql\nOBJ.FETCH_METADATA(\n  objectref\n)\n\n```\nDescription\nThe OBJ.FETCH_METADATA function returns Cloud Storage metadata for a partially\npopulated\nObjectRef\nvalue.\nTo fetch object metadata, you must have the bigquery.objectRefs.read\npermission on the Cloud resource connection specified in the authorizer\nfield of the input ObjectRef value. You can get this permission from the\nBigQuery ObjectRef Reader (roles/bigquery.objectRefReader)\nor\nBigQuery ObjectRef Admin (roles/bigquery.objectRefAdmin)\nrole.\nThis function still succeeds if there is a problem fetching metadata. In this\ncase, the details field contains an error field with the\nerror message, as shown in the following example:\nDefinitions\nOutput\nA fully populated ObjectRef value. The metadata is provided in the details\nfield of the returned ObjectRef value.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/objectref_functions#objfetch_metadata)",
	"obj.get_access_url":                     "```sql\nOBJ.GET_ACCESS_URL(\n  objectref,\n  mode\n  [, duration]\n)\n\n```\nDescription\nThe OBJ.GET_ACCESS_URL function returns JSON that contains reference\ninformation for the input\nObjectRef\nvalue, and also\naccess URLs that you can use to read or modify the Cloud Storage object.\nTo create a URL to read the object, you must have the\nbigquery.objectRefs.read permission on the Cloud resource connection\nspecified in the authorizer field of the input ObjectRef value. You can get\nthis permission from the\nBigQuery ObjectRef Reader (roles/bigquery.objectRefReader)\nor\nBigQuery ObjectRef Admin (roles/bigquery.objectRefAdmin)\nrole.\nTo create a URL to modify the object, you must have the\nbigquery.objectRefs.write permission on the Cloud resource connection\nspecified in the authorizer field of the input ObjectRef value. You can get\nthis permission from the\nBigQuery ObjectRef Admin (roles/bigquery.objectRefAdmin) role.\nIf the function encounters an error, the returned JSON contains a\nruntime_errors field with the error message instead of the\naccess_urls field with the access URLs. This is shown in the following\nexample:\nDefinitions\nOutput\nA JSON value that contains the Cloud Storage object reference\ninformation from the input ObjectRef value, and also one or more URLs that\nyou can use to access the Cloud Storage object.\nThe JSON output is returned in the ObjectRefRuntime\nschema: \n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/objectref_functions#objget_access_url)",
	"obj.make_ref":                           "```sql\nOBJ.MAKE_REF(\n  uri,\n  authorizer\n)\n\n```\nDescription\nUse the OBJ.MAKE_REF function to create an\nObjectRef\nvalue that contains reference information for a Cloud Storage object.\nYou can use this function in workflows similar to the following:\nDefinitions\nNo validations are performed on the input values.\nOutput\nAn ObjectRef value. \nAn ObjectRef value represents a Cloud Storage object, including the object\nURI, size, type, and similar metadata. It also contains an authorizer, which\nidentifies the\nCloud resource connection\nto use to access the Cloud Storage object from BigQuery. An ObjectRef\nvalue is a struct in the following format:\nWhen you use the uri and authorizer arguments as input, the output\nObjectRef value contains a reference to a Cloud Storage object. When you use\nthe objectref_json argument as input, the output ObjectRef value contains a\nstruct that is equivalent to the input JSON value.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/objectref_functions#objmake_ref)",
	"octet_length":                           "```sql\nOCTET_LENGTH(value)\n\n```\nAlias for BYTE_LENGTH.\nDescription\nReturns TRUE if value is a partial match for the regular expression,\nregexp.\nIf the regexp argument is invalid, the function returns an error.\nYou can search for a full match by using ^ (beginning of text) and $ (end of\ntext). Due to regular expression operator precedence, it\"s good practice to use\nparentheses around everything between ^ and $.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#octet_length)",
	"parse_bignumeric":                       "```sql\nPARSE_BIGNUMERIC(string_expression)\n\n```\nDescription\nConverts a STRING to a BIGNUMERIC value.\nThe numeric literal contained in the string must not exceed the\nmaximum precision or range of the BIGNUMERIC type, or an\nerror occurs. If the number of digits after the decimal point exceeds 38, then\nthe resulting BIGNUMERIC value rounds\nhalf away from zero to have 38 digits after the\ndecimal point.\nThis function is similar to using the CAST AS BIGNUMERIC\nfunction except that the PARSE_BIGNUMERIC function only accepts string inputs\nand allows the following in the string:\nRules for valid input strings:\nReturn Data Type\nBIGNUMERIC\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#parse_bignumeric)",
	"parse_date":                             "```sql\nPARSE_DATE(format_string, date_string)\n\n```\nDescription\nConverts a STRING value to a DATE value.\nDefinitions\nDetails\nEach element in date_string must have a corresponding element in\nformat_string. The location of each element in format_string must match the\nlocation of each element in date_string.\nThe following additional considerations apply when using the PARSE_DATE\nfunction:\nReturn Data Type\nDATE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#parse_date)",
	"parse_datetime":                         "```sql\nPARSE_DATETIME(format_string, datetime_string)\n\n```\nDescription\nConverts a STRING value to a DATETIME value.\nDefinitions\nDetails\nEach element in datetime_string must have a corresponding element in\nformat_string. The location of each element in format_string must match the\nlocation of each element in datetime_string.\nThe format string fully supports most format elements, except for\n%P.\nThe following additional considerations apply when using the PARSE_DATETIME\nfunction:\nReturn Data Type\nDATETIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#parse_datetime)",
	"parse_json":                             "```sql\nPARSE_JSON(\n  json_string_expr\n  [, wide_number_mode => { \"exact\" | \"round\" } ]\n)\n\n```\nDescription\nConverts a JSON-formatted STRING value to a JSON value.\nArguments:\nNumbers from the following domains can be stored in JSON without loss of\nprecision:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#parse_json)",
	"parse_numeric":                          "```sql\nPARSE_NUMERIC(string_expression)\n\n```\nDescription\nConverts a STRING to a NUMERIC value.\nThe numeric literal contained in the string must not exceed the\nmaximum precision or range of the NUMERIC type, or an error\noccurs. If the number of digits after the decimal point exceeds nine, then the\nresulting NUMERIC value rounds\nhalf away from zero to have nine digits after the\ndecimal point.\nThis function is similar to using the CAST AS NUMERIC function\nexcept that the PARSE_NUMERIC function only accepts string inputs and allows\nthe following in the string:\nRules for valid input strings:\nReturn Data Type\nNUMERIC\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#parse_numeric)",
	"parse_time":                             "```sql\nPARSE_TIME(format_string, time_string)\n\n```\nDescription\nConverts a STRING value to a TIME value.\nDefinitions\nDetails\nEach element in time_string must have a corresponding element in\nformat_string. The location of each element in format_string must match the\nlocation of each element in time_string.\nThe format string fully supports most format elements except for %P.\nThe following additional considerations apply when using the PARSE_TIME\nfunction:\nReturn Data Type\nTIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#parse_time)",
	"parse_timestamp":                        "```sql\nPARSE_TIMESTAMP(format_string, timestamp_string[, time_zone])\n\n```\nDescription\nConverts a STRING value to a TIMESTAMP value.\nDefinitions\nDetails\nEach element in timestamp_string must have a corresponding element in\nformat_string. The location of each element in format_string must match the\nlocation of each element in timestamp_string.\nThe format string fully supports most format elements, except for\n%P.\nThe following additional considerations apply when using the PARSE_TIMESTAMP\nfunction:\nReturn Data Type\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#parse_timestamp)",
	"percent_rank":                           "```sql\nPERCENT_RANK()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n\n\n```\nDescription\nReturn the percentile rank of a row defined as (RK-1)/(NR-1), where RK is\nthe RANK of the row and NR is the number of rows in the partition.\nReturns 0 if NR=1.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#percent_rank)",
	"percentile_cont":                        "```sql\nPERCENTILE_CONT (value_expression, percentile [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n\n\n```\nDescription\nComputes the specified percentile value for the value_expression, with linear\ninterpolation.\nThis function ignores NULL\nvalues if\nRESPECT NULLS is absent. If RESPECT NULLS is present:\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nPERCENTILE_CONT can be used with differential privacy. To learn more, see\nDifferentially private aggregate functions.\nSupported Argument Types\nReturn Data Type\nThe return data type is determined by the argument types with the following\ntable.\n\n\n\nINPUTNUMERICBIGNUMERICFLOAT64\n\n\n\nNUMERICNUMERICBIGNUMERICFLOAT64\nBIGNUMERICBIGNUMERICBIGNUMERICFLOAT64\nFLOAT64FLOAT64FLOAT64FLOAT64\n\n\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#percentile_cont)",
	"percentile_cont (differential_privacy)": "```sql\nWITH DIFFERENTIAL_PRIVACY ...\n  PERCENTILE_CONT(\n    expression,\n    percentile,\n    contribution_bounds_per_row => (lower_bound, upper_bound)\n  )\n\n```\nDescription\nTakes an expression and computes a percentile for it. The final result is an\naggregation across privacy unit columns.\nThis function must be used with the DIFFERENTIAL_PRIVACY clause\nand can support these arguments:\nNUMERIC and BIGNUMERIC arguments aren\"t allowed.\n If you need them, cast them as the\nFLOAT64 data type first.\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-dp-functions#dp_percentile_cont)",
	"percentile_disc":                        "```sql\nPERCENTILE_DISC (value_expression, percentile [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n\n\n```\nDescription\nComputes the specified percentile value for a discrete value_expression. The\nreturned value is the first sorted value of value_expression with cumulative\ndistribution greater than or equal to the given percentile value.\nThis function ignores NULL\nvalues unless\nRESPECT NULLS is present.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSupported Argument Types\nReturn Data Type\nSame type as value_expression.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#percentile_disc)",
	"pow":                                    "```sql\nPOW(X, Y)\n\n```\nDescription\nReturns the value of X raised to the power of Y. If the result underflows and\nisn\"t representable, then the function returns a value of zero.\nReturn Data Type\nThe return data type is determined by the argument types with the following\ntable.\nDescription\nSynonym of POW(X, Y).\nDescription\nGenerates a pseudo-random value of type FLOAT64 in\nthe range of [0, 1), inclusive of 0 and exclusive of 1.\nDescription\nRANGE_BUCKET scans through a sorted array and returns the 0-based position\nof the point\"s upper bound. This can be useful if you need to group your data to\nbuild partitions, histograms, business-defined rules, and more.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#pow)",
	"power":                                  "```sql\nPOWER(X, Y)\n\n```\nDescription\nSynonym of POW(X, Y).\nDescription\nGenerates a pseudo-random value of type FLOAT64 in\nthe range of [0, 1), inclusive of 0 and exclusive of 1.\nDescription\nRANGE_BUCKET scans through a sorted array and returns the 0-based position\nof the point\"s upper bound. This can be useful if you need to group your data to\nbuild partitions, histograms, business-defined rules, and more.\nRANGE_BUCKET follows these rules:\nExecution failure occurs when:\nParameters\nReturn Value\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#power)",
	"rand":                                   "```sql\nRAND()\n\n```\nDescription\nGenerates a pseudo-random value of type FLOAT64 in\nthe range of [0, 1), inclusive of 0 and exclusive of 1.\nDescription\nRANGE_BUCKET scans through a sorted array and returns the 0-based position\nof the point\"s upper bound. This can be useful if you need to group your data to\nbuild partitions, histograms, business-defined rules, and more.\nRANGE_BUCKET follows these rules:\nExecution failure occurs when:\nParameters\nReturn Value\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#rand)",
	"range":                                  "```sql\nRANGE(lower_bound, upper_bound)\n\n```\nDescription\nConstructs a range of DATE, DATETIME, or\nTIMESTAMP values.\nDefinitions\nDetails\nlower_bound and upper_bound must be of the same data type.\nProduces an error if lower_bound is greater than or equal to upper_bound.\nTo return NULL instead, add the SAFE. prefix to the function name.\nReturn type\nRANGE<T>, where T is the same data type as the input.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/range-functions#range)",
	"range_bucket":                           "```sql\nRANGE_BUCKET(point, boundaries_array)\n\n```\nDescription\nRANGE_BUCKET scans through a sorted array and returns the 0-based position\nof the point\"s upper bound. This can be useful if you need to group your data to\nbuild partitions, histograms, business-defined rules, and more.\nRANGE_BUCKET follows these rules:\nExecution failure occurs when:\nParameters\nReturn Value\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#range_bucket)",
	"range_contains":                         "```sql\nRANGE_CONTAINS(outer_range, inner_range)\n\n```\nDescription\nChecks if the inner range is in the outer range.\nDefinitions\nDetails\nReturns TRUE if inner_range exists in outer_range.\nOtherwise, returns FALSE.\nT must be of the same type for all inputs.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/range-functions#range_contains)",
	"range_end":                              "```sql\nRANGE_END(range_to_check)\n\n```\nDescription\nGets the upper bound of a range.\nDefinitions\nDetails\nReturns NULL if the upper bound in range_value is UNBOUNDED.\nReturns NULL if range_to_check is NULL.\nReturn type\nT in range_value\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/range-functions#range_end)",
	"range_intersect":                        "```sql\nRANGE_INTERSECT(range_a, range_b)\n\n```\nDescription\nGets a segment of two ranges that intersect.\nDefinitions\nDetails\nReturns NULL if any input isNULL.\nProduces an error if range_a and range_b don\"t overlap. To return\nNULL instead, add the SAFE. prefix to the function name.\nT must be of the same type for all inputs.\nReturn type\nRANGE<T>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/range-functions#range_intersect)",
	"range_overlaps":                         "```sql\nRANGE_OVERLAPS(range_a, range_b)\n\n```\nDescription\nChecks if two ranges overlap.\nDefinitions\nDetails\nReturns TRUE if a part of range_a intersects with range_b, otherwise\nreturns FALSE.\nT must be of the same type for all inputs.\nTo get the part of the range that overlaps, use the\nRANGE_INTERSECT function.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/range-functions#range_overlaps)",
	"range_sessionize":                       "```sql\nRANGE_SESSIONIZE(\n  TABLE table_name,\n  range_column,\n  partitioning_columns\n)\n\n```\nDescription\nProduces a table of sessionized ranges.\nDefinitions\nDetails\nThis function produces a table that includes all columns in the\ninput table and an additional RANGE column called\nsession_range, which indicates the start and end of a session. The\nstart and end of each session is determined by the sessionize_option\nargument.\nReturn type\nTABLE\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/range-functions#range_sessionize)",
	"range_start":                            "```sql\nRANGE_START(range_to_check)\n\n```\nDescription\nGets the lower bound of a range.\nDefinitions\nDetails\nReturns NULL if the lower bound of range_value is UNBOUNDED.\nReturns NULL if range_to_check is NULL.\nReturn type\nT in range_value\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/range-functions#range_start)",
	"rank":                                   "```sql\nRANK()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n\n\n```\nDescription\nReturns the ordinal (1-based) rank of each row within the ordered partition.\nAll peer rows receive the same rank value. The next row or set of peer rows\nreceives a rank value which increments by the number of peers with the previous\nrank value, instead of DENSE_RANK, which always increments by 1.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#rank)",
	"regexp_contains":                        "```sql\nREGEXP_CONTAINS(value, regexp)\n\n```\nDescription\nReturns TRUE if value is a partial match for the regular expression,\nregexp.\nIf the regexp argument is invalid, the function returns an error.\nYou can search for a full match by using ^ (beginning of text) and $ (end of\ntext). Due to regular expression operator precedence, it\"s good practice to use\nparentheses around everything between ^ and $.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_contains)",
	"regexp_extract":                         "```sql\nREGEXP_EXTRACT(value, regexp[, position[, occurrence]])\n\n```\nDescription\nReturns the substring in value that matches the\nre2 regular expression, regexp.\nReturns NULL if there is no match.\nIf the regular expression contains a capturing group ((...)), and there is a\nmatch for that capturing group, that match is returned. If there\nare multiple matches for a capturing group, the first match is returned.\nIf position is specified, the search starts at this\nposition in value, otherwise it starts at the beginning of value. The\nposition must be a positive integer and can\"t be 0. If position is greater\nthan the length of value, NULL is returned.\nIf occurrence is specified, the search returns a specific occurrence of the\nregexp in value, otherwise returns the first match. If occurrence is\ngreater than the number of matches found, NULL is returned. For\noccurrence > 1, the function searches for additional occurrences beginning\nwith the character following the previous occurrence.\nReturns an error if:\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_extract)",
	"regexp_extract_all":                     "```sql\nREGEXP_EXTRACT_ALL(value, regexp)\n\n```\nDescription\nReturns an array of all substrings of value that match the\nre2 regular expression, regexp. Returns an empty array\nif there is no match.\nIf the regular expression contains a capturing group ((...)), and there is a\nmatch for that capturing group, that match is added to the results.\nThe REGEXP_EXTRACT_ALL function only returns non-overlapping matches. For\nexample, using this function to extract ana from banana returns only one\nsubstring, not two.\nReturns an error if:\nReturn type\nARRAY<STRING> or ARRAY<BYTES>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_extract_all)",
	"regexp_instr":                           "```sql\nREGEXP_INSTR(source_value, regexp [, position[, occurrence, [occurrence_position]]])\n\n```\nDescription\nReturns the lowest 1-based position of a regular expression, regexp, in\nsource_value. source_value and regexp must be the same type, either\nSTRING or BYTES.\nIf position is specified, the search starts at this position in\nsource_value, otherwise it starts at 1, which is the beginning of\nsource_value. position is of type INT64 and must be positive.\nIf occurrence is specified, the search returns the position of a specific\ninstance of regexp in source_value. If not specified, occurrence defaults\nto 1 and returns the position of the first occurrence. For occurrence > 1,\nthe function searches for the next, non-overlapping occurrence.\noccurrence is of type INT64 and must be positive.\nYou can optionally use occurrence_position to specify where a position\nin relation to an occurrence starts. Your choices are:\nReturns 0 if:\nReturns NULL if:\nReturns an error if:\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_instr)",
	"regexp_replace":                         "```sql\nREGEXP_REPLACE(value, regexp, replacement)\n\n```\nDescription\nReturns a STRING where all substrings of value that\nmatch regular expression regexp are replaced with replacement.\nYou can use backslashed-escaped digits (\\1 to \\9) within the replacement\nargument to insert text matching the corresponding parenthesized group in the\nregexp pattern. Use \\0 to refer to the entire matching text.\nTo add a backslash in your regular expression, you must first escape it. For\nexample, SELECT REGEXP_REPLACE(\"abc\", \"b(.)\", \"X\\\\1\"); returns aXc. You can\nalso use raw strings to remove one layer of\nescaping, for example SELECT REGEXP_REPLACE(\"abc\", \"b(.)\", r\"X\\1\");.\nThe REGEXP_REPLACE function only replaces non-overlapping matches. For\nexample, replacing ana within banana results in only one replacement, not\ntwo.\nIf the regexp argument isn\"t a valid regular expression, this function\nreturns an error.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_replace)",
	"regexp_substr":                          "```sql\nREGEXP_SUBSTR(value, regexp[, position[, occurrence]])\n\n```\nDescription\nSynonym for REGEXP_EXTRACT.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_substr)",
	"repeat":                                 "```sql\nREPEAT(original_value, repetitions)\n\n```\nDescription\nReturns a STRING or BYTES value that consists of original_value, repeated.\nThe repetitions parameter specifies the number of times to repeat\noriginal_value. Returns NULL if either original_value or repetitions\nare NULL.\nThis function returns an error if the repetitions value is negative.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#repeat)",
	"replace":                                "```sql\nREPLACE(original_value, from_pattern, to_pattern)\n\n```\nDescription\nReplaces all occurrences of from_pattern with to_pattern in\noriginal_value. If from_pattern is empty, no replacement is made.\nThis function supports specifying collation.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#replace)",
	"reverse":                                "```sql\nREVERSE(value)\n\n```\nDescription\nReturns the reverse of the input STRING or BYTES.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#reverse)",
	"right":                                  "```sql\nRIGHT(value, length)\n\n```\nDescription\nReturns a STRING or BYTES value that consists of the specified\nnumber of rightmost characters or bytes from value. The length is an\nINT64 that specifies the length of the returned\nvalue. If value is BYTES, length is the number of rightmost bytes to\nreturn. If value is STRING, length is the number of rightmost characters\nto return.\nIf length is 0, an empty STRING or BYTES value will be\nreturned. If length is negative, an error will be returned. If length\nexceeds the number of characters or bytes from value, the original value\nwill be returned.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#right)",
	"round":                                  "```sql\nROUND(X [, N [, rounding_mode]])\n\n```\nDescription\nIf only X is present, rounds X to the nearest integer. If N is present,\nrounds X to N decimal places after the decimal point. If N is negative,\nrounds off digits to the left of the decimal point. Rounds halfway cases\naway from zero. Generates an error if overflow occurs.\nIf X is a NUMERIC or BIGNUMERIC type, then you can\nexplicitly set rounding_mode\nto one of the following:\nIf you set the rounding_mode and X isn\"t a NUMERIC or BIGNUMERIC type,\nthen the function generates an error.\nReturn Data Type\nDescription\nEquivalent to the addition operator (+), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\nEquivalent to the division operator (X / Y), but returns\nNULL if an error occurs, such as a division by zero error.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#round)",
	"row_number":                             "```sql\nROW_NUMBER()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n\n\n```\nDescription\nReturns the sequential row ordinal (1-based) of each row for each ordered\npartition. The order of row numbers within their peer group is\nnon-deterministic.\nDoesn\"t require the ORDER BY clause. If the ORDER BY clause is unspecified\nthen the result is non-deterministic.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#row_number)",
	"rpad":                                   "```sql\nRPAD(original_value, return_length[, pattern])\n\n```\nDescription\nReturns a STRING or BYTES value that consists of original_value appended\nwith pattern. The return_length parameter is an\nINT64 that specifies the length of the\nreturned value. If original_value is BYTES,\nreturn_length is the number of bytes. If original_value is STRING,\nreturn_length is the number of characters.\nThe default value of pattern is a blank space.\nBoth original_value and pattern must be the same data type.\nIf return_length is less than or equal to the original_value length, this\nfunction returns the original_value value, truncated to the value of\nreturn_length. For example, RPAD(\"hello world\", 7); returns \"hello w\".\nIf original_value, return_length, or pattern is NULL, this function\nreturns NULL.\nThis function returns an error if:\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#rpad)",
	"rtrim":                                  "```sql\nRTRIM(value1[, value2])\n\n```\nDescription\nIdentical to TRIM, but only removes trailing characters.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#rtrim)",
	"s2_cellidfrompoint":                     "```sql\nS2_CELLIDFROMPOINT(point_geography[, level => cell_level])\n\n```\nDescription\nReturns the S2 cell ID covering a point GEOGRAPHY.\nThis is advanced functionality for interoperability with systems utilizing the\nS2 Geometry Library.\nConstraints\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#s2_cellidfrompoint)",
	"s2_coveringcellids":                     "```sql\nS2_COVERINGCELLIDS(\n    geography\n    [, min_level => cell_level]\n    [, max_level => cell_level]\n    [, max_cells => max_cells]\n    [, buffer => buffer])\n\n```\nDescription\nReturns an array of S2 cell IDs that cover the input\nGEOGRAPHY. The function returns at most max_cells cells. The optional\narguments min_level and max_level specify minimum and maximum levels for\nreturned S2 cells. The array size is limited by the optional max_cells\nargument. The optional buffer argument specifies a buffering factor in\nmeters; the region being covered is expanded from the extent of the\ninput geography by this amount.\nThis is advanced functionality for interoperability with systems utilizing the\nS2 Geometry Library.\nConstraints\nReturn type\nARRAY<INT64>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#s2_coveringcellids)",
	"safe_add":                               "```sql\nSAFE_ADD(X, Y)\n\n```\nDescription\nEquivalent to the addition operator (+), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\nEquivalent to the division operator (X / Y), but returns\nNULL if an error occurs, such as a division by zero error.\nReturn Data Type\nDescription\nEquivalent to the multiplication operator (*), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_add)",
	"safe_cast":                              "```sql\nSAFE_CAST(expression AS typename [format_clause])\n```\nDescription\nWhen using CAST, a query can fail if GoogleSQL is unable to perform\nthe cast. For example, the following query generates an error:\nIf you want to protect your queries from these types of errors, you can use\nSAFE_CAST. SAFE_CAST replaces runtime errors with NULLs. However, during\nstatic analysis, impossible casts between two non-castable types still produce\nan error because the query is invalid.\nSome casts can include a format clause, which provides\ninstructions for how to conduct the\ncast. For example, you could\ninstruct a cast to convert a sequence of bytes to a BASE64-encoded string\ninstead of a UTF-8-encoded string.\nThe structure of the format clause is unique to each type of cast and more\ninformation is available in the section for that cast.\nIf you are casting from bytes to strings, you can also use the\nfunction, SAFE_CONVERT_BYTES_TO_STRING. Any invalid UTF-8 characters\nare replaced with the unicode replacement character, U+FFFD.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#safe_casting)",
	"safe_convert_bytes_to_string":           "```sql\nSAFE_CONVERT_BYTES_TO_STRING(value)\n\n```\nDescription\nConverts a sequence of BYTES to a STRING. Any invalid UTF-8 characters are\nreplaced with the Unicode replacement character, U+FFFD.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#safe_convert_bytes_to_string)",
	"safe_divide":                            "```sql\nSAFE_DIVIDE(X, Y)\n\n```\nDescription\nEquivalent to the division operator (X / Y), but returns\nNULL if an error occurs, such as a division by zero error.\nReturn Data Type\nDescription\nEquivalent to the multiplication operator (*), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\nEquivalent to the unary minus operator (-), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_divide)",
	"safe_multiply":                          "```sql\nSAFE_MULTIPLY(X, Y)\n\n```\nDescription\nEquivalent to the multiplication operator (*), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\nEquivalent to the unary minus operator (-), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\nReturns the result of Y subtracted from X.\nEquivalent to the subtraction operator (-), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_multiply)",
	"safe_negate":                            "```sql\nSAFE_NEGATE(X)\n\n```\nDescription\nEquivalent to the unary minus operator (-), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\nReturns the result of Y subtracted from X.\nEquivalent to the subtraction operator (-), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\nComputes the secant for the angle of X, where X is specified in radians.\nX can be any data type\nthat coerces to FLOAT64.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_negate)",
	"safe_subtract":                          "```sql\nSAFE_SUBTRACT(X, Y)\n\n```\nDescription\nReturns the result of Y subtracted from X.\nEquivalent to the subtraction operator (-), but returns\nNULL if overflow occurs.\nReturn Data Type\nDescription\nComputes the secant for the angle of X, where X is specified in radians.\nX can be any data type\nthat coerces to FLOAT64.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_subtract)",
	"search":                                 "```sql\nSEARCH(\n  data_to_search, search_query\n  [, json_scope => { \"JSON_VALUES\" | \"JSON_KEYS\" | \"JSON_KEYS_AND_VALUES\" } ]\n  [, analyzer => { \"LOG_ANALYZER\" | \"NO_OP_ANALYZER\" | \"PATTERN_ANALYZER\"} ]\n  [, analyzer_options => analyzer_options_values ]\n)\n\n```\nDescription\nThe SEARCH function checks to see whether a BigQuery table or other\nsearch data contains a set of search terms (tokens). It returns TRUE if all\nsearch terms appear in the data, based on the rules for search_query\nand text analysis described in the text analyzer. Otherwise,\nthis function returns FALSE.\nDefinitions\n\n\nDetails\nThe SEARCH function is designed to work with search indexes to\noptimize point lookups. Although the SEARCH function works for\ntables that aren\"t indexed, its performance will be greatly improved with a\nsearch index. If both the analyzer and analyzer options match the one used\nto create the index, the search index will be used.\n\n\nRules for search_query\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/search_functions#search)",
	"sec":                                    "```sql\nSEC(X)\n\n```\nDescription\nComputes the secant for the angle of X, where X is specified in radians.\nX can be any data type\nthat coerces to FLOAT64.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sec)",
	"sech":                                   "```sql\nSECH(X)\n\n```\nDescription\nComputes the hyperbolic secant for the angle of X, where X is specified\nin radians. X can be any data type\nthat coerces to FLOAT64.\nNever produces an error.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sech)",
	"session_user":                           "```sql\nSESSION_USER()\n\n```\nDescription\nFor first-party users, returns the email address of the user that\"s running the\nquery.\nFor third-party users, returns the\nprincipal identifier\nof the user that\"s running the query.\nFor more information about identities, see\nPrincipals.\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/security_functions#session_user)",
	"sha1":                                   "```sql\nSHA1(input)\n\n```\nDescription\nComputes the hash of the input using the\nSHA-1 algorithm. The input can either be\nSTRING or BYTES. The string version treats the input as an array of bytes.\nThis function returns 20 bytes.\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions#sha1)",
	"sha256":                                 "```sql\nSHA256(input)\n\n```\nDescription\nComputes the hash of the input using the\nSHA-256 algorithm. The input can either be\nSTRING or BYTES. The string version treats the input as an array of bytes.\nThis function returns 32 bytes.\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions#sha256)",
	"sha512":                                 "```sql\nSHA512(input)\n\n```\nDescription\nComputes the hash of the input using the\nSHA-512 algorithm. The input can either be\nSTRING or BYTES. The string version treats the input as an array of bytes.\nThis function returns 64 bytes.\nReturn type\nBYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions#sha512)",
	"sign":                                   "```sql\nSIGN(X)\n\n```\nDescription\nReturns -1, 0, or +1 for negative, zero and positive arguments\nrespectively. For floating point arguments, this function doesn\"t distinguish\nbetween positive and negative zero.\nReturn Data Type\nDescription\nComputes the sine of X where X is specified in radians. Never fails.\nDescription\nComputes the hyperbolic sine of X where X is specified in radians. Generates\nan error if overflow occurs.\nDescription\nComputes the square root of X. Generates an error if X is less than 0.\nReturn Data Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sign)",
	"sin":                                    "```sql\nSIN(X)\n\n```\nDescription\nComputes the sine of X where X is specified in radians. Never fails.\nDescription\nComputes the hyperbolic sine of X where X is specified in radians. Generates\nan error if overflow occurs.\nDescription\nComputes the square root of X. Generates an error if X is less than 0.\nReturn Data Type\nDescription\nComputes the tangent of X where X is specified in radians. Generates an error if\noverflow occurs.\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sin)",
	"sinh":                                   "```sql\nSINH(X)\n\n```\nDescription\nComputes the hyperbolic sine of X where X is specified in radians. Generates\nan error if overflow occurs.\nDescription\nComputes the square root of X. Generates an error if X is less than 0.\nReturn Data Type\nDescription\nComputes the tangent of X where X is specified in radians. Generates an error if\noverflow occurs.\nDescription\nComputes the hyperbolic tangent of X where X is specified in radians. Doesn\"t\nfail.\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sinh)",
	"soundex":                                "```sql\nSOUNDEX(value)\n\n```\nDescription\nReturns a STRING that represents the\nSoundex code for value.\nSOUNDEX produces a phonetic representation of a string. It indexes words by\nsound, as pronounced in English. It\"s typically used to help determine whether\ntwo strings, such as the family names Levine and Lavine, or the words to\nand too, have similar English-language pronunciation.\nThe result of the SOUNDEX consists of a letter followed by 3 digits. Non-latin\ncharacters are ignored. If the remaining string is empty after removing\nnon-Latin characters, an empty STRING is returned.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#soundex)",
	"split":                                  "```sql\nSPLIT(value[, delimiter])\n\n```\nDescription\nSplits a STRING or BYTES value, using a delimiter. The delimiter argument\nmust be a literal character or sequence of characters. You can\"t split with a\nregular expression.\nFor STRING, the default delimiter is the comma ,.\nFor BYTES, you must specify a delimiter.\nSplitting on an empty delimiter produces an array of UTF-8 characters for\nSTRING values, and an array of BYTES for BYTES values.\nSplitting an empty STRING returns an\nARRAY with a single empty\nSTRING.\nThis function supports specifying collation.\nReturn type\nARRAY<STRING> or ARRAY<BYTES>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#split)",
	"sqrt":                                   "```sql\nSQRT(X)\n\n```\nDescription\nComputes the square root of X. Generates an error if X is less than 0.\nReturn Data Type\nDescription\nComputes the tangent of X where X is specified in radians. Generates an error if\noverflow occurs.\nDescription\nComputes the hyperbolic tangent of X where X is specified in radians. Doesn\"t\nfail.\nDescription\nIf only X is present, TRUNC rounds X to the nearest integer whose absolute\nvalue isn\"t greater than the absolute value of X. If N is also present, TRUNC\nbehaves like ROUND(X, N), but always rounds towards zero and never overflows.\nReturn Data Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sqrt)",
	"st_angle":                               "```sql\nST_ANGLE(point_geography_1, point_geography_2, point_geography_3)\n\n```\nDescription\nTakes three point GEOGRAPHY values, which represent two intersecting lines.\nReturns the angle between these lines. Point 2 and point 1 represent the first\nline and point 2 and point 3 represent the second line. The angle between\nthese lines is in radians, in the range [0, 2pi). The angle is measured\nclockwise from the first line to the second line.\nST_ANGLE has the following edge cases:\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_angle)",
	"st_area":                                "```sql\nST_AREA(geography_expression[, use_spheroid])\n\n```\nDescription\nReturns the area in square meters covered by the polygons in the input\nGEOGRAPHY.\nIf geography_expression is a point or a line, returns zero. If\ngeography_expression is a collection, returns the area of the polygons in the\ncollection; if the collection doesn\"t contain polygons, returns zero.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.\nThe use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE.\nReturn type\nFLOAT64\nDescription\nReturns the WKB representation of an input\nGEOGRAPHY.\nSee ST_GEOGFROMWKB to construct a\nGEOGRAPHY from WKB.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_area)",
	"st_asbinary":                            "```sql\nST_ASBINARY(geography_expression)\n\n```\nDescription\nReturns the WKB representation of an input\nGEOGRAPHY.\nSee ST_GEOGFROMWKB to construct a\nGEOGRAPHY from WKB.\nReturn type\nBYTES\nDescription\nReturns the RFC 7946 compliant GeoJSON\nrepresentation of the input GEOGRAPHY.\nA GoogleSQL GEOGRAPHY has spherical\ngeodesic edges, whereas a GeoJSON Geometry object explicitly has planar edges.\nTo convert between these two types of edges, GoogleSQL adds additional\npoints to the line where necessary so that the resulting sequence of edges\nremains within 10 meters of the original edge.\nSee ST_GEOGFROMGEOJSON to construct a\nGEOGRAPHY from GeoJSON.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_asbinary)",
	"st_asgeojson":                           "```sql\nST_ASGEOJSON(geography_expression)\n\n```\nDescription\nReturns the RFC 7946 compliant GeoJSON\nrepresentation of the input GEOGRAPHY.\nA GoogleSQL GEOGRAPHY has spherical\ngeodesic edges, whereas a GeoJSON Geometry object explicitly has planar edges.\nTo convert between these two types of edges, GoogleSQL adds additional\npoints to the line where necessary so that the resulting sequence of edges\nremains within 10 meters of the original edge.\nSee ST_GEOGFROMGEOJSON to construct a\nGEOGRAPHY from GeoJSON.\nReturn type\nSTRING\nDescription\nReturns the WKT representation of an input\nGEOGRAPHY.\nSee ST_GEOGFROMTEXT to construct a\nGEOGRAPHY from WKT.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_asgeojson)",
	"st_astext":                              "```sql\nST_ASTEXT(geography_expression)\n\n```\nDescription\nReturns the WKT representation of an input\nGEOGRAPHY.\nSee ST_GEOGFROMTEXT to construct a\nGEOGRAPHY from WKT.\nReturn type\nSTRING\nDescription\nTakes two point GEOGRAPHY values, and returns the azimuth of the line segment\nformed by points 1 and 2. The azimuth is the angle in radians measured between\nthe line from point 1 facing true North to the line segment from point 1 to\npoint 2.\nThe positive angle is measured clockwise on the surface of a sphere. For\nexample, the azimuth for a line segment:\nST_AZIMUTH has the following edge cases:\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_astext)",
	"st_azimuth":                             "```sql\nST_AZIMUTH(point_geography_1, point_geography_2)\n\n```\nDescription\nTakes two point GEOGRAPHY values, and returns the azimuth of the line segment\nformed by points 1 and 2. The azimuth is the angle in radians measured between\nthe line from point 1 facing true North to the line segment from point 1 to\npoint 2.\nThe positive angle is measured clockwise on the surface of a sphere. For\nexample, the azimuth for a line segment:\nST_AZIMUTH has the following edge cases:\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_azimuth)",
	"st_boundary":                            "```sql\nST_BOUNDARY(geography_expression)\n\n```\nDescription\nReturns a single GEOGRAPHY that contains the union\nof the boundaries of each component in the given input\nGEOGRAPHY.\nThe boundary of each component of a GEOGRAPHY is\ndefined as follows:\nReturn type\nGEOGRAPHY\nDescription\nReturns a STRUCT that represents the bounding box for the specified geography.\nThe bounding box is the minimal rectangle that encloses the geography. The edges\nof the rectangle follow constant lines of longitude and latitude.\nCaveats:\nReturn type\nSTRUCT<xmin FLOAT64, ymin FLOAT64, xmax FLOAT64, ymax FLOAT64>.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_boundary)",
	"st_boundingbox":                         "```sql\nST_BOUNDINGBOX(geography_expression)\n\n```\nDescription\nReturns a STRUCT that represents the bounding box for the specified geography.\nThe bounding box is the minimal rectangle that encloses the geography. The edges\nof the rectangle follow constant lines of longitude and latitude.\nCaveats:\nReturn type\nSTRUCT<xmin FLOAT64, ymin FLOAT64, xmax FLOAT64, ymax FLOAT64>.\nBounding box parts:\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_boundingbox)",
	"st_buffer":                              "```sql\nST_BUFFER(\n    geography,\n    buffer_radius\n    [, num_seg_quarter_circle => num_segments]\n    [, use_spheroid => boolean_expression]\n    [, endcap => endcap_style]\n    [, side => line_side])\n\n```\nDescription\nReturns a GEOGRAPHY that represents the buffer around the input GEOGRAPHY.\nThis function is similar to ST_BUFFERWITHTOLERANCE,\nbut you specify the number of segments instead of providing tolerance to\ndetermine how much the resulting geography can deviate from the ideal\nbuffer radius.\nReturn type\nPolygon GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_buffer)",
	"st_bufferwithtolerance":                 "```sql\nST_BUFFERWITHTOLERANCE(\n    geography,\n    buffer_radius,\n    tolerance_meters => tolerance\n    [, use_spheroid => boolean_expression]\n    [, endcap => endcap_style]\n    [, side => line_side])\n\n```\nReturns a GEOGRAPHY that represents the buffer around the input GEOGRAPHY.\nThis function is similar to ST_BUFFER,\nbut you provide tolerance instead of segments to determine how much the\nresulting geography can deviate from the ideal buffer radius.\nReturn type\nPolygon GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_bufferwithtolerance)",
	"st_centroid":                            "```sql\nST_CENTROID(geography_expression)\n\n```\nDescription\nReturns the centroid of the input GEOGRAPHY as a single point GEOGRAPHY.\nThe centroid of a GEOGRAPHY is the weighted average of the centroids of the\nhighest-dimensional components in the GEOGRAPHY. The centroid for components\nin each dimension is defined as follows:\nIf the input GEOGRAPHY is empty, an empty GEOGRAPHY is returned.\nConstraints\nIn the unlikely event that the centroid of a GEOGRAPHY can\"t be defined by a\nsingle point on the surface of the Earth, a deterministic but otherwise\narbitrary point is returned. This can only happen if the centroid is exactly at\nthe center of the Earth, such as the centroid for a pair of antipodal points,\nand the likelihood of this happening is vanishingly small.\nReturn type\nPoint GEOGRAPHY\nDescription\nComputes the centroid of the set of input GEOGRAPHYs as a single point\nGEOGRAPHY.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_centroid)",
	"st_centroid_agg":                        "```sql\nST_CENTROID_AGG(geography)\n\n```\nDescription\nComputes the centroid of the set of input GEOGRAPHYs as a single point\nGEOGRAPHY.\nThe centroid over the set of input GEOGRAPHYs is the weighted average of the\ncentroid of each individual GEOGRAPHY. Only the GEOGRAPHYs with the highest\ndimension present in the input contribute to the centroid of the entire set. For\nexample, if the input contains both GEOGRAPHYs with lines and GEOGRAPHYs\nwith only points, ST_CENTROID_AGG returns the weighted average of the\nGEOGRAPHYs with lines, since a line has more dimensions than a point. In this\nexample, ST_CENTROID_AGG ignores GEOGRAPHYs with only points when\ncalculating the aggregate centroid.\nST_CENTROID_AGG ignores NULL input GEOGRAPHY values.\nSee ST_CENTROID for the non-aggregate version of\nST_CENTROID_AGG and the definition of centroid for an individual GEOGRAPHY\nvalue.\nReturn type\nPoint GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_centroid_agg)",
	"st_closestpoint":                        "```sql\nST_CLOSESTPOINT(geography_1, geography_2[, use_spheroid])\n\n```\nDescription\nReturns a GEOGRAPHY containing a point on\ngeography_1 with the smallest possible distance to geography_2. This implies\nthat the distance between the point returned by ST_CLOSESTPOINT and\ngeography_2 is less than or equal to the distance between any other point on\ngeography_1 and geography_2.\nIf either of the input GEOGRAPHYs is empty, ST_CLOSESTPOINT returns NULL.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.\nThe use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE.\nReturn type\nPoint GEOGRAPHY\nPerforms DBSCAN clustering on a column of geographies. Returns a\n0-based cluster number.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nInput parameters\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_closestpoint)",
	"st_clusterdbscan":                       "```sql\nST_CLUSTERDBSCAN(geography_column, epsilon, minimum_geographies)\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n\n\n```\nPerforms DBSCAN clustering on a column of geographies. Returns a\n0-based cluster number.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nInput parameters\nGeography types and the DBSCAN algorithm\nThe DBSCAN algorithm identifies high-density clusters of data and marks outliers\nin low-density areas of noise. Geographies passed in through geography_column\nare classified in one of three ways by the DBSCAN algorithm:\nConstraints\nReturn type\nINT64 for each geography in the geography column.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_clusterdbscan)",
	"st_contains":                            "```sql\nST_CONTAINS(geography_1, geography_2)\n\n```\nDescription\nReturns TRUE if no point of geography_2 is outside geography_1, and\nthe interiors intersect; returns FALSE otherwise.\nNOTE: A GEOGRAPHY does not contain its own\nboundary. Compare with ST_COVERS.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_contains)",
	"st_convexhull":                          "```sql\nST_CONVEXHULL(geography_expression)\n\n```\nDescription\nReturns the convex hull for the input GEOGRAPHY. The convex hull is the\nsmallest convex GEOGRAPHY that covers the input. A GEOGRAPHY is convex if\nfor every pair of points in the GEOGRAPHY, the geodesic edge connecting the\npoints are also contained in the same GEOGRAPHY.\nIn most cases, the convex hull consists of a single polygon. Notable edge cases\ninclude the following:\nReturn type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_convexhull)",
	"st_coveredby":                           "```sql\nST_COVEREDBY(geography_1, geography_2)\n\n```\nDescription\nReturns FALSE if geography_1 or geography_2 is empty. Returns TRUE if no\npoints of geography_1 lie in the exterior of geography_2.\nGiven two GEOGRAPHYs a and b,\nST_COVEREDBY(a, b) returns the same result as\nST_COVERS(b, a). Note the opposite order of arguments.\nReturn type\nBOOL\nDescription\nReturns FALSE if geography_1 or geography_2 is empty.\nReturns TRUE if no points of geography_2 lie in the exterior of\ngeography_1.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_coveredby)",
	"st_covers":                              "```sql\nST_COVERS(geography_1, geography_2)\n\n```\nDescription\nReturns FALSE if geography_1 or geography_2 is empty.\nReturns TRUE if no points of geography_2 lie in the exterior of\ngeography_1.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_covers)",
	"st_difference":                          "```sql\nST_DIFFERENCE(geography_1, geography_2)\n\n```\nDescription\nReturns a GEOGRAPHY that represents the point set\ndifference of geography_1 and geography_2. Therefore, the result consists of\nthe part of geography_1 that doesn\"t intersect with geography_2.\nIf geometry_1 is completely contained in geometry_2, then ST_DIFFERENCE\nreturns an empty GEOGRAPHY.\nConstraints\nThe underlying geometric objects that a GoogleSQL\nGEOGRAPHY represents correspond to a closed point\nset. Therefore, ST_DIFFERENCE is the closure of the point set difference of\ngeography_1 and geography_2. This implies that if geography_1 and\ngeography_2 intersect, then a portion of the boundary of geography_2 could\nbe in the difference.\nReturn type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_difference)",
	"st_dimension":                           "```sql\nST_DIMENSION(geography_expression)\n\n```\nDescription\nReturns the dimension of the highest-dimensional element in the input\nGEOGRAPHY.\nThe dimension of each possible element is as follows:\nIf the input GEOGRAPHY is empty, ST_DIMENSION\nreturns -1.\nReturn type\nINT64\nDescription\nReturns TRUE if the intersection of geography_1 and geography_2 is empty,\nthat is, no point in geography_1 also appears in geography_2.\nST_DISJOINT is the logical negation of ST_INTERSECTS.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_dimension)",
	"st_disjoint":                            "```sql\nST_DISJOINT(geography_1, geography_2)\n\n```\nDescription\nReturns TRUE if the intersection of geography_1 and geography_2 is empty,\nthat is, no point in geography_1 also appears in geography_2.\nST_DISJOINT is the logical negation of ST_INTERSECTS.\nReturn type\nBOOL\nDescription\nReturns the shortest distance in meters between two non-empty\nGEOGRAPHYs.\nIf either of the input GEOGRAPHYs is empty,\nST_DISTANCE returns NULL.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere. If use_spheroid is TRUE, the function measures\ndistance on the surface of the WGS84 spheroid. The default value\nof use_spheroid is FALSE.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_disjoint)",
	"st_distance":                            "```sql\nST_DISTANCE(geography_1, geography_2[, use_spheroid])\n\n```\nDescription\nReturns the shortest distance in meters between two non-empty\nGEOGRAPHYs.\nIf either of the input GEOGRAPHYs is empty,\nST_DISTANCE returns NULL.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere. If use_spheroid is TRUE, the function measures\ndistance on the surface of the WGS84 spheroid. The default value\nof use_spheroid is FALSE.\nReturn type\nFLOAT64\nDescription\nReturns an ARRAY of simple\nGEOGRAPHYs where each element is a component of\nthe input GEOGRAPHY. A simple\nGEOGRAPHY consists of a single point, linestring,\nor polygon. If the input GEOGRAPHY is simple, the\nresult is a single element. When the input\nGEOGRAPHY is a collection, ST_DUMP returns an\nARRAY with one simple\nGEOGRAPHY for each component in the collection.\nIf dimension is provided, the function only returns\nGEOGRAPHYs of the corresponding dimension. A\ndimension of -1 is equivalent to omitting dimension.\nReturn Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_distance)",
	"st_dump":                                "```sql\nST_DUMP(geography[, dimension])\n\n```\nDescription\nReturns an ARRAY of simple\nGEOGRAPHYs where each element is a component of\nthe input GEOGRAPHY. A simple\nGEOGRAPHY consists of a single point, linestring,\nor polygon. If the input GEOGRAPHY is simple, the\nresult is a single element. When the input\nGEOGRAPHY is a collection, ST_DUMP returns an\nARRAY with one simple\nGEOGRAPHY for each component in the collection.\nIf dimension is provided, the function only returns\nGEOGRAPHYs of the corresponding dimension. A\ndimension of -1 is equivalent to omitting dimension.\nReturn Type\nARRAY<GEOGRAPHY>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_dump)",
	"st_dwithin":                             "```sql\nST_DWITHIN(geography_1, geography_2, distance[, use_spheroid])\n\n```\nDescription\nReturns TRUE if the distance between at least one point in geography_1 and\none point in geography_2 is less than or equal to the distance given by the\ndistance argument; otherwise, returns FALSE. If either input\nGEOGRAPHY is empty, ST_DWithin returns FALSE. The\ngiven distance is in meters on the surface of the Earth.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.\nThe use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE.\nReturn type\nBOOL\nDescription\nReturns the last point of a linestring geography as a point geography. Returns\nan error if the input isn\"t a linestring or if the input is empty. Use the\nSAFE prefix to obtain NULL for invalid input instead of an error.\nReturn Type\nPoint GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_dwithin)",
	"st_endpoint":                            "```sql\nST_ENDPOINT(linestring_geography)\n\n```\nDescription\nReturns the last point of a linestring geography as a point geography. Returns\nan error if the input isn\"t a linestring or if the input is empty. Use the\nSAFE prefix to obtain NULL for invalid input instead of an error.\nReturn Type\nPoint GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_endpoint)",
	"st_equals":                              "```sql\nST_EQUALS(geography_1, geography_2)\n\n```\nDescription\nChecks if two GEOGRAPHY values represent the same GEOGRAPHY value. Returns\nTRUE if the values are the same, otherwise returns FALSE.\nDefinitions\nDetails\nAs long as they still represent the same geometric structure, two\nGEOGRAPHY values can be equal even if the ordering of points or vertices\ndiffer. This means that one of the following conditions must be true for this\nfunction to return TRUE:\nST_EQUALS isn\"t guaranteed to be a transitive function.\nReturn type\nBOOL\nDescription\nReturns a STRUCT that represents the bounding box for the set of input\nGEOGRAPHY values. The bounding box is the minimal rectangle that encloses the\ngeography. The edges of the rectangle follow constant lines of longitude and\nlatitude.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_equals)",
	"st_extent":                              "```sql\nST_EXTENT(geography_expression)\n\n```\nDescription\nReturns a STRUCT that represents the bounding box for the set of input\nGEOGRAPHY values. The bounding box is the minimal rectangle that encloses the\ngeography. The edges of the rectangle follow constant lines of longitude and\nlatitude.\nCaveats:\nReturn type\nSTRUCT<xmin FLOAT64, ymin FLOAT64, xmax FLOAT64, ymax FLOAT64>.\nBounding box parts:\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_extent)",
	"st_exteriorring":                        "```sql\nST_EXTERIORRING(polygon_geography)\n\n```\nDescription\nReturns a linestring geography that corresponds to the outermost ring of a\npolygon geography.\nUse the SAFE prefix to return NULL for invalid input instead of an error.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_exteriorring)",
	"st_geogfrom":                            "```sql\nST_GEOGFROM(expression)\n\n```\nDescription\nConverts an expression for a STRING or BYTES value into a\nGEOGRAPHY value.\nIf expression represents a STRING value, it must be a valid\nGEOGRAPHY representation in one of the following formats:\nIf expression represents a BYTES value, it must be a valid GEOGRAPHY\nbinary expression in WKB format. To learn more about this format and the\nrequirements to use it, see ST_GEOGFROMWKB.\nIf expression is NULL, the output is NULL.\nReturn type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_geogfrom)",
	"st_geogfromgeojson":                     "```sql\nST_GEOGFROMGEOJSON(\n  geojson_string\n  [, make_valid => constant_expression ]\n)\n\n```\nDescription\nReturns a GEOGRAPHY value that corresponds to the\ninput GeoJSON representation.\nST_GEOGFROMGEOJSON accepts input that\"s RFC 7946\ncompliant.\nIf the named argument make_valid is set to TRUE, the function attempts to\nrepair polygons that don\"t conform to Open Geospatial Consortium\nsemantics.\nA GoogleSQL GEOGRAPHY has spherical\ngeodesic edges, whereas a GeoJSON Geometry object explicitly has planar edges.\nTo convert between these two types of edges, GoogleSQL adds additional\npoints to the line where necessary so that the resulting sequence of edges\nremains within 10 meters of the original edge.\nSee ST_ASGEOJSON to format a\nGEOGRAPHY as GeoJSON.\nConstraints\nThe JSON input is subject to the following constraints:\nReturn type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_geogfromgeojson)",
	"st_geogfromtext":                        "```sql\nST_GEOGFROMTEXT(\n  wkt_string\n  [ , oriented => value ]\n  [ , planar => value ]\n  [ , make_valid => value ]\n)\n\n```\nDescription\nConverts a STRING WKT geometry value into a GEOGRAPHY\nvalue.\nTo format GEOGRAPHY value as WKT, use ST_ASTEXT.\nDefinitions\nDetails\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_geogfromtext)",
	"st_geogfromwkb":                         "```sql\nST_GEOGFROMWKB(\n  wkb_bytes_expression\n  [ , oriented => value ]\n  [ , planar => value ]\n  [ , make_valid => value ]\n)\n\n```\nDescription\nConverts an expression from a hexadecimal-text STRING or BYTES\nvalue into a GEOGRAPHY value. The expression must be in\nWKB format.\nTo format GEOGRAPHY as WKB, use ST_ASBINARY.\nDefinitions\nDetails\nReturn type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_geogfromwkb)",
	"st_geogpoint":                           "```sql\nST_GEOGPOINT(longitude, latitude)\n\n```\nDescription\nCreates a GEOGRAPHY with a single point. ST_GEOGPOINT creates a point from\nthe specified FLOAT64 longitude (in degrees,\nnegative west of the Prime Meridian, positive east) and latitude (in degrees,\npositive north of the Equator, negative south) parameters and returns that point\nin a GEOGRAPHY value.\nNOTE: Some systems present latitude first; take care with argument order.\nConstraints\nReturn type\nPoint GEOGRAPHY\nDescription\nReturns a GEOGRAPHY value that corresponds to a\npoint in the middle of a bounding box defined in the GeoHash.\nReturn type\nPoint GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_geogpoint)",
	"st_geogpointfromgeohash":                "```sql\nST_GEOGPOINTFROMGEOHASH(geohash)\n\n```\nDescription\nReturns a GEOGRAPHY value that corresponds to a\npoint in the middle of a bounding box defined in the GeoHash.\nReturn type\nPoint GEOGRAPHY\nDescription\nTakes a single-point GEOGRAPHY and returns a GeoHash\nrepresentation of that GEOGRAPHY object.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_geogpointfromgeohash)",
	"st_geohash":                             "```sql\nST_GEOHASH(geography_expression[, maxchars])\n\n```\nDescription\nTakes a single-point GEOGRAPHY and returns a GeoHash\nrepresentation of that GEOGRAPHY object.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_geohash)",
	"st_geometrytype":                        "```sql\nST_GEOMETRYTYPE(geography_expression)\n\n```\nDescription\nReturns the Open Geospatial Consortium (OGC) geometry type that\ndescribes the input GEOGRAPHY. The OGC geometry type matches the\ntypes that are used in WKT and GeoJSON formats and\nprinted for ST_ASTEXT and ST_ASGEOJSON.\nST_GEOMETRYTYPE returns the OGC geometry type with the \"ST_\" prefix.\nST_GEOMETRYTYPE returns the following given the type on the input:\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_geometrytype)",
	"st_hausdorffdistance":                   "```sql\nST_HAUSDORFFDISTANCE(\n  geography_1,\n  geography_2\n  [, directed => { TRUE | FALSE } ]\n)\n\n```\nDescription\nGets the discrete Hausdorff distance, which is the greatest of all\nthe distances from a discrete point in one geography to the closest\ndiscrete point in another geography.\nDefinitions\nDetails\nIf an input geography is NULL, the function returns NULL.\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_hausdorffdistance)",
	"st_hausdorffdwithin":                    "```sql\nST_HAUSDORFFDWITHIN(\n  geography_1,\n  geography_2,\n  distance\n  [, directed => { TRUE | FALSE } ]\n)\n\n```\nDescription\nReturns TRUE if the Hausdorff distance between geography_1 and\ngeography_2 is less than or equal to the distance given by the\ndistance argument; otherwise, returns FALSE.\nDefinitions\nDetails\nIf an input geography is NULL, the function returns NULL.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_hausdorffdwithin)",
	"st_interiorrings":                       "```sql\nST_INTERIORRINGS(polygon_geography)\n\n```\nDescription\nReturns an array of linestring geographies that corresponds to the interior\nrings of a polygon geography. Each interior ring is the border of a hole within\nthe input polygon.\nUse the SAFE prefix to return NULL for invalid input instead of an error.\nReturn type\nARRAY<LineString GEOGRAPHY>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_interiorrings)",
	"st_intersection":                        "```sql\nST_INTERSECTION(geography_1, geography_2)\n\n```\nDescription\nReturns a GEOGRAPHY that represents the point set\nintersection of the two input GEOGRAPHYs. Thus,\nevery point in the intersection appears in both geography_1 and geography_2.\nIf the two input GEOGRAPHYs are disjoint, that is,\nthere are no points that appear in both input geometry_1 and geometry_2,\nthen an empty GEOGRAPHY is returned.\nSee ST_INTERSECTS, ST_DISJOINT for related\npredicate functions.\nReturn type\nGEOGRAPHY\nDescription\nReturns TRUE if the point set intersection of geography_1 and geography_2\nis non-empty. Thus, this function returns TRUE if there is at least one point\nthat appears in both input GEOGRAPHYs.\nIf ST_INTERSECTS returns TRUE, it implies that ST_DISJOINT\nreturns FALSE.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_intersection)",
	"st_intersects":                          "```sql\nST_INTERSECTS(geography_1, geography_2)\n\n```\nDescription\nReturns TRUE if the point set intersection of geography_1 and geography_2\nis non-empty. Thus, this function returns TRUE if there is at least one point\nthat appears in both input GEOGRAPHYs.\nIf ST_INTERSECTS returns TRUE, it implies that ST_DISJOINT\nreturns FALSE.\nReturn type\nBOOL\nDescription\nReturns TRUE if geography intersects the rectangle between [lng1, lng2]\nand [lat1, lat2]. The edges of the rectangle follow constant lines of\nlongitude and latitude. lng1 and lng2 specify the westmost and eastmost\nconstant longitude lines that bound the rectangle, and lat1 and lat2 specify\nthe minimum and maximum constant latitude lines that bound the rectangle.\nSpecify all longitude and latitude arguments in degrees.\nConstraints\nThe input arguments are subject to the following constraints:\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_intersects)",
	"st_intersectsbox":                       "```sql\nST_INTERSECTSBOX(geography, lng1, lat1, lng2, lat2)\n\n```\nDescription\nReturns TRUE if geography intersects the rectangle between [lng1, lng2]\nand [lat1, lat2]. The edges of the rectangle follow constant lines of\nlongitude and latitude. lng1 and lng2 specify the westmost and eastmost\nconstant longitude lines that bound the rectangle, and lat1 and lat2 specify\nthe minimum and maximum constant latitude lines that bound the rectangle.\nSpecify all longitude and latitude arguments in degrees.\nConstraints\nThe input arguments are subject to the following constraints:\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_intersectsbox)",
	"st_isclosed":                            "```sql\nST_ISCLOSED(geography_expression)\n\n```\nDescription\nReturns TRUE for a non-empty Geography, where each element in the Geography\nhas an empty boundary. The boundary for each element can be defined with\nST_BOUNDARY.\nAn empty GEOGRAPHY isn\"t closed.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_isclosed)",
	"st_iscollection":                        "```sql\nST_ISCOLLECTION(geography_expression)\n\n```\nDescription\nReturns TRUE if the total number of points, linestrings, and polygons is\ngreater than one.\nAn empty GEOGRAPHY isn\"t a collection.\nReturn type\nBOOL\nDescription\nReturns TRUE if the given GEOGRAPHY is empty; that is, the GEOGRAPHY\ndoesn\"t contain any points, lines, or polygons.\nNOTE: An empty GEOGRAPHY isn\"t associated with a particular geometry shape.\nFor example, the results of expressions ST_GEOGFROMTEXT(\"POINT EMPTY\") and\nST_GEOGFROMTEXT(\"GEOMETRYCOLLECTION EMPTY\") are identical.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_iscollection)",
	"st_isempty":                             "```sql\nST_ISEMPTY(geography_expression)\n\n```\nDescription\nReturns TRUE if the given GEOGRAPHY is empty; that is, the GEOGRAPHY\ndoesn\"t contain any points, lines, or polygons.\nNOTE: An empty GEOGRAPHY isn\"t associated with a particular geometry shape.\nFor example, the results of expressions ST_GEOGFROMTEXT(\"POINT EMPTY\") and\nST_GEOGFROMTEXT(\"GEOMETRYCOLLECTION EMPTY\") are identical.\nReturn type\nBOOL\nDescription\nReturns TRUE if the input GEOGRAPHY is a linestring and if the\nlinestring is both ST_ISCLOSED and\nsimple. A linestring is considered simple if it doesn\"t pass through the\nsame point twice (with the exception of the start and endpoint, which may\noverlap to form a ring).\nAn empty GEOGRAPHY isn\"t a ring.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_isempty)",
	"st_isring":                              "```sql\nST_ISRING(geography_expression)\n\n```\nDescription\nReturns TRUE if the input GEOGRAPHY is a linestring and if the\nlinestring is both ST_ISCLOSED and\nsimple. A linestring is considered simple if it doesn\"t pass through the\nsame point twice (with the exception of the start and endpoint, which may\noverlap to form a ring).\nAn empty GEOGRAPHY isn\"t a ring.\nReturn type\nBOOL\nDescription\nReturns the total length in meters of the lines in the input\nGEOGRAPHY.\nIf geography_expression is a point or a polygon, returns zero. If\ngeography_expression is a collection, returns the length of the lines in the\ncollection; if the collection doesn\"t contain lines, returns zero.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.\nThe use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_isring)",
	"st_length":                              "```sql\nST_LENGTH(geography_expression[, use_spheroid])\n\n```\nDescription\nReturns the total length in meters of the lines in the input\nGEOGRAPHY.\nIf geography_expression is a point or a polygon, returns zero. If\ngeography_expression is a collection, returns the length of the lines in the\ncollection; if the collection doesn\"t contain lines, returns zero.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.\nThe use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE.\nReturn type\nFLOAT64\nDescription\nGets a point at a specific fraction in a linestring GEOGRAPHY value.\nDefinitions\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_length)",
	"st_lineinterpolatepoint":                "```sql\nST_LINEINTERPOLATEPOINT(linestring_geography, fraction)\n\n```\nDescription\nGets a point at a specific fraction in a linestring GEOGRAPHY value.\nDefinitions\nDetails\nReturn Type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_lineinterpolatepoint)",
	"st_linelocatepoint":                     "```sql\nST_LINELOCATEPOINT(linestring_geography, point_geography)\n\n```\nDescription\nGets a section of a linestring between the start point and a selected point (a\npoint on the linestring closest to the point_geography argument). Returns the\npercentage that this section represents in the linestring.\nDetails:\nNULL and error handling:\nReturn Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_linelocatepoint)",
	"st_linesubstring":                       "```sql\nST_LINESUBSTRING(linestring_geography, start_fraction, end_fraction);\n\n```\nDescription\nGets a segment of a linestring at a specific starting and ending fraction.\nDefinitions\nDetails\nend_fraction must be greater than or equal to start_fraction.\nIf start_fraction and end_fraction are equal, a linestring with only\none point is produced.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_linesubstring)",
	"st_makeline":                            "```sql\nST_MAKELINE(geography_1, geography_2)\n\n```\nDescription\nCreates a GEOGRAPHY with a single linestring by\nconcatenating the point or line vertices of each of the input\nGEOGRAPHYs in the order they are given.\nST_MAKELINE comes in two variants. For the first variant, input must be two\nGEOGRAPHYs. For the second, input must be an ARRAY of type GEOGRAPHY. In\neither variant, each input GEOGRAPHY must consist of one of the following\nvalues:\nFor the first variant of ST_MAKELINE, if either input GEOGRAPHY is NULL,\nST_MAKELINE returns NULL. For the second variant, if input ARRAY or any\nelement in the input ARRAY is NULL, ST_MAKELINE returns NULL.\nConstraints\nEvery edge must span strictly less than 180 degrees.\nNOTE: The GoogleSQL snapping process may discard sufficiently short\nedges and snap the two endpoints together. For instance, if two input\nGEOGRAPHYs each contain a point and the two points are separated by a distance\nless than the snap radius, the points will be snapped together. In such a case\nthe result will be a GEOGRAPHY with exactly one point.\nReturn type\nLineString GEOGRAPHY\nDescription\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_makeline)",
	"st_makepolygon":                         "```sql\nST_MAKEPOLYGON(polygon_shell[, array_of_polygon_holes])\n\n```\nDescription\nCreates a GEOGRAPHY containing a single polygon\nfrom linestring inputs, where each input linestring is used to construct a\npolygon ring.\nST_MAKEPOLYGON comes in two variants. For the first variant, the input\nlinestring is provided by a single GEOGRAPHY containing exactly one\nlinestring. For the second variant, the input consists of a single GEOGRAPHY\nand an array of GEOGRAPHYs, each containing exactly one linestring.\nThe first GEOGRAPHY in either variant is used to construct the polygon shell.\nAdditional GEOGRAPHYs provided in the input ARRAY specify a polygon hole.\nFor every input GEOGRAPHY containing exactly one linestring, the following\nmust be true:\nFor the first variant of ST_MAKEPOLYGON, if either input GEOGRAPHY is\nNULL, ST_MAKEPOLYGON returns NULL. For the second variant, if\ninput ARRAY or any element in the ARRAY is NULL, ST_MAKEPOLYGON returns\nNULL.\nNOTE: ST_MAKEPOLYGON accepts an empty GEOGRAPHY as input. ST_MAKEPOLYGON\ninterprets an empty GEOGRAPHY as having an empty linestring, which will\ncreate a full loop: that is, a polygon that covers the entire Earth.\nConstraints\nTogether, the input rings must form a valid polygon:\nEvery edge must span strictly less than 180 degrees.\nEach polygon ring divides the sphere into two regions. The first input linesting\nto ST_MAKEPOLYGON forms the polygon shell, and the interior is chosen to be\nthe smaller of the two regions. Each subsequent input linestring specifies a\npolygon hole, so the interior of the polygon is already well-defined. In order\nto define a polygon shell such that the interior of the polygon is the larger of\nthe two regions, see ST_MAKEPOLYGONORIENTED.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_makepolygon)",
	"st_makepolygonoriented":                 "```sql\nST_MAKEPOLYGONORIENTED(array_of_geography)\n\n```\nDescription\nLike ST_MAKEPOLYGON, but the vertex ordering of each input linestring\ndetermines the orientation of each polygon ring. The orientation of a polygon\nring defines the interior of the polygon as follows: if someone walks along the\nboundary of the polygon in the order of the input vertices, the interior of the\npolygon is on the left. This applies for each polygon ring provided.\nThis variant of the polygon constructor is more flexible since\nST_MAKEPOLYGONORIENTED can construct a polygon such that the interior is on\neither side of the polygon ring. However, proper orientation of polygon rings is\ncritical in order to construct the desired polygon.\nIf the input ARRAY or any element in the ARRAY is NULL,\nST_MAKEPOLYGONORIENTED returns NULL.\nNOTE: The input argument for ST_MAKEPOLYGONORIENTED may contain an empty\nGEOGRAPHY. ST_MAKEPOLYGONORIENTED interprets an empty GEOGRAPHY as having\nan empty linestring, which will create a full loop: that is, a polygon that\ncovers the entire Earth.\nConstraints\nTogether, the input rings must form a valid polygon:\nEvery edge must span strictly less than 180 degrees.\nST_MAKEPOLYGONORIENTED relies on the ordering of the input vertices of each\nlinestring to determine the orientation of the polygon. This applies to the\npolygon shell and any polygon holes. ST_MAKEPOLYGONORIENTED expects all\npolygon holes to have the opposite orientation of the shell. See\nST_MAKEPOLYGON for an alternate polygon constructor, and\nother constraints on building a valid polygon.\nNOTE: Due to the GoogleSQL snapping process, edges with a sufficiently\nshort length will be discarded and the two endpoints will be snapped to a single\npoint. Therefore, it\"s possible that vertices in a linestring may be snapped\ntogether such that one or more edge disappears. Hence, it\"s possible that a\npolygon hole that\"s sufficiently small may disappear, or the resulting\nGEOGRAPHY may contain only a line or a point.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_makepolygonoriented)",
	"st_maxdistance":                         "```sql\nST_MAXDISTANCE(geography_1, geography_2[, use_spheroid])\n\n```\nReturns the longest distance in meters between two non-empty\nGEOGRAPHYs; that is, the distance between two\nvertices where the first vertex is in the first\nGEOGRAPHY, and the second vertex is in the second\nGEOGRAPHY. If geography_1 and geography_2 are the\nsame GEOGRAPHY, the function returns the distance\nbetween the two most distant vertices in that\nGEOGRAPHY.\nIf either of the input GEOGRAPHYs is empty,\nST_MAXDISTANCE returns NULL.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.\nThe use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE.\nReturn type\nFLOAT64\nDescription\nAn alias of ST_NUMPOINTS.\nDescription\nReturns the number of geometries in the input GEOGRAPHY. For a single point,\nlinestring, or polygon, ST_NUMGEOMETRIES returns 1. For any collection of\ngeometries, ST_NUMGEOMETRIES returns the number of geometries making up the\ncollection. ST_NUMGEOMETRIES returns 0 if the input is the empty\nGEOGRAPHY.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_maxdistance)",
	"st_npoints":                             "```sql\nST_NPOINTS(geography_expression)\n\n```\nDescription\nAn alias of ST_NUMPOINTS.\nDescription\nReturns the number of geometries in the input GEOGRAPHY. For a single point,\nlinestring, or polygon, ST_NUMGEOMETRIES returns 1. For any collection of\ngeometries, ST_NUMGEOMETRIES returns the number of geometries making up the\ncollection. ST_NUMGEOMETRIES returns 0 if the input is the empty\nGEOGRAPHY.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_npoints)",
	"st_numgeometries":                       "```sql\nST_NUMGEOMETRIES(geography_expression)\n\n```\nDescription\nReturns the number of geometries in the input GEOGRAPHY. For a single point,\nlinestring, or polygon, ST_NUMGEOMETRIES returns 1. For any collection of\ngeometries, ST_NUMGEOMETRIES returns the number of geometries making up the\ncollection. ST_NUMGEOMETRIES returns 0 if the input is the empty\nGEOGRAPHY.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_numgeometries)",
	"st_numpoints":                           "```sql\nST_NUMPOINTS(geography_expression)\n\n```\nDescription\nReturns the number of vertices in the input\nGEOGRAPHY. This includes the number of points, the\nnumber of linestring vertices, and the number of polygon vertices.\nNOTE: The first and last vertex of a polygon ring are counted as distinct\nvertices.\nReturn type\nINT64\nDescription\nReturns the length in meters of the boundary of the polygons in the input\nGEOGRAPHY.\nIf geography_expression is a point or a line, returns zero. If\ngeography_expression is a collection, returns the perimeter of the polygons\nin the collection; if the collection doesn\"t contain polygons, returns zero.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.\nThe use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_numpoints)",
	"st_perimeter":                           "```sql\nST_PERIMETER(geography_expression[, use_spheroid])\n\n```\nDescription\nReturns the length in meters of the boundary of the polygons in the input\nGEOGRAPHY.\nIf geography_expression is a point or a line, returns zero. If\ngeography_expression is a collection, returns the perimeter of the polygons\nin the collection; if the collection doesn\"t contain polygons, returns zero.\nThe optional use_spheroid parameter determines how this function measures\ndistance. If use_spheroid is FALSE, the function measures distance on the\nsurface of a perfect sphere.\nThe use_spheroid parameter currently only supports\nthe value FALSE. The default value of use_spheroid is FALSE.\nReturn type\nFLOAT64\nDescription\nReturns the Nth point of a linestring geography as a point geography, where N is\nthe index. The index is 1-based. Negative values are counted backwards from the\nend of the linestring, so that -1 is the last point. Returns an error if the\ninput isn\"t a linestring, if the input is empty, or if there is no vertex at\nthe given index. Use the SAFE prefix to obtain NULL for invalid input\ninstead of an error.\nReturn Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_perimeter)",
	"st_pointn":                              "```sql\nST_POINTN(linestring_geography, index)\n\n```\nDescription\nReturns the Nth point of a linestring geography as a point geography, where N is\nthe index. The index is 1-based. Negative values are counted backwards from the\nend of the linestring, so that -1 is the last point. Returns an error if the\ninput isn\"t a linestring, if the input is empty, or if there is no vertex at\nthe given index. Use the SAFE prefix to obtain NULL for invalid input\ninstead of an error.\nReturn Type\nPoint GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_pointn)",
	"st_regionstats":                         "```sql\nST_REGIONSTATS(\n    geography,\n    raster_id\n    [ , [band => ] value ]\n    [ , include => value ]\n    [ , options => value ]\n)\n\n```\nDescription\nReturns statistics summarizing the pixel values of the raster image referenced\nby raster_id that intersect with geography. The statistics include the\ncount, minimum, maximum, sum, standard deviation, mean, and area of the valid\npixels of the raster band named band_name. Google Earth Engine computes\nthe results of the function call.\nYou can only call this function in the US, us-central1,\nand us-central2 regions.\nFor more information about raster data and how to\ncall this function, see Work with raster data.\nReturn type\nReturn values:\nIf no valid pixels intersect geography, then the function returns 0\nfor all statistics.\nDescription\nReturns a simplified version of geography, the given input\nGEOGRAPHY. The input GEOGRAPHY is simplified by replacing nearly straight\nchains of short edges with a single long edge. The input geography will not\nchange by more than the tolerance specified by tolerance_meters. Thus,\nsimplified edges are guaranteed to pass within tolerance_meters of the\noriginal positions of all vertices that were removed from that edge. The given\ntolerance_meters is in meters on the surface of the Earth.\nNote that ST_SIMPLIFY preserves topological relationships, which means that\nno new crossing edges will be created and the output will be valid. For a large\nenough tolerance, adjacent shapes may collapse into a single object, or a shape\ncould be simplified to a shape with a smaller dimension.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_regionstats)",
	"st_simplify":                            "```sql\nST_SIMPLIFY(geography, tolerance_meters)\n\n```\nDescription\nReturns a simplified version of geography, the given input\nGEOGRAPHY. The input GEOGRAPHY is simplified by replacing nearly straight\nchains of short edges with a single long edge. The input geography will not\nchange by more than the tolerance specified by tolerance_meters. Thus,\nsimplified edges are guaranteed to pass within tolerance_meters of the\noriginal positions of all vertices that were removed from that edge. The given\ntolerance_meters is in meters on the surface of the Earth.\nNote that ST_SIMPLIFY preserves topological relationships, which means that\nno new crossing edges will be created and the output will be valid. For a large\nenough tolerance, adjacent shapes may collapse into a single object, or a shape\ncould be simplified to a shape with a smaller dimension.\nConstraints\nFor ST_SIMPLIFY to have any effect, tolerance_meters must be non-zero.\nST_SIMPLIFY returns an error if the tolerance specified by tolerance_meters\nis one of the following:\nReturn type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_simplify)",
	"st_snaptogrid":                          "```sql\nST_SNAPTOGRID(geography_expression, grid_size)\n\n```\nDescription\nReturns the input GEOGRAPHY, where each vertex has\nbeen snapped to a longitude/latitude grid. The grid size is determined by the\ngrid_size parameter which is given in degrees.\nConstraints\nArbitrary grid sizes aren\"t supported. The grid_size parameter is rounded so\nthat it\"s of the form 10^n, where -10 < n < 0.\nReturn type\nGEOGRAPHY\nDescription\nReturns the first point of a linestring geography as a point geography. Returns\nan error if the input isn\"t a linestring or if the input is empty. Use the\nSAFE prefix to obtain NULL for invalid input instead of an error.\nReturn Type\nPoint GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_snaptogrid)",
	"st_startpoint":                          "```sql\nST_STARTPOINT(linestring_geography)\n\n```\nDescription\nReturns the first point of a linestring geography as a point geography. Returns\nan error if the input isn\"t a linestring or if the input is empty. Use the\nSAFE prefix to obtain NULL for invalid input instead of an error.\nReturn Type\nPoint GEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_startpoint)",
	"st_touches":                             "```sql\nST_TOUCHES(geography_1, geography_2)\n\n```\nDescription\nReturns TRUE provided the following two conditions are satisfied:\nReturn type\nBOOL\nDescription\nReturns a GEOGRAPHY that represents the point set\nunion of all input GEOGRAPHYs.\nST_UNION comes in two variants. For the first variant, input must be two\nGEOGRAPHYs. For the second, the input is an\nARRAY of type GEOGRAPHY.\nFor the first variant of ST_UNION, if an input\nGEOGRAPHY is NULL, ST_UNION returns NULL.\nFor the second variant, if the input ARRAY value\nis NULL, ST_UNION returns NULL.\nFor a non-NULL input ARRAY, the union is computed\nand NULL elements are ignored so that they don\"t affect the output.\nSee ST_UNION_AGG for the aggregate version of ST_UNION.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_touches)",
	"st_union":                               "```sql\nST_UNION(geography_1, geography_2)\n\n```\nDescription\nReturns a GEOGRAPHY that represents the point set\nunion of all input GEOGRAPHYs.\nST_UNION comes in two variants. For the first variant, input must be two\nGEOGRAPHYs. For the second, the input is an\nARRAY of type GEOGRAPHY.\nFor the first variant of ST_UNION, if an input\nGEOGRAPHY is NULL, ST_UNION returns NULL.\nFor the second variant, if the input ARRAY value\nis NULL, ST_UNION returns NULL.\nFor a non-NULL input ARRAY, the union is computed\nand NULL elements are ignored so that they don\"t affect the output.\nSee ST_UNION_AGG for the aggregate version of ST_UNION.\nReturn type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_union)",
	"st_union_agg":                           "```sql\nST_UNION_AGG(geography)\n\n```\nDescription\nReturns a GEOGRAPHY that represents the point set\nunion of all input GEOGRAPHYs.\nST_UNION_AGG ignores NULL input GEOGRAPHY values.\nSee ST_UNION for the non-aggregate version of ST_UNION_AGG.\nReturn type\nGEOGRAPHY\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_union_agg)",
	"st_within":                              "```sql\nST_WITHIN(geography_1, geography_2)\n\n```\nDescription\nReturns TRUE if no point of geography_1 is outside of geography_2 and\nthe interiors of geography_1 and geography_2 intersect.\nGiven two geographies a and b, ST_WITHIN(a, b) returns the same result\nas ST_CONTAINS(b, a). Note the opposite order of arguments.\nReturn type\nBOOL\nDescription\nReturns the longitude in degrees of the single-point input\nGEOGRAPHY.\nFor any input GEOGRAPHY that isn\"t a single point,\nincluding an empty GEOGRAPHY, ST_X returns an\nerror. Use the SAFE. prefix to obtain NULL.\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_within)",
	"st_x":                                   "```sql\nST_X(point_geography_expression)\n\n```\nDescription\nReturns the longitude in degrees of the single-point input\nGEOGRAPHY.\nFor any input GEOGRAPHY that isn\"t a single point,\nincluding an empty GEOGRAPHY, ST_X returns an\nerror. Use the SAFE. prefix to obtain NULL.\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_x)",
	"st_y":                                   "```sql\nST_Y(point_geography_expression)\n\n```\nDescription\nReturns the latitude in degrees of the single-point input\nGEOGRAPHY.\nFor any input GEOGRAPHY that isn\"t a single point,\nincluding an empty GEOGRAPHY, ST_Y returns an\nerror. Use the SAFE. prefix to return NULL instead.\nReturn type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_y)",
	"starts_with":                            "```sql\nSTARTS_WITH(value, prefix)\n\n```\nDescription\nTakes two STRING or BYTES values. Returns TRUE if prefix is a\nprefix of value.\nThis function supports specifying collation.\nReturn type\nBOOL\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#starts_with)",
	"stddev":                                 "```sql\nSTDDEV(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nAn alias of STDDEV_SAMP.\nDescription\nReturns the population (biased) standard deviation of the values. The return\nresult is between 0 and +Inf.\nAll numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.\nThis function ignores any NULL inputs. If all inputs are ignored, this\nfunction returns NULL. If this function receives a single non-NULL input,\nit returns 0.\nNaN is produced if:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nIf this function is used with the OVER clause, it\"s part of a\nwindow function call. In a window function call,\naggregate function clauses can\"t be used.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#stddev)",
	"stddev_pop":                             "```sql\nSTDDEV_POP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the population (biased) standard deviation of the values. The return\nresult is between 0 and +Inf.\nAll numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.\nThis function ignores any NULL inputs. If all inputs are ignored, this\nfunction returns NULL. If this function receives a single non-NULL input,\nit returns 0.\nNaN is produced if:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nIf this function is used with the OVER clause, it\"s part of a\nwindow function call. In a window function call,\naggregate function clauses can\"t be used.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#stddev_pop)",
	"stddev_samp":                            "```sql\nSTDDEV_SAMP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the sample (unbiased) standard deviation of the values. The return\nresult is between 0 and +Inf.\nAll numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.\nThis function ignores any NULL inputs. If there are fewer than two non-NULL\ninputs, this function returns NULL.\nNaN is produced if:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nIf this function is used with the OVER clause, it\"s part of a\nwindow function call. In a window function call,\naggregate function clauses can\"t be used.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#stddev_samp)",
	"string":                                 "```sql\nSTRING(timestamp_expression[, time_zone])\n\n```\nDescription\nConverts a timestamp to a string. Supports an optional\nparameter to specify a time zone. See\nTime zone definitions for information\non how to specify a time zone.\nReturn Data Type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#string)",
	"string_agg":                             "```sql\nSTRING_AGG(\n  [ DISTINCT ]\n  expression [, delimiter]\n  [ ORDER BY key [ { ASC | DESC } ] [, ... ] ]\n  [ LIMIT n ]\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns a value (either STRING or BYTES) obtained by concatenating\nnon-NULL values. Returns NULL if there are zero input rows or expression\nevaluates to NULL for all rows.\nIf a delimiter is specified, concatenated values are separated by that\ndelimiter; otherwise, a comma is used as a delimiter.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nIf this function is used with the OVER clause, it\"s part of a\nwindow function call. In a window function call,\naggregate function clauses can\"t be used.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSupported Argument Types\nEither STRING or BYTES.\nReturn Data Types\nEither STRING or BYTES.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#string_agg)",
	"strpos":                                 "```sql\nSTRPOS(value, subvalue)\n\n```\nDescription\nTakes two STRING or BYTES values. Returns the 1-based position of the first\noccurrence of subvalue inside value. Returns 0 if subvalue isn\"t found.\nThis function supports specifying collation.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#strpos)",
	"substr":                                 "```sql\nSUBSTR(value, position[, length])\n\n```\nDescription\nGets a portion (substring) of the supplied STRING or BYTES value.\nThe position argument is an integer specifying the starting position of the\nsubstring.\nThe length argument specifies the maximum number of characters or bytes to\nreturn.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#substr)",
	"substring":                              "```sql\nSUBSTRING(value, position[, length])\n\n```\nAlias for SUBSTR.\nDescription\nConverts a sequence of BYTES into a base32-encoded STRING. To convert a\nbase32-encoded STRING into BYTES, use FROM_BASE32.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#substring)",
	"sum":                                    "```sql\nSUM(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the sum of non-NULL values in an aggregated group.\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nSUM can be used with differential privacy. For more information, see\nDifferentially private aggregate functions.\nCaveats:\nSupported Argument Types\nReturn Data Types\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#sum)",
	"tan":                                    "```sql\nTAN(X)\n\n```\nDescription\nComputes the tangent of X where X is specified in radians. Generates an error if\noverflow occurs.\nDescription\nComputes the hyperbolic tangent of X where X is specified in radians. Doesn\"t\nfail.\nDescription\nIf only X is present, TRUNC rounds X to the nearest integer whose absolute\nvalue isn\"t greater than the absolute value of X. If N is also present, TRUNC\nbehaves like ROUND(X, N), but always rounds towards zero and never overflows.\nReturn Data Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#tan)",
	"tanh":                                   "```sql\nTANH(X)\n\n```\nDescription\nComputes the hyperbolic tangent of X where X is specified in radians. Doesn\"t\nfail.\nDescription\nIf only X is present, TRUNC rounds X to the nearest integer whose absolute\nvalue isn\"t greater than the absolute value of X. If N is also present, TRUNC\nbehaves like ROUND(X, N), but always rounds towards zero and never overflows.\nReturn Data Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#tanh)",
	"text_analyze":                           "```sql\nTEXT_ANALYZE(\n  text\n  [, analyzer => { \"LOG_ANALYZER\" | \"NO_OP_ANALYZER\" | \"PATTERN_ANALYZER\" } ]\n  [, analyzer_options => analyzer_options_values ]\n)\n\n```\nDescription\nExtracts terms (tokens) from text and converts them into a tokenized document.\nDefinitions\nDetails\nThere is no guarantee on the order of the tokens produced by this function.\nIf no analyzer is specified, the LOG_ANALYZER analyzer is used by default.\nReturn type\nARRAY<STRING>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/text-analysis-functions#text_analyze)",
	"tf_idf":                                 "```sql\nTF_IDF(tokenized_document) OVER()\n\n```\nDescription\nEvaluates how relevant a term is to a tokenized document in a set of\ntokenized documents, using the TF-IDF (term frequency-inverse document frequency)\nalgorithm.\nDefinitions\nDetails\nThis function uses a TF-IDF (term frequency-inverse document frequency)\nalgorithm to compute the relevance of terms in a set of tokenized documents.\nTF-IDF multiplies two metrics: how many times a term appears in a document\n(term frequency), and the inverse document frequency of the term across a\ncollection of documents (inverse document frequency).\nTerms are added to a dictionary of terms if they satisfy the criteria for\nmax_distinct_tokens and frequency_threshold, otherwise they are considered\nthe unknown term. The unknown term is always the first term in the dictionary\nand represented as NULL. The rest of the dictionary is ordered by\nterm frequency rather than alphabetically.\nReturn type\nARRAY<STRUCT<term STRING, tf_idf DOUBLE>>\nDefinitions:\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/text-analysis-functions#tf_idf)",
	"time":                                   "```sql\n1. TIME(hour, minute, second)\n2. TIME(timestamp, [time_zone])\n3. TIME(datetime)\n\n```\nDescription\nReturn Data Type\nTIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time)",
	"time_add":                               "```sql\nTIME_ADD(time_expression, INTERVAL int64_expression part)\n\n```\nDescription\nAdds int64_expression units of part to the TIME object.\nTIME_ADD supports the following values for part:\nThis function automatically adjusts when values fall outside of the 00:00:00 to\n24:00:00 boundary. For example, if you add an hour to 23:30:00, the returned\nvalue is 00:30:00.\nReturn Data Types\nTIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time_add)",
	"time_diff":                              "```sql\nTIME_DIFF(end_time, start_time, granularity)\n\n```\nDescription\nGets the number of unit boundaries between two TIME values (end_time -\nstart_time) at a particular time granularity.\nDefinitions\nDetails\nIf end_time is earlier than start_time, the output is negative.\nProduces an error if the computation overflows, such as if the difference\nin microseconds\nbetween the two TIME values overflows.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time_diff)",
	"time_sub":                               "```sql\nTIME_SUB(time_expression, INTERVAL int64_expression part)\n\n```\nDescription\nSubtracts int64_expression units of part from the TIME object.\nTIME_SUB supports the following values for part:\nThis function automatically adjusts when values fall outside of the 00:00:00 to\n24:00:00 boundary. For example, if you subtract an hour from 00:30:00, the\nreturned value is 23:30:00.\nReturn Data Type\nTIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time_sub)",
	"time_trunc":                             "```sql\nTIME_TRUNC(time_value, time_granularity)\n\n```\nDescription\nTruncates a TIME value at a particular granularity.\nDefinitions\n\nTime granularity definitions\nDetails\nThe resulting value is always rounded to the beginning of granularity.\nReturn Data Type\nTIME\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time_trunc)",
	"timestamp":                              "```sql\nTIMESTAMP(string_expression[, time_zone])\nTIMESTAMP(date_expression[, time_zone])\nTIMESTAMP(datetime_expression[, time_zone])\n\n```\nDescription\nThis function supports an optional\nparameter to specify a time zone. If\nno time zone is specified, the default time zone, UTC,\nis used.\nReturn Data Type\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp)",
	"timestamp_add":                          "```sql\nTIMESTAMP_ADD(timestamp_expression, INTERVAL int64_expression date_part)\n\n```\nDescription\nAdds int64_expression units of date_part to the timestamp, independent of\nany time zone.\nTIMESTAMP_ADD supports the following values for date_part:\nReturn Data Types\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_add)",
	"timestamp_bucket":                       "```sql\nTIMESTAMP_BUCKET(timestamp_in_bucket, bucket_width)\n\n```\nDescription\nGets the lower bound of the timestamp bucket that contains a timestamp.\nDefinitions\nReturn type\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/time-series-functions#timestamp_bucket)",
	"timestamp_diff":                         "```sql\nTIMESTAMP_DIFF(end_timestamp, start_timestamp, granularity)\n\n```\nDescription\nGets the number of unit boundaries between two TIMESTAMP values\n(end_timestamp - start_timestamp) at a particular time granularity.\nDefinitions\nDetails\nIf end_timestamp is earlier than start_timestamp, the output is negative.\nProduces an error if the computation overflows, such as if the difference\nin microseconds\nbetween the two TIMESTAMP values overflows.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_diff)",
	"timestamp_micros":                       "```sql\nTIMESTAMP_MICROS(int64_expression)\n\n```\nDescription\nInterprets int64_expression as the number of microseconds since 1970-01-01\n00:00:00 UTC and returns a timestamp.\nReturn Data Type\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_micros)",
	"timestamp_millis":                       "```sql\nTIMESTAMP_MILLIS(int64_expression)\n\n```\nDescription\nInterprets int64_expression as the number of milliseconds since 1970-01-01\n00:00:00 UTC and returns a timestamp.\nReturn Data Type\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_millis)",
	"timestamp_seconds":                      "```sql\nTIMESTAMP_SECONDS(int64_expression)\n\n```\nDescription\nInterprets int64_expression as the number of seconds since 1970-01-01 00:00:00\nUTC and returns a timestamp.\nReturn Data Type\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_seconds)",
	"timestamp_sub":                          "```sql\nTIMESTAMP_SUB(timestamp_expression, INTERVAL int64_expression date_part)\n\n```\nDescription\nSubtracts int64_expression units of date_part from the timestamp,\nindependent of any time zone.\nTIMESTAMP_SUB supports the following values for date_part:\nReturn Data Type\nTIMESTAMP\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_sub)",
	"timestamp_trunc":                        "```sql\nTIMESTAMP_TRUNC(timestamp_value, timestamp_granularity[, time_zone])\n\n```\nDescription\nTruncates a TIMESTAMP or DATETIME value at a particular granularity.\nDefinitions\n\nDate granularity definitions\n\nTime granularity definitions\n\nTime zone part definitions\nDetails\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_trunc)",
	"to_base32":                              "```sql\nTO_BASE32(bytes_expr)\n\n```\nDescription\nConverts a sequence of BYTES into a base32-encoded STRING. To convert a\nbase32-encoded STRING into BYTES, use FROM_BASE32.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#to_base32)",
	"to_base64":                              "```sql\nTO_BASE64(bytes_expr)\n\n```\nDescription\nConverts a sequence of BYTES into a base64-encoded STRING. To convert a\nbase64-encoded STRING into BYTES, use FROM_BASE64.\nThere are several base64 encodings in common use that vary in exactly which\nalphabet of 65 ASCII characters are used to encode the 64 digits and padding.\nSee RFC 4648 for details. This\nfunction adds padding and uses the alphabet [A-Za-z0-9+/=].\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#to_base64)",
	"to_code_points":                         "```sql\nTO_CODE_POINTS(value)\n\n```\nDescription\nTakes a STRING or BYTES value and returns an array of INT64 values that\nrepresent code points or extended ASCII character values.\nTo convert from an array of code points to a STRING or BYTES, see\nCODE_POINTS_TO_STRING or\nCODE_POINTS_TO_BYTES.\nReturn type\nARRAY<INT64>\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#to_code_points)",
	"to_hex":                                 "```sql\nTO_HEX(bytes)\n\n```\nDescription\nConverts a sequence of BYTES into a hexadecimal STRING. Converts each byte\nin the STRING as two hexadecimal characters in the range\n(0..9, a..f). To convert a hexadecimal-encoded\nSTRING to BYTES, use FROM_HEX.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#to_hex)",
	"to_json":                                "```sql\nTO_JSON(\n  sql_value\n  [, stringify_wide_numbers => { TRUE | FALSE } ]\n)\n\n```\nDescription\nConverts a SQL value to a JSON value.\nArguments:\nReturn type\nJSON\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#to_json)",
	"to_json_string":                         "```sql\nTO_JSON_STRING(value[, pretty_print])\n\n```\nDescription\nConverts a SQL value to a JSON-formatted STRING value.\nArguments:\nReturn type\nA JSON-formatted STRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#to_json_string)",
	"translate":                              "```sql\nTRANSLATE(expression, source_characters, target_characters)\n\n```\nDescription\nIn expression, replaces each character in source_characters with the\ncorresponding character in target_characters. All inputs must be the same\ntype, either STRING or BYTES.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#translate)",
	"trim":                                   "```sql\nTRIM(value_to_trim[, set_of_characters_to_remove])\n\n```\nDescription\nTakes a STRING or BYTES value to trim.\nIf the value to trim is a STRING, removes from this value all leading and\ntrailing Unicode code points in set_of_characters_to_remove.\nThe set of code points is optional. If it isn\"t specified, all\nwhitespace characters are removed from the beginning and end of the\nvalue to trim.\nIf the value to trim is BYTES, removes from this value all leading and\ntrailing bytes in set_of_characters_to_remove. The set of bytes is required.\nReturn type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#trim)",
	"trunc":                                  "```sql\nTRUNC(X [, N])\n\n```\nDescription\nIf only X is present, TRUNC rounds X to the nearest integer whose absolute\nvalue isn\"t greater than the absolute value of X. If N is also present, TRUNC\nbehaves like ROUND(X, N), but always rounds towards zero and never overflows.\nReturn Data Type\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#trunc)",
	"typeof":                                 "```sql\nTYPEOF(expression)\n\n```\nDescription\nTakes an expression and gets the name of the data type for that\nexpression.\nReturn type\nSTRING\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/utility-functions#typeof)",
	"unicode":                                "```sql\nUNICODE(value)\n\n```\nDescription\nReturns the Unicode code point for the first character in\nvalue. Returns 0 if value is empty, or if the resulting Unicode code\npoint is 0.\nReturn type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#unicode)",
	"unix_date":                              "```sql\nUNIX_DATE(date_expression)\n\n```\nDescription\nReturns the number of days since 1970-01-01.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#unix_date)",
	"unix_micros":                            "```sql\nUNIX_MICROS(timestamp_expression)\n\n```\nDescription\nReturns the number of microseconds since 1970-01-01 00:00:00 UTC.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#unix_micros)",
	"unix_millis":                            "```sql\nUNIX_MILLIS(timestamp_expression)\n\n```\nDescription\nReturns the number of milliseconds since 1970-01-01 00:00:00 UTC. Truncates\nhigher levels of precision by rounding down to the beginning of the millisecond.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#unix_millis)",
	"unix_seconds":                           "```sql\nUNIX_SECONDS(timestamp_expression)\n\n```\nDescription\nReturns the number of seconds since 1970-01-01 00:00:00 UTC. Truncates higher\nlevels of precision by rounding down to the beginning of the second.\nReturn Data Type\nINT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#unix_seconds)",
	"upper":                                  "```sql\nUPPER(value)\n\n```\nDescription\nFor STRING arguments, returns the original string with all alphabetic\ncharacters in uppercase. Mapping between uppercase and lowercase is done\naccording to the\nUnicode Character Database\nwithout taking into account language-specific mappings.\nFor BYTES arguments, the argument is treated as ASCII text, with all bytes\ngreater than 127 left intact.\nReturn type\nSTRING or BYTES\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#upper)",
	"var_pop":                                "```sql\nVAR_POP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the population (biased) variance of the values. The return result is\nbetween 0 and +Inf.\nAll numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.\nThis function ignores any NULL inputs. If all inputs are ignored, this\nfunction returns NULL. If this function receives a single non-NULL input,\nit returns 0.\nNaN is produced if:\nIf this function is used with the OVER clause, it\"s part of a\nwindow function call. In a window function call,\naggregate function clauses can\"t be used.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#var_pop)",
	"var_samp":                               "```sql\nVAR_SAMP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nReturns the sample (unbiased) variance of the values. The return result is\nbetween 0 and +Inf.\nAll numeric types are supported. If the\ninput is NUMERIC or BIGNUMERIC then the internal aggregation is\nstable with the final output converted to a FLOAT64.\nOtherwise the input is converted to a FLOAT64\nbefore aggregation, resulting in a potentially unstable result.\nThis function ignores any NULL inputs. If there are fewer than two non-NULL\ninputs, this function returns NULL.\nNaN is produced if:\nTo learn more about the optional aggregate clauses that you can pass\ninto this function, see\nAggregate function calls.\nThis function can be used with the\nAGGREGATION_THRESHOLD clause.\nIf this function is used with the OVER clause, it\"s part of a\nwindow function call. In a window function call,\naggregate function clauses can\"t be used.\nTo learn more about the OVER clause and how to use it, see\nWindow function calls.\nReturn Data Type\nFLOAT64\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#var_samp)",
	"variance":                               "```sql\nVARIANCE(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n\n```\nDescription\nAn alias of VAR_SAMP.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#variance)",
	"vector_search":                          "```sql\nVECTOR_SEARCH(\n  { TABLE base_table | (base_table_query) },\n  column_to_search,\n  { TABLE query_table | (query_table_query) },\n  [, query_column_to_search => query_column_to_search_value]\n  [, top_k => top_k_value ]\n  [, distance_type => distance_type_value ]\n  [, options => options_value ]\n)\n\n```\nDescription\nThe VECTOR_SEARCH function lets you search embeddings to find semantically\nsimilar entities.\nEmbeddings are high-dimensional numerical vectors that represent a given entity,\nlike a piece of text or an audio file. Machine learning (ML) models use\nembeddings to encode semantics about such entities to make it easier to\nreason about and compare them. For example, a common operation in clustering,\nclassification, and recommendation models is to measure the distance between\nvectors in an embedding space to\nfind items that are most semantically similar.\nDefinitions\nDetails\nYou can optionally use VECTOR_SEARCH with a vector index. When\na vector index is used, VECTOR_SEARCH uses the Approximate Nearest\nNeighbor search technique to help improve vector search performance, with\nthe trade-off of reducing recall and so returning more approximate\nresults. When a base table is large, the use of an index typically improves\nperformance without significantly sacrificing recall. Brute force is used to\nreturn exact results when a vector index isn\"t available, and you can\nchoose to use brute force to get exact results even when a vector index\nis available.\nOutput\nFor each row in the query data, the output contains multiple rows from the\nbase table that satisfy the search criteria. The number of results rows per\nquery table row is either 10 or the top_k value if it\"s specified. The\norder of the output isn\"t guaranteed.\nThe output includes the following columns:\nLimitations\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/search_functions#vector_search)",
	"vector_index.statistics":                "```sql\nVECTOR_INDEX.STATISTICS(\n  TABLE table_name\n)\n\n```\nDescription\nThe VECTOR_INDEX.STATISTICS function calculates how much an indexed table\"s\ndata has drifted between when a vector index was trained and the\npresent. Use this function to determine if table data has changed enough to\nrequire a vector index rebuild. If necessary, you can use the\nALTER VECTOR INDEX REBUILD statement to rebuild the vector index.\nTo alter vector indexes, you must have the BigQuery Data Editor\n(roles/bigquery.dataEditor) or BigQuery Data Owner\n(roles/bigquery.dataOwner) IAM role on the table that contains the\nvector index.\nDefinitions\nOutput\nA FLOAT64 value in the range [0,1). A lower value indicates less drift.\nTypically, a change of 0.3 or greater is considered significant.\n[BigQuery Documentation](https://cloud.google.com/bigquery/docs/reference/standard-sql/vectorindex_functions#vector_indexstatistics)",
}
