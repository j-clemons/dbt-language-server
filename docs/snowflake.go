package docs

var SnowflakeFunctions = map[string]string{
	"abs":                                    "```sql\nABS( <num_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/abs)\n",
	"acos":                                   "```sql\nACOS( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number greater than or equal\nto -1.0 and less than or equal to +1.0.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/acos)\n",
	"acosh":                                  "```sql\nACOSH( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a FLOAT number greater than or equal to\n1.0.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/acosh)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/acosh)\n",
	"add_months":                             "```sql\nADD_MONTHS( <date_or_timestamp_expr> , <num_months_expr> )\n```\n```sql\n<date_or_timestamp_expr>```\nRequired:\n```sql\n<num_months_expr>```\nThis is the date or timestamp expression to which you want to add\na specified number of months.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/add_months)\n",
	"alert_history":                          "```sql\nALERT_HISTORY(\n      [ SCHEDULED_TIME_RANGE_START => <constant_expr> ]\n      [, SCHEDULED_TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <integer> ]\n      [, ALERT_NAME => \"<string>\" ] )\n```\n```sql\n<SCHEDULED_TIME_RANGE_START>```\nAll the arguments are optional.\n```sql\n<RESULT_LIMIT>```\nTime range (in TIMESTAMP_LTZ format), within the last 7 days, in which the evaluation of the condition for the alert was\nscheduled.\n```sql\n<ALERT_NAME>```\nIf SCHEDULED_TIME_RANGE_END is not specified, the function returns those alerts that have already completed, are\ncurrently running, or are scheduled in the future.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/alert_history)\n",
	"all_user_names":                         "```sql\nALL_USER_NAMES()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/all_user_names)\n",
	"any_value":                              "```sql\nANY_VALUE( [ DISTINCT ] <expr1> )\n```\n```sql\n<expr1>```\nThe input expression.\n```sql\n<expr2>```\nThe column to partition on, if you want the result to be split into multiple\npartitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/any_value)\n",
	"application_json":                       "```sql\nSNOWFLAKE.NOTIFICATION.APPLICATION_JSON( \"<message>\" )\n```\n```sql\n<\">```\nContent of the message to send.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/application_json)\n",
	"approx_count_distinct":                  "```sql\nAPPROX_COUNT_DISTINCT( [ DISTINCT ] <expr1>  [ , ... ] )\n\nAPPROX_COUNT_DISTINCT(*)\n```\n```sql\n<expr1>```\nThis is the expression for which you want to know the number of distinct values.\n```sql\n<expr2>```\nThis is the optional expression used to group rows into partitions.\n```sql\n<*>```\nReturns an approximation of the total number of records, excluding records with NULL values.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_count_distinct)\n",
	"approx_percentile":                      "```sql\nAPPROX_PERCENTILE( <expr> , <percentile> )\n```\n```sql\n<expr>```\nA valid expression, such as a column name, that evaluates to a numeric value.\n```sql\n<percentile>```\nA constant real value greater than or equal to 0.0 and less than 1.0.\nThis indicates the percentile (from 0 to 99.999…).\nE.g. The value 0.65 indicates the 65th percentile.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_percentile)\n",
	"approx_percentile_accumulate":           "```sql\nAPPROX_PERCENTILE_ACCUMULATE( <expr> )\n```\n```sql\n<expr>```\nA valid expression, such as a column name, that evaluates to a numeric\nvalue.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_percentile_accumulate)\n",
	"approx_percentile_combine":              "```sql\nAPPROX_PERCENTILE_COMBINE( <state> )\n```\n```sql\n<state>```\nAn expression that contains state information generated\nby a call to APPROX_PERCENTILE_ACCUMULATE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_percentile_combine)\n",
	"approx_percentile_estimate":             "```sql\nAPPROX_PERCENTILE_ESTIMATE( <state> , <percentile> )\n```\n```sql\n<state>```\nAn expression that contains state information generated\nby a call to APPROX_PERCENTILE_ACCUMULATE or\nAPPROX_PERCENTILE_COMBINE.\n```sql\n<percentile>```\nA constant real value greater than or equal to 0.0 and less than 1.0.\nThis indicates the percentile from 0 to 99.999… (e.g. the value 0.65 indicates the 65th percentile).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_percentile_estimate)\n",
	"approx_top_k":                           "```sql\nAPPROX_TOP_K( <expr> [ , <k> [ , <counters> ] ] )\n```\n```sql\n<expr4>```\nexpr: The expression (e.g. column name) for which you want to find\nthe most common values.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_top_k)\n",
	"approx_top_k_accumulate":                "```sql\nAPPROX_TOP_K_ACCUMULATE( <expr> , <counters> )\n```\n```sql\n<expr>```\nThe expression (e.g. column name) for which you want to find the most common values.\n```sql\n<counters>```\nThis is the maximum number of distinct values that can be tracked at a time during the estimation process.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_top_k_accumulate)\n",
	"approx_top_k_combine":                   "```sql\nAPPROX_TOP_K_COMBINE( <state> [ , <counters> ] )\n```\n```sql\n<state>```\nAn expression that contains state information generated\nby a call to APPROX_TOP_K_ACCUMULATE.\n```sql\n<counters>```\nThis is the maximum number of distinct values that\ncan be tracked at a time during the estimation process. For example, if\ncounters is set to 100000, then the algorithm tracks 100,000\ndistinct values, attempting to keep the 100,000 most frequent values.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_top_k_combine)\n",
	"approx_top_k_estimate":                  "```sql\nAPPROX_TOP_K_ESTIMATE( <state> [ , <k> ] )\n```\n```sql\n<state>```\nAn expression that contains state information generated\nby a call to APPROX_TOP_K_ACCUMULATE or\nAPPROX_TOP_K_COMBINE.\n```sql\n<k>```\nThe number of values whose counts you want approximated.\nFor example, if you want to see the top 10 most common values, then\nset k to 10.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approx_top_k_estimate)\n",
	"approximate_jaccard_index":              "```sql\nAPPROXIMATE_JACCARD_INDEX( [ DISTINCT ] <expr> [ , ... ] )\n\nAPPROXIMATE_JACCARD_INDEX(*)\n```\n```sql\n<expr>```\nThe expression(s) should be one or more MinHash states returned by calls to\nthe MINHASH function. In other words, the\nexpressions must be MinHash state information, not the column or\nexpression for which you want the approximate similarity. (The example below\nhelps make this clear.)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approximate_jaccard_index)\n",
	"approximate_similarity":                 "```sql\nAPPROXIMATE_SIMILARITY( [ DISTINCT ] <expr> [ , ... ] )\n\nAPPROXIMATE_SIMILARITY(*)\n```\n```sql\n<expr>```\nThe expression(s) should be one or more MinHash states returned by calls to\nthe MINHASH function. In other words, the\nexpressions must be MinHash state information, not the column or\nexpression for which you want the approximate similarity. (The example below\nhelps make this clear.)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/approximate_similarity)\n",
	"array_agg":                              "```sql\nARRAY_AGG( [ DISTINCT ] <expr1> ) [ WITHIN GROUP ( <orderby_clause> ) ]\n```\n```sql\n<expr1>```\nRequired:\n```sql\n<OVER()>```\nAn expression (typically a column name) that determines the values to be put into the array.\n```sql\n<DISTINCT>```\nThe OVER clause specifies that the function is being used as a window function.\nFor details, see Window function syntax and usage.\n```sql\n<WITHIN>```\nOptional:\n```sql\n<PARTITION>```\nRemoves duplicate values from the array.\n```sql\n<ORDER>```\nClause that contains one or more expressions (typically column names) that determine the order of the values in each array.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_agg)\n",
	"array_append":                           "```sql\nARRAY_APPEND( <array> , <new_element> )\n```\n```sql\n<array>```\nThe source array.\n```sql\n<new_element>```\nThe element to be appended. The type of the element depends on the type of the array:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_append)\n",
	"array_cat":                              "```sql\nARRAY_CAT( <array1> , <array2> )\n```\n```sql\n<array1>```\nThe source array.\n```sql\n<array2>```\nThe array to be appended to array1.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_cat)\n",
	"array_compact":                          "```sql\nARRAY_COMPACT( <array1> )\n```\n```sql\n<array1>```\nThe source array.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_compact)\n",
	"array_construct":                        "```sql\nARRAY_CONSTRUCT( [ <expr1> ] [ , <expr2> [ , ... ] ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_construct)\n",
	"array_construct_compact":                "```sql\nARRAY_CONSTRUCT_COMPACT( [ <expr1> ] [ , <expr2> [ , ... ] ] )\n```\n```sql\n<expr#>```\nThese are the input expressions to evaluate; the resulting values are put into the array.\nThe expressions do not all need to evaluate to the same data type.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_construct_compact)\n",
	"array_contains":                         "```sql\nARRAY_CONTAINS( <value_expr> , <array> )\n```\n```sql\n<value_expr>```\nValue to find in array.\n```sql\n<array>```\nIf array is a semi-structured array, value_expr must evaluate to a\nVARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_contains)\n",
	"array_distinct":                         "```sql\nARRAY_DISTINCT( <array> )\n```\n```sql\n<array>```\nAn array that might contain duplicate elements to be removed.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_distinct)\n",
	"array_except":                           "```sql\nARRAY_EXCEPT( <source_array> , <array_of_elements_to_exclude> )\n```\n```sql\n<source_array>```\nAn array that contains elements to be included in the new ARRAY.\n```sql\n<array_of_elements_to_exclude>```\nAn array that contains elements to be excluded from the new ARRAY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_except)\n",
	"array_flatten":                          "```sql\nARRAY_FLATTEN( <array> )\n```\n```sql\n<array>```\nThe ARRAY of ARRAYs to flatten.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_flatten)\n",
	"array_generate_range":                   "```sql\nARRAY_GENERATE_RANGE( <start> , <stop> [ , <step> ] )\n```\n```sql\n<start>```\nRequired:\n```sql\n<stop>```\nThe first number in the range of numbers to return.\n```sql\n<step>```\nYou must specify an expression that evaluates to an INTEGER value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_generate_range)\n",
	"array_insert":                           "```sql\nARRAY_INSERT( <array> , <pos> , <new_element> )\n```\n```sql\n<array>```\nThe source array.\n```sql\n<pos>```\nA (zero-based) position in the source array. The new element is inserted at this position. The original element from this position (if any) and all subsequent elements (if any) are shifted by\none position to the right in the resulting array (i.e. inserting at position 0 has the same effect as using ARRAY_PREPEND).\n```sql\n<new_element>```\nA negative position is interpreted as an index from the back of the array (e.g. -1 results in insertion before the last element in the array).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_insert)\n",
	"array_intersection":                     "```sql\nARRAY_INTERSECTION( <array1> , <array2> )\n```\n```sql\n<array1>```\nAn array that contains elements to be compared.\n```sql\n<array2>```\nAn array that contains elements to be compared.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_intersection)\n",
	"array_max":                              "```sql\nARRAY_MAX( <array> )\n```\n```sql\n<array>```\nThe input ARRAY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_max)\n",
	"array_min":                              "```sql\nARRAY_MIN( <array> )\n```\n```sql\n<array>```\nThe input ARRAY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_min)\n",
	"array_position":                         "```sql\nARRAY_POSITION( <variant_expr> , <array> )\n```\n```sql\n<value_expr>```\nValue to find in array.\n```sql\n<array>```\nIf array is a semi-structured ARRAY, value_expr must evaluate to a\nVARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_position)\n",
	"array_prepend":                          "```sql\nARRAY_PREPEND( <array> , <new_element> )\n```\n```sql\n<array>```\nThe source array.\n```sql\n<new_element>```\nThe element to be prepended.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_prepend)\n",
	"array_remove":                           "```sql\nARRAY_REMOVE( <array> , <value_of_elements_to_remove> )\n```\n```sql\n<array>```\nThe source array.\n```sql\n<value_of_elements_to_remove>```\nThe VARIANT value of the elements to be removed. The function removes elements equal to this value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_remove)\n",
	"array_remove_at":                        "```sql\nARRAY_REMOVE_AT( <array> , <position> )\n```\n```sql\n<array>```\nThe source array.\n```sql\n<position>```\nThe (zero-based) position of the element to be removed. The function removes the element at this position.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_remove_at)\n",
	"array_reverse":                          "```sql\nARRAY_REVERSE( <array> )\n```\n```sql\n<array>```\nThe source array.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_reverse)\n",
	"array_size":                             "```sql\nARRAY_SIZE( <array> )\n\nARRAY_SIZE( <variant> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_size)\n",
	"array_slice":                            "```sql\nARRAY_SLICE( <array> , <from> , <to> )\n```\n```sql\n<array>```\nThe source array of which a subset of the elements are used to construct the resulting array.\n```sql\n<from>```\nA position in the source array. The position of the first element is 0. Elements from positions less than from\naren’t included in the resulting array.\n```sql\n<to>```\nA position in the source array. Elements from positions equal to or greater than to are not included in\nthe resulting array.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_slice)\n",
	"array_sort":                             "```sql\nARRAY_SORT( <array> [ , <sort_ascending> [ , <nulls_first> ] ] )\n```\n```sql\n<array>```\nRequired\n```sql\n<sort_ascending>```\nThe ARRAY of elements to sort.\n```sql\n<nulls_first>```\nOptional\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_sort)\n",
	"array_to_string":                        "```sql\nARRAY_TO_STRING( <array> , <separator_string> )\n```\n```sql\n<array>```\nThe array of elements to convert to a string.\n```sql\n<separator_string>```\nThe string to put between each element, typically a space, comma, or other human-readable separator.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_to_string)\n",
	"array_union_agg":                        "```sql\nARRAY_UNION_AGG( <column> )\n```\n```sql\n<column>```\nThe column containing the ARRAYs with the distinct values (the ARRAYs produced by ARRAY_UNIQUE_AGG).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_union_agg)\n",
	"array_unique_agg":                       "```sql\nARRAY_UNIQUE_AGG( <column> )\n```\n```sql\n<column>```\nThe column containing the values.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/array_unique_agg)\n",
	"arrays_overlap":                         "```sql\nARRAYS_OVERLAP( <array1> , <array2> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/arrays_overlap)\n",
	"arrays_to_object":                       "```sql\nARRAYS_TO_OBJECT( <key_array> , <value_array> )\n```\n```sql\n<key_array>```\nARRAY of VARCHAR values that specify the keys for the new OBJECT.\n```sql\n<value_array>```\nARRAY of values for the new OBJECT. This ARRAY must be the same length as key_array. The values in this ARRAY should\ncorrespond to the keys in key_array.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/arrays_to_object)\n",
	"arrays_zip":                             "```sql\nARRAYS_ZIP( <array> [ , <array> ... ] )\n```\n```sql\n<array>```\nAn input array.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/arrays_zip)\n",
	"as_array":                               "```sql\nAS_ARRAY( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_array)\n",
	"as_binary":                              "```sql\nAS_BINARY( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_binary)\n",
	"as_boolean":                             "```sql\nAS_BOOLEAN( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_boolean)\n",
	"as_char-varchar":                        "```sql\nAS_CHAR( <variant_expr> )\n\nAS_VARCHAR( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_char)\n",
	"as_date":                                "```sql\nAS_DATE( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_date)\n",
	"as_decimal-number":                      "```sql\nAS_DECIMAL( <variant_expr> [ , <precision> [ , <scale> ] ] )\n\nAS_NUMBER( <variant_expr> [ , <precision> [ , <scale> ] ] )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n```sql\n<precision>```\nThe number of significant digits of the decimal number to store.\n```sql\n<scale>```\nThe default is 38.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_decimal)\n",
	"as_double-real":                         "```sql\nAS_DOUBLE( <variant_expr> )\n\nAS_REAL( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_double)\n",
	"as_integer":                             "```sql\nAS_INTEGER( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_integer)\n",
	"as_object":                              "```sql\nAS_OBJECT( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_object)\n",
	"as_time":                                "```sql\nAS_TIME( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_time)\n",
	"as_timestamp":                           "```sql\nAS_TIMESTAMP_LTZ( <variant_expr> )\n\nAS_TIMESTAMP_NTZ( <variant_expr> )\n\nAS_TIMESTAMP_TZ( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/as_timestamp)\n",
	"ascii":                                  "```sql\nASCII( <input> )\n```\n```sql\n<input>```\nThe string for which the ASCII code for the first character in the string is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ascii)\n",
	"asin":                                   "```sql\nASIN( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number greater than or equal\nto -1.0 and less than or equal to +1.0.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/asin)\n",
	"asinh":                                  "```sql\nASINH( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/asinh)\n",
	"atan":                                   "```sql\nATAN( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/atan)\n",
	"atan2":                                  "```sql\nATAN2( <y> , <x> )\n```\n```sql\n<y>```\nThis parameter is the Y coordinate of the point at the end of the ray. The data type is DOUBLE.\n```sql\n<x>```\nThis parameter is the X coordinate of the point at the end of the ray. The data type is DOUBLE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/atan2)\n",
	"atanh":                                  "```sql\nATANH( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number between -1.0 and +1.0\n(inclusive).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/atanh)\n",
	"auto_refresh_registration_history":      "```sql\nAUTO_REFRESH_REGISTRATION_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [, DATE_RANGE_END => <constant_expr> ]\n      [, OBJECT_TYPE => \"<string>\" [, OBJECT_NAME => \"<string>\"] ])\n```\n```sql\n<DATE_RANGE_START>```\nAll of the arguments are optional.\n```sql\n<OBJECT_TYPE>```\nThe date/time range of the billing window:\n```sql\n<DIRECTORY_TABLE>```\nIf an end date is not specified, then CURRENT_DATE is used as the end of the range.\n```sql\n<EXTERNAL_TABLE>```\nIf a start date is not specified, then the range starts 10 minutes prior to the start of DATE_RANGE_END (i.e. the default is to\nshow the previous 10 minutes of the billing history). For example, if DATE_RANGE_END is CURRENT_DATE, then the default\nDATE_RANGE_START is 11:50 PM on the previous day.\n```sql\n<OBJECT_NAME>```\nHistory is displayed in increments of 5 minutes, 1 hour, or 24 hours (depending on the length of the specified range).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/auto_refresh_registration_history)\n",
	"automatic_clustering_history":           "```sql\nAUTOMATIC_CLUSTERING_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [ , DATE_RANGE_END => <constant_expr> ]\n      [ , TABLE_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<TABLE_NAME>```\nThe date/time range to display the Automatic Clustering history.\nFor example, if you specify that the start date is 2019-04-03 and the end date is 2019-04-05, then you get data for\nApril 3, April 4, and April 5. (The endpoints are included.)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/automatic_clustering_history)\n",
	"available_listing_refresh_history":      "```sql\nAVAILABLE_LISTING_REFRESH_HISTORY(\n  OBJECT_TYPE => \"<object_type>\",\n  OBJECT_NAME => \"<object_name>\" )\n```\n```sql\n<OBJECT_TYPE>```\nType of the object, either listing or database.\n```sql\n<OBJECT_NAME>```\nName of the object, which can be either the listing’s global name or the mounted database name, depending on the object type.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/available_listing_refresh_history)\n",
	"avg":                                    "```sql\nAVG( [ DISTINCT ] <expr1> )\n```\n```sql\n<expr1>```\nThis is an expression that evaluates to a numeric data type (INTEGER, FLOAT, DECIMAL, etc.).\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the optional expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/avg)\n",
	"base64_decode_binary":                   "```sql\nBASE64_DECODE_BINARY( <input> [ , <alphabet> ] )\n```\n```sql\n<input>```\nRequired:\n```sql\n<alphabet>```\nA Base64-encoded string expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/base64_decode_binary)\n",
	"base64_decode_string":                   "```sql\nBASE64_DECODE_STRING( <input> [ , <alphabet> ] )\n```\n```sql\n<input>```\nRequired:\n```sql\n<alphabet>```\nA Base64-encoded string expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/base64_decode_string)\n",
	"base64_encode":                          "```sql\nBASE64_ENCODE( <input> [ , <max_line_length> ] [ , <alphabet> ] )\n```\n```sql\n<input>```\nRequired:\n```sql\n<max_line_length>```\nA string or binary expression to be encoded.\n```sql\n<alphabet>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/base64_encode)\n",
	"between":                                "```sql\n<expr> [ NOT ] BETWEEN <lower_bound> AND <upper_bound>\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/between)\n",
	"bit_length":                             "```sql\nBIT_LENGTH(<string_or_binary>)\n```\n```sql\n<string_or_binary>```\nThe string or binary value for which the length is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bit_length)\n",
	"bitand":                                 "```sql\nBITAND( <expr1> , <expr2> [ , \"<padside>\" ] )\n```\n```sql\n<expr1>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n```sql\n<expr2>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n```sql\n<\">```\nWhen two BINARY argument values are not the same length, specifies which side to pad the value\nwith the shorter length. Specify one of the following case-insensitive values:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitand)\n",
	"bitand_agg":                             "```sql\nBITAND_AGG( <expr1> )\n```\n```sql\n<expr1>```\nThis expression must evaluate to a numeric value or a value\nof a data type that can be cast to a numeric value.\n```sql\n<expr2>```\nThis expression is used to group the rows in partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitand_agg)\n",
	"bitmap_bit_position":                    "```sql\nBITMAP_BIT_POSITION( <numeric_expr> )\n```\n```sql\n<numeric_expr>```\nThis expression must evaluate to a data type that can be cast to NUMBER.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitmap_bit_position)\n",
	"bitmap_bucket_number":                   "```sql\nBITMAP_BUCKET_NUMBER( <numeric_expr> )\n```\n```sql\n<numeric_expr>```\nThis expression must evaluate to a data type that can be cast to NUMBER.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitmap_bucket_number)\n",
	"bitmap_construct_agg":                   "```sql\nBITMAP_CONSTRUCT_AGG( <relative_position> )\n```\n```sql\n<relative_position>```\nThe relative position of a bit for a value (returned by the BITMAP_BIT_POSITION function).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitmap_construct_agg)\n",
	"bitmap_count":                           "```sql\nBITMAP_COUNT( <bitmap> )\n```\n```sql\n<bitmap>```\nThis expression must evaluate to a bitmap returned by the BITMAP_CONSTRUCT_AGG or BITMAP_OR_AGG functions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitmap_count)\n",
	"bitmap_or_agg":                          "```sql\nBITMAP_OR_AGG( <bitmap> )\n```\n```sql\n<bitmap>```\nA bitmap returned by the BITMAP_CONSTRUCT_AGG or BITMAP_OR_AGG function.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitmap_or_agg)\n",
	"bitnot":                                 "```sql\nBITNOT( <expr> )\n```\n```sql\n<expr>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitnot)\n",
	"bitor":                                  "```sql\nBITOR( <expr1> , <expr2> [ , \"<padside>\" ] )\n```\n```sql\n<expr1>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n```sql\n<expr2>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n```sql\n<\">```\nWhen two BINARY argument values are not the same length, specifies which side to pad the value\nwith the shorter length. Specify one of the following case-insensitive values:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitor)\n",
	"bitor_agg":                              "```sql\nBITOR_AGG( <expr1> )\n```\n```sql\n<expr1>```\nThis expression must evaluate to a numeric value or a value\nof a data type that can be cast to a numeric value.\n```sql\n<expr2>```\nThis expression is used to group the rows in partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitor_agg)\n",
	"bitshiftleft":                           "```sql\nBITSHIFTLEFT( <expr1> , <n> )\n```\n```sql\n<expr1>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n```sql\n<n>```\nThe number of bits to shift by.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitshiftleft)\n",
	"bitshiftright":                          "```sql\nBITSHIFTRIGHT( <expr1> , <n> )\n```\n```sql\n<expr1>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n```sql\n<n>```\nThe number of bits to shift by.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitshiftright)\n",
	"bitxor":                                 "```sql\nBITXOR( <expr1> , <expr2> [ , \"<padside>\" ] )\n```\n```sql\n<expr1>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n```sql\n<expr2>```\nThis expression must evaluate to an INTEGER value, a BINARY value, or a value of a data type\nthat can be cast to an INTEGER value.\n```sql\n<\">```\nWhen two BINARY argument values are not the same length, specifies which side to pad the value\nwith the shorter length. Specify one of the following case-insensitive values:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitxor)\n",
	"bitxor_agg":                             "```sql\nBITXOR_AGG( [ DISTINCT ] <expr1> )\n```\n```sql\n<expr1>```\nThis expression must evaluate to a numeric value or a value\nof a data type that can be cast to a numeric value.\n```sql\n<expr2>```\nThis expression is used to group the rows in partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/bitxor_agg)\n",
	"booland":                                "```sql\nBOOLAND( expr1 , expr2 )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/booland)\n",
	"booland_agg":                            "```sql\nBOOLAND_AGG( <expr> )\n```\n```sql\n<expr>```\nThe input expression must be an expression that can be evaluated to a boolean or converted to a boolean.\n```sql\n<partition_expr>```\nThis column or expression specifies how to separate the input into partitions (sub-windows).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/booland_agg)\n",
	"boolnot":                                "```sql\nBOOLNOT( expr )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/boolnot)\n",
	"boolor":                                 "```sql\nBOOLOR( expr1 , expr2 )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/boolor)\n",
	"boolor_agg":                             "```sql\nBOOLOR_AGG( <expr> )\n```\n```sql\n<expr>```\nThe input expression must be an expression that can be evaluated to a boolean or converted to a boolean.\n```sql\n<partition_expr>```\nThis column or expression specifies how to separate the input into partitions (sub-windows).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/boolor_agg)\n",
	"boolxor":                                "```sql\nBOOLXOR( expr1 , expr2 )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/boolxor)\n",
	"boolxor_agg":                            "```sql\nBOOLXOR_AGG( <expr> )\n```\n```sql\n<expr>```\nThe input expression must be an expression that can be evaluated to a boolean or converted to a boolean.\n```sql\n<partition_expr>```\nThis column or expression specifies how to separate the input into partitions (sub-windows).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/boolxor_agg)\n",
	"build_scoped_file_url":                  "```sql\nBUILD_SCOPED_FILE_URL( @<stage_name> , \"<relative_file_path>\" )\n```\n```sql\n<stage_name>```\nName of the internal or external stage where the file is stored.\n```sql\n<relative_file_path>```\nNote\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/build_scoped_file_url)\n",
	"build_stage_file_url":                   "```sql\nBUILD_STAGE_FILE_URL( @<stage_name> , \"<relative_file_path>\" )\n```\n```sql\n<stage_name>```\nName of the internal or external stage where the file is stored.\n```sql\n<relative_file_path>```\nNote\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/build_stage_file_url)\n",
	"case":                                   "```sql\nCASE\n    WHEN <condition1> THEN <result1>\n  [ WHEN <condition2> THEN <result2> ]\n  [ ... ]\n  [ ELSE <result3> ]\nEND\n\nCASE <expr>\n    WHEN <value1> THEN <result1>\n  [ WHEN <value2> THEN <result2> ]\n  [ ... ]\n  [ ELSE <result3> ]\nEND\n```\n```sql\n<condition#>```\nIn the first form of CASE, each condition is an expression that\nshould evaluate to a BOOLEAN value (True, False, or NULL).\n```sql\n<expr>```\nA general expression.\n```sql\n<value>```\nIn the second form of CASE, each value is a potential match\nfor expr. The value can be a literal or an expression.\nThe value must be the same data type as the expr, or\nmust be a data type that can be cast to the data type of the expr.\n```sql\n<result#>```\nIn the first form of the CASE clause, if condition# is true,\nthen the function returns the corresponding result#. If more than\none condition is true, then the result associated with the first true\ncondition is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/case)\n",
	"cast":                                   "```sql\nCAST( <source_expr> AS <target_data_type> )\n  [ RENAME FIELDS | ADD FIELDS ]\n\n<source_expr> :: <target_data_type>\n```\n```sql\n<source_expr>```\nExpression of any supported data type to be converted into a\ndifferent data type.\n```sql\n<target_data_type>```\nThe data type to which to convert the expression. If the data\ntype supports additional properties, such as\nprecision and scale\n(for numbers/decimals), the properties can be included.\n```sql\n<RENAME>```\nFor structured OBJECTs, specifies that you want to change the OBJECT to use\ndifferent key-value pairs. The values in the original object are copied to the new key-value pairs in the order in which\nthey appear.\n```sql\n<ADD>```\nFor an example, see Example: Changing the key names in an OBJECT value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/cast)\n",
	"cbrt":                                   "```sql\nCBRT(expr)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/cbrt)\n",
	"ceil":                                   "```sql\nCEIL( <input_expr> [, <scale_expr> ] )\n```\n```sql\n<input_expr>```\nThe value or expression to operate on. The data type should be one of the numeric data types, such as FLOAT or NUMBER.\n```sql\n<scale_expr>```\nThe number of digits the output should include after the decimal point. The expression should evaluate to an\ninteger from -38 to +38.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ceil)\n",
	"charindex":                              "```sql\nCHARINDEX( <expr1>, <expr2> [ , <start_pos> ] )\n```\n```sql\n<expr1>```\nRequired:\n```sql\n<expr2>```\nA string or binary expression representing the value to look for.\n```sql\n<start_pos>```\nA string or binary expression representing the value to search.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/charindex)\n",
	"check_json":                             "```sql\nCHECK_JSON( <string_or_variant_expr> )\n```\n```sql\n<string_or_variant_expr>```\nA VARIANT or string value (or expression) to check.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/check_json)\n",
	"check_xml":                              "```sql\nCHECK_XML( <string_containing_xml> [ , <disable_auto_convert> ] )\n```\n```sql\n<string_containing_xml>```\nRequired:\n```sql\n<disable_auto_convert>```\nThis expression should evaluate to a VARCHAR. The VARCHAR should contain valid XML.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/check_xml)\n",
	"chr":                                    "```sql\nCHR( <input> )\n```\n```sql\n<input>```\nThe Unicode code point for which the character is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/chr)\n",
	"classify_text-snowflake-cortex":         "```sql\nSNOWFLAKE.CORTEX.CLASSIFY_TEXT( <input> , <list_of_categories>, [ <options> ] )\n```\n```sql\n<input>```\nRequired:\n```sql\n<list_of_categories>```\nString to classify. The input string is case sensitive. You may get different results for the same string that uses different\ncapitalization.\n```sql\n<options>```\nArray that represents the categories. Must contain at least two and at most 100 unique categories. Categories are case\nsensitive. If these requirements are not met, the function returns an error. For a full list of errors, see\nError conditions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/classify_text)\n",
	"coalesce":                               "```sql\nCOALESCE( <expr1> , <expr2> [ , ... , <exprN> ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/coalesce)\n",
	"collate":                                "```sql\nCOLLATE(<string_expression>, \"<collation_specification>\")\n```\n```sql\n<string_expression>```\nThe string to copy.\n```sql\n<collation_specification>```\nThe collation to store with the copy of the string. For more information about collation\nspecifiers, see Collation specifications.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/collate)\n",
	"collation":                              "```sql\nCOLLATION(<expression>)\n```\n```sql\n<expression>```\nThe expression for which you want to know the collation specification.\nTypically, this is a column name.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/collation)\n",
	"complete-snowflake-cortex":              "```sql\nSNOWFLAKE.CORTEX.COMPLETE(\n    <model>, <prompt_or_history> [ , <options> ] )\n```\n```sql\n<model>```\nRequired:\n```sql\n<prompt_or_history>```\nA string specifying the model to be used. Specify one of the following values.\n```sql\n<options>```\nclaude-3-5-sonnet\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/complete)\n",
	"complete_task_graphs":                   "```sql\nCOMPLETE_TASK_GRAPHS(\n      [ RESULT_LIMIT => <integer> ]\n      [, ROOT_TASK_NAME => \"<string>\" ]\n      [, ERROR_ONLY => { TRUE | FALSE } ] )\n```\n```sql\n<RESULT_LIMIT>```\nAll the arguments are optional.\n```sql\n<ROOT_TASK_NAME>```\nA number specifying the maximum number of rows returned by the function. Note that the results are returned in descending COMPLETED_TIME\norder. If the number of matching rows is greater than the result limit, the graph executions with the most recent completed timestamp are\nreturned, up to the specified limit.\n```sql\n<ERROR_ONLY>```\nRange: 1 to 10000\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/complete_task_graphs)\n",
	"compress":                               "```sql\nCOMPRESS(<input>, <method>)\n```\n```sql\n<input>```\nRequired:\n```sql\n<method>```\nA BINARY or string value (or expression) to be compressed.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/compress)\n",
	"concat":                                 "```sql\nCONCAT( <expr> [ , <expr> ... ] )\n\n<expr> || <expr> [ || <expr> ... ]\n```\n```sql\n<expr>```\nThe input expressions must all be strings, or all be binary values.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/concat)\n",
	"concat_ws":                              "```sql\nCONCAT_WS( <separator> , <expression1> [ , <expressionN> ... ] )\n```\n```sql\n<separator>```\nThe separator must meet the same requirements as expressionN.\n```sql\n<expressionN>```\nThe input expressions must all be strings, or all be binary values.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/concat_ws)\n",
	"conditional_change_event":               "```sql\nCONDITIONAL_CHANGE_EVENT( <expr1> ) OVER ( [ PARTITION BY <expr2> ] ORDER BY <expr3> )\n```\n```sql\n<expr1>```\nThis is an expression that gets compared with the expression of the previous row.\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/conditional_change_event)\n",
	"conditional_true_event":                 "```sql\nCONDITIONAL_TRUE_EVENT( <expr1> ) OVER ( [ PARTITION BY <expr2> ] ORDER BY <expr3> )\n```\n```sql\n<expr1>```\nThis is a boolean expression that changes the window event number value when it evaluates true.\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/conditional_true_event)\n",
	"contains":                               "```sql\nCONTAINS( <expr1> , <expr2> )\n```\n```sql\n<expr1>```\nThe string to search in.\n```sql\n<expr2>```\nThe string to search for.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/contains)\n",
	"convert_timezone":                       "```sql\nCONVERT_TIMEZONE( <source_tz> , <target_tz> , <source_timestamp_ntz> )\n\nCONVERT_TIMEZONE( <target_tz> , <source_timestamp> )\n```\n```sql\n<source_tz>```\nString specifying the time zone for the input timestamp. Required for timestamps with no time zone (i.e. TIMESTAMP_NTZ).\n```sql\n<target_tz>```\nString specifying the time zone to which the input timestamp is converted.\n```sql\n<source_timestamp_ntz>```\nFor the 3-argument version, string specifying the timestamp to convert (must be TIMESTAMP_NTZ).\n```sql\n<source_timestamp>```\nFor the 2-argument version, string specifying the timestamp to convert (can be any timestamp variant, including TIMESTAMP_NTZ).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/convert_timezone)\n",
	"copy_history":                           "```sql\nCOPY_HISTORY(\n      TABLE_NAME => \"<string>\"\n       , START_TIME => <constant_expr>\n      [, END_TIME => <constant_expr> ] )\n```\n```sql\n<TABLE_NAME>```\nRequired:\n```sql\n<START_TIME>```\nA string specifying a table name.\n```sql\n<END_TIME>```\nTimestamp (in TIMESTAMP_LTZ format), within the last 14 days, marking the start of the time range for retrieving load events.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/copy_history)\n",
	"corr":                                   "```sql\nCORR( y , x )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/corr)\n",
	"cortex_search_data_scan":                "```sql\nCORTEX_SEARCH_DATA_SCAN(\n      SERVICE_NAME => \"<string>\" )\n```\n```sql\n<SERVICE_NAME>```\nRequired:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/cortex_search_data_scan)\n",
	"cos":                                    "```sql\nCOS( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number. The value should be in\nradians, not degrees.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/cos)\n",
	"cosh":                                   "```sql\nCOSH( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/cosh)\n",
	"cot":                                    "```sql\nCOT( <real_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/cot)\n",
	"count":                                  "```sql\nCOUNT( [ DISTINCT ] <expr1> [ , <expr2> ... ] )\n\nCOUNT(*)\n\nCOUNT(<alias>.*)\n```\n```sql\n<expr1>```\nA column name, which can be a qualified name (for example, database.schema.table.column_name).\n```sql\n<expr2>```\nYou can include additional column name(s) if you wish. For example, you\ncould count the number of distinct combinations of last name and first name.\n```sql\n<expr3>```\nThe column to partition on, if you want the result to be split into multiple\nwindows.\n```sql\n<expr4>```\nThe column to order each window on. Note that this is separate from any\nORDER BY clause to order the final result set.\n```sql\n<*>```\nReturns the total number of records.\n```sql\n<alias>```\nWhen you pass a wildcard to the function, you can qualify the wildcard with the name or alias for the table.\nFor example, to pass in all of the columns from the table named mytable, specify the following:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/count)\n",
	"count_if":                               "```sql\nCOUNT_IF( <condition> )\n```\n```sql\n<condition>```\nThe condition is an expression that should evaluate to a BOOLEAN value (True, False, or NULL)\n```sql\n<expr1>```\nThe column to partition on, if you want the result to be split into multiple\nwindows.\n```sql\n<expr2>```\nThe column to order each window on. Note that this is separate from the ORDER BY clause that sorts the final result set.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/count_if)\n",
	"count_tokens-snowflake-cortex":          "```sql\nSNOWFLAKE.CORTEX.COUNT_TOKENS( <model_name> , <input_text> )\n\nSNOWFLAKE.CORTEX.COUNT_TOKENS( <function_name> , <input_text> )\n```\n```sql\n<model_name>```\nRequired:\n```sql\n<function_name>```\nName of the model you want to base the token count on. Specify one of the following values:\n```sql\n<input_text>```\nsnowflake-arctic\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/count_tokens)\n",
	"covar_pop":                              "```sql\nCOVAR_POP( y , x )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/covar_pop)\n",
	"covar_samp":                             "```sql\nCOVAR_SAMP( y , x )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/covar_samp)\n",
	"cume_dist":                              "```sql\nCUME_DIST() OVER ( [ PARTITION BY <partition_expr> ] ORDER BY <order_expr>  [ ASC | DESC ] )\n```\n```sql\n<partition_expr>```\nThis is the optional expression to use to group rows into partitions.\n```sql\n<order_expr>```\nThis expression specifies the order of the rows within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/cume_dist)\n",
	"cumulative_privacy_losses":              "```sql\nSNOWFLAKE.DATA_PRIVACY.CUMULATIVE_PRIVACY_LOSSES( \"<privacy_policy>\" )\n```\n```sql\n<\">```\nSpecifies the fully-qualified name of the privacy policy. A privacy policy is a schema-level object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/cumulative_privacy_losses)\n",
	"current_account":                        "```sql\nCURRENT_ACCOUNT()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_account)\n",
	"current_account_name":                   "```sql\nCURRENT_ACCOUNT_NAME()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_account_name)\n",
	"current_available_roles":                "```sql\nCURRENT_AVAILABLE_ROLES()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_available_roles)\n",
	"current_client":                         "```sql\nCURRENT_CLIENT()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_client)\n",
	"current_database":                       "```sql\nCURRENT_DATABASE()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_database)\n",
	"current_date":                           "```sql\nCURRENT_DATE()\n\nCURRENT_DATE\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_date)\n",
	"current_ip_address":                     "```sql\nCURRENT_IP_ADDRESS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_ip_address)\n",
	"current_organization_name":              "```sql\nCURRENT_ORGANIZATION_NAME()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_organization_name)\n",
	"current_region":                         "```sql\nCURRENT_REGION()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_region)\n",
	"current_role":                           "```sql\nCURRENT_ROLE()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_role)\n",
	"current_role_type":                      "```sql\nCURRENT_ROLE_TYPE()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_role_type)\n",
	"current_schema":                         "```sql\nCURRENT_SCHEMA()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_schema)\n",
	"current_schemas":                        "```sql\nCURRENT_SCHEMAS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_schemas)\n",
	"current_secondary_roles":                "```sql\nCURRENT_SECONDARY_ROLES()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_secondary_roles)\n",
	"current_session":                        "```sql\nCURRENT_SESSION()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_session)\n",
	"current_statement":                      "```sql\nCURRENT_STATEMENT()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_statement)\n",
	"current_task_graphs":                    "```sql\nCURRENT_TASK_GRAPHS(\n      [ RESULT_LIMIT => <integer> ]\n      [, ROOT_TASK_NAME => \"<string>\" ] )\n```\n```sql\n<RESULT_LIMIT>```\nAll the arguments are optional.\n```sql\n<ROOT_TASK_NAME>```\nA number specifying the maximum number of rows returned by the function. Note that the results are returned in descending SCHEDULED_TIME\norder. If the number of matching rows is greater than the result limit, the graph executions with the most recent scheduled timestamp are\nreturned, up to the specified limit.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_task_graphs)\n",
	"current_time":                           "```sql\nCURRENT_TIME( [ <fract_sec_precision> ] )\n\nCURRENT_TIME\n```\n```sql\n<fract_sec_precision>```\nThis optional argument indicates the precision with which to report the\ntime. For example, a value of 3 says to use 3 digits after the decimal\npoint (i.e. to specify the time with a precision of milliseconds).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_time)\n",
	"current_timestamp":                      "```sql\nCURRENT_TIMESTAMP( [ <fract_sec_precision> ] )\n\nCURRENT_TIMESTAMP\n```\n```sql\n<fract_sec_precision>```\nThis optional argument indicates the precision with which to report the\ntime. For example, a value of 3 says to use 3 digits after the decimal\npoint (i.e. to specify the time with a precision of milliseconds).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_timestamp)\n",
	"current_transaction":                    "```sql\nCURRENT_TRANSACTION()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_transaction)\n",
	"current_user":                           "```sql\nCURRENT_USER()\n\nCURRENT_USER\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_user)\n",
	"current_version":                        "```sql\nCURRENT_VERSION()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_version)\n",
	"current_warehouse":                      "```sql\nCURRENT_WAREHOUSE()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/current_warehouse)\n",
	"data_metric_function_references":        "```sql\nDATA_METRIC_FUNCTION_REFERENCES(\n  METRIC_NAME => \"<string>\" )\n\nDATA_METRIC_FUNCTION_REFERENCES(\n  REF_ENTITY_NAME => \"<string>\" ,\n  REF_ENTITY_DOMAIN => \"<string>\"\n  )\n```\n```sql\n<METRIC_NAME>```\nSpecifies the name of the data metric function.\n```sql\n<REF_ENTITY_NAME>```\nThe entire data metric name must be enclosed in single quotes.\n```sql\n<REF_ENTITY_DOMAIN>```\nIf the data metric name is case-sensitive or includes any special characters or spaces, double quotes are required to process the\ncase/characters. The double quotes must be enclosed within the single quotes, such as \"\"<metric_name>\"\".\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/data_metric_function_references)\n",
	"data_quality_monitoring_results":        "```sql\nDATA_QUALITY_MONITORING_RESULTS(\n  REF_ENTITY_NAME => \"<string>\" ,\n  REF_ENTITY_DOMAIN => \"<string>\"\n  )\n```\n```sql\n<REF_ENTITY_NAME>```\nThe name of the table object on which the data metric function is set.\n```sql\n<REF_ENTITY_DOMAIN>```\nThe entire object name must be enclosed in single quotes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/data_quality_monitoring_results)\n",
	"data_transfer_history":                  "```sql\nDATA_TRANSFER_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [, DATE_RANGE_END => <constant_expr> ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/data_transfer_history)\n",
	"database_refresh_history":               "```sql\nDATABASE_REFRESH_HISTORY( \"<secondary_db_name>\" )\n```\n```sql\n<secondary_db_name>```\nName of the secondary database. This argument is optional if the secondary database is the active database in the current session.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/database_refresh_history)\n",
	"database_refresh_progress":              "```sql\nDATABASE_REFRESH_PROGRESS( \"<secondary_db_name>\" )\n\nDATABASE_REFRESH_PROGRESS_BY_JOB( \"<query_id>\" )\n```\n```sql\n<secondary_db_name>```\nName of the secondary database. This argument is optional if the secondary database is the active database in the current session.\n```sql\n<query_id>```\nNote that the entire name must be enclosed in single quotes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/database_refresh_progress)\n",
	"database_replication_usage_history":     "```sql\nDATABASE_REPLICATION_USAGE_HISTORY(\n  [ DATE_RANGE_START => <constant_expr> ]\n  [ , DATE_RANGE_END => <constant_expr> ]\n  [ , DATABASE_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<DATABASE_NAME>```\nThe date/time range to display the database replication history:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/database_replication_usage_history)\n",
	"database_storage_usage_history":         "```sql\nDATABASE_STORAGE_USAGE_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [, DATE_RANGE_END => <constant_expr> ]\n      [, DATABASE_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<DATABASE_NAME>```\nThe date range, within the last 6 months, for which to retrieve database storage usage:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/database_storage_usage_history)\n",
	"date_from_parts":                        "```sql\nDATE_FROM_PARTS( <year>, <month>, <day> )\n```\n```sql\n<year>```\nThe integer expression to use as a year for building a date.\n```sql\n<month>```\nThe integer expression to use as a month for building a date, with\nJanuary represented as 1, and December as 12.\n```sql\n<day>```\nThe integer expression to use as a day for building a date, usually in\nthe 1-31 range.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/date_from_parts)\n",
	"date_part":                              "```sql\nDATE_PART( <date_or_time_part> , <date_or_timestamp_expr> )\n```\n```sql\n<date_or_time_part>```\nThe unit of time. Must be one of the values listed in Supported date and time parts (e.g. month).\nThe value can be a string literal or can be unquoted (e.g. \"month\" or month).\n```sql\n<date_or_timestamp_expr>```\nWhen date_or_time_part is week (or any of its variations), the output is controlled by the WEEK_START session parameter.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/date_part)\n",
	"date_trunc":                             "```sql\nDATE_TRUNC( <date_or_time_part>, <date_or_time_expr> )\n```\n```sql\n<date_or_time_part>```\nThis argument must be one of the values listed in Supported date and time parts.\n```sql\n<date_or_time_expr>```\nThis argument must evaluate to a date, time, or timestamp.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/date_trunc)\n",
	"dateadd":                                "```sql\nDATEADD( <date_or_time_part>, <value>, <date_or_time_expr> )\n```\n```sql\n<date_or_time_part>```\nThis indicates the units of time that you want to add. For example if you\nwant to add two days, then specify day. This unit of measure must\nbe one of the values listed in Supported date and time parts.\n```sql\n<value>```\nThis is the number of units of time that you want to add. For example,\nif the units of time is day, and you want to add two days, specify 2.\nIf you want to subtract two days, specify -2.\n```sql\n<date_or_time_expr>```\ndate_or_time_expr must evaluate to a date, time, or timestamp.\nThis is the date, time, or timestamp to which you want to add.\nFor example, if you want to add two days to August 1, 2024, then specify\n\"2024-08-01\"::DATE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dateadd)\n",
	"datediff":                               "```sql\nDATEDIFF( <date_or_time_part>, <date_or_time_expr1>, <date_or_time_expr2> )\n```\n```sql\n<date_or_time_part>```\nFor DATEDIFF:\n```sql\n<date_or_time_expr1>```\nThe unit of time. Must be one of the values listed in Supported date and time parts (for example, month).\nThe value can be a string literal or can be unquoted (for example, \"month\" or month).\n```sql\n<date_expr1>```\nThe values to compare. Must be a date, a time, a timestamp, or an expression that can be evaluated to\na date, a time, or a timestamp. The value date_or_time_expr1 is subtracted from\ndate_or_time_expr2.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/datediff)\n",
	"dayname":                                "```sql\nDAYNAME( <date_or_timestamp_expr> )\n```\n```sql\n<date_or_timestamp_expr>```\nA date, a time, a timestamp, or an expression that can be evaluated to\na date, a time, or a timestamp.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dayname)\n",
	"decode":                                 "```sql\nDECODE( <expr> , <search1> , <result1> [ , <search2> , <result2> ... ] [ , <default> ] )\n```\n```sql\n<expr>```\nThis is the “select expression”. The “search expressions” are compared to\nthis select expression, and if there is a match then DECODE\nreturns the result that corresponds to that search expression. The select\nexpression is typically a column, but can be a subquery, literal, or other\nexpression.\n```sql\n<searchN>```\nThe search expressions indicate the values to compare to the select\nexpression. If one of these search expressions matches, the function returns\nthe corresponding result. If more than one search expression would\nmatch, only the first match’s result is returned.\n```sql\n<resultN>```\nThe results are the values that will be returned if one of the search\nexpressions matches the select expression.\n```sql\n<default>```\nIf an optional default is specified, and if none of the search expressions\nmatch the select expression, then DECODE returns this default value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/decode)\n",
	"decompress_binary":                      "```sql\nDECOMPRESS_BINARY(<input>, <method>)\n```\n```sql\n<input>```\nRequired:\n```sql\n<method>```\nA BINARY value (or expression) with data that was compressed using one\nof the compression methods specified in COMPRESS.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/decompress_binary)\n",
	"decompress_string":                      "```sql\nDECOMPRESS_STRING(<input>, <method>)\n```\n```sql\n<input>```\nRequired:\n```sql\n<method>```\nA BINARY value (or expression) with data that was compressed using one\nof the compression methods specified in COMPRESS.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/decompress_string)\n",
	"decrypt":                                "```sql\nDECRYPT( <value_to_decrypt> , <passphrase> ,\n         [ [ <additional_authenticated_data> , ] <encryption_method> ]\n       )\n```\n```sql\n<value_to_decrypt>```\nRequired:\n```sql\n<passphrase>```\nThe BINARY value to decrypt.\n```sql\n<additional_authenticated_data>```\nThe passphrase to use to encrypt/decrypt the data. The passphrase is a VARCHAR.\n```sql\n<encryption_method>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/decrypt)\n",
	"decrypt_raw":                            "```sql\nDECRYPT_RAW( <value_to_decrypt> , <key> , <iv> ,\n         [ [ [ <additional_authenticated_data> , ] <encryption_method> , ] <aead_tag> ]\n       )\n```\n```sql\n<value_to_decrypt>```\nRequired:\n```sql\n<key>```\nThe binary value to decrypt.\n```sql\n<iv>```\nThe key to use to encrypt/decrypt the data. The key must be a BINARY value. The key can be any value as long as the\nlength is correct. For example, for AES128, the key must be 128 bits (16 bytes), and for AES256, the key must be\n256 bits (32 bytes).\n```sql\n<additional_authenticated_data>```\nThe key used to encrypt the value must be used to decrypt the value.\n```sql\n<encryption_method>```\nThis parameter contains the Initialization Vector (IV) to use to encrypt and decrypt this piece of\ndata. The IV must be a BINARY value of a specific length:\n```sql\n<aead_tag>```\nFor GCM, this field must be 96 bits (12 bytes). While the GCM encryption method allows this field to be a different\nsize, Snowflake currently only supports 96 bits.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/decrypt_raw)\n",
	"degrees":                                "```sql\nDEGREES( <real_expr> )\n```\n```sql\n<real_expr>```\nAn expression representing the number of radians.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/degrees)\n",
	"dense_rank":                             "```sql\nDENSE_RANK() OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ ASC | DESC ] [ <window_frame> ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dense_rank)\n",
	"div0":                                   "```sql\nDIV0( <dividend> , <divisor> )\n```\n```sql\n<dividend>```\nNumeric expression that evaluates to the value that you want to divide.\n```sql\n<divisor>```\nNumeric expression that evaluates to the value that you want to divide by.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/div0)\n",
	"div0null":                               "```sql\nDIV0NULL( <dividend> , <divisor> )\n```\n```sql\n<dividend>```\nNumeric expression that evaluates to the value that you want to divide.\n```sql\n<divisor>```\nNumeric expression that evaluates to the value that you want to divide by.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/div0null)\n",
	"dmf_avg":                                "```sql\nSNOWFLAKE.CORE.AVG(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_avg)\n",
	"dmf_blank_count":                        "```sql\nSNOWFLAKE.CORE.BLANK_COUNT(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_blank_count)\n",
	"dmf_blank_percent":                      "```sql\nSNOWFLAKE.CORE.BLANK_PERCENT(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_blank_percent)\n",
	"dmf_data_metric_schedule_time":          "```sql\nSNOWFLAKE.CORE.DATA_METRIC_SCHEDULED_TIME()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_data_metric_schedule_time)\n",
	"dmf_duplicate_count":                    "```sql\nSNOWFLAKE.CORE.DUPLICATE_COUNT(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_duplicate_count)\n",
	"dmf_freshness":                          "```sql\nSNOWFLAKE.CORE.FRESHNESS(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_freshness)\n",
	"dmf_max":                                "```sql\nSNOWFLAKE.CORE.MAX(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_max)\n",
	"dmf_min":                                "```sql\nSNOWFLAKE.CORE.MIN(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_min)\n",
	"dmf_null_count":                         "```sql\nSNOWFLAKE.CORE.NULL_COUNT(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_null_count)\n",
	"dmf_null_percent":                       "```sql\nSNOWFLAKE.CORE.NULL_PERCENT(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_null_percent)\n",
	"dmf_stddev":                             "```sql\nSNOWFLAKE.CORE.STDEV(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_stddev)\n",
	"dmf_unique_count":                       "```sql\nSNOWFLAKE.CORE.UNIQUE_COUNT(<query>)\n```\n```sql\n<query>```\nSpecifies a SQL query on a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dmf_unique_count)\n",
	"dp_interval_high":                       "```sql\nDP_INTERVAL_HIGH( <aggregated_column> )\n```\n```sql\n<aggregated_column>```\nAlias of a column that has been aggregated by the query.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dp_interval_high)\n",
	"dp_interval_low":                        "```sql\nDP_INTERVAL_LOW( <aggregated_column> )\n```\n```sql\n<aggregated_column>```\nAlias of a column that has been aggregated by the query.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dp_interval_low)\n",
	"dynamic_table_graph_history":            "```sql\nDYNAMIC_TABLE_GRAPH_HISTORY(\n  [ AS_OF => <constant_expr> ]\n  [ , HISTORY_START => <constant_expr> [ , HISTORY_END => <constant_expr> ] ]\n)\n```\n```sql\n<AS_OF>```\nAll arguments are optional. If no arguments are provided, only the most recent description of existing dynamic tables are returned. Specify constant_expr in TIMESTAMP_LTZ format.\n```sql\n<HISTORY_START>```\nTime at which to return the state of the graph. You can specify a time that corresponds to a value in\nthe REFRESH_VERSION column in the output of the DYNAMIC_TABLE_REFRESH_HISTORY function.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dynamic_table_graph_history)\n",
	"dynamic_table_refresh_history":          "```sql\nDYNAMIC_TABLE_REFRESH_HISTORY(\n  [ DATA_TIMESTAMP_START => <constant_expr> ]\n  [ , DATA_TIMESTAMP_END => <constant_expr> ]\n  [ , RESULT_LIMIT => <integer> ]\n  [ , NAME => \"<string>\" ]\n  [ , NAME_PREFIX => \"<string>\" ]\n  [ , ERROR_ONLY => { TRUE | FALSE } ]\n)\n```\n```sql\n<DATA_TIMESTAMP_START>```\nAll the arguments are optional.\nIf no arguments are provided, 100 refreshes from all dynamic tables in the account will be returned.\n```sql\n<RESULT_LIMIT>```\nTime range (in TIMESTAMP_LTZ format) during which the refreshes occurred.\n```sql\n<NAME>```\nIf neither a start version nor an end version is specified, the default range will be the past day.\n```sql\n<NAME_PREFIX>```\nIf an end version is not specified, CURRENT_TIMESTAMP is used as the end of the range.\n```sql\n<ERROR_ONLY>```\nIf a start version is not specified, the range starts 1 day prior to the start of DATE_TIMESTAMP_END.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dynamic_table_refresh_history)\n",
	"dynamic_tables":                         "```sql\nDYNAMIC_TABLES (\n  [ NAME => \"<string>\" ]\n  [ , REFRESH_DATA_TIMESTAMP_START => <constant_expr> ]\n  [ , RESULT_LIMIT => <integer> ]\n  [ , INCLUDE_CONNECTED => { TRUE | FALSE } ]\n)\n```\n```sql\n<NAME>```\nAll the arguments are optional.\nIf no arguments are provided, 100 refreshes from all dynamic tables in the account will be returned.\n```sql\n<REFRESH_DATA_TIMESTAMP_START>```\nThe name of a dynamic table.\n```sql\n<RESULT_LIMIT>```\nNames must be single-quoted and are case insensitive.\n```sql\n<INCLUDE_CONNECTED>```\nYou can specify the unqualified name (dynamic_table_name),\nthe partially qualified name (schema_name.dynamic_table_name),\nor the fully qualified name (database_name.schema_name.dynamic_table_name).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/dynamic_tables)\n",
	"editdistance":                           "```sql\nEDITDISTANCE( <string_expr1> , <string_expr2> [ , <max_distance> ] )\n```\n```sql\n<string_expr1>```\nRequired:\n```sql\n<max_distance>```\nThe input strings.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/editdistance)\n",
	"email_integration_config":               "```sql\nSNOWFLAKE.NOTIFICATION.EMAIL_INTEGRATION_CONFIG(\n  \"<email_integration_name>\",\n  \"<subject>\",\n  <array_of_email_addresses_for_to_line> )\n```\n```sql\n<\">```\nName of the email notification integration to use.\n```sql\n<\">```\nSubject of the email message.\n```sql\n<array_of_email_addresses_for_to_line>```\nThe subject cannot exceed 256 characters in length.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/email_integration_config)\n",
	"embed_text-snowflake-cortex":            "```sql\nSNOWFLAKE.CORTEX.EMBED_TEXT_768( <model>, <text> )\n```\n```sql\n<model>```\nA string specifying the vector embedding model to be used to generate the embedding. This must be one of the following values.\n```sql\n<text>```\nsnowflake-arctic-embed-m-v1.5\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/embed_text)\n",
	"embed_text_1024-snowflake-cortex":       "```sql\nSNOWFLAKE.CORTEX.EMBED_TEXT_1024( <model>, <text> )\n```\n```sql\n<model>```\nA string specifying the vector embedding model to be used to generate the embedding. This must be one of the following values.\n```sql\n<text>```\nsnowflake-arctic-embed-l-v2.0\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/embed_text_1024)\n",
	"encrypt":                                "```sql\nENCRYPT( <value_to_encrypt> , <passphrase> ,\n         [ [ <additional_authenticated_data> , ] <encryption_method> ]\n       )\n```\n```sql\n<value_to_encrypt>```\nRequired:\n```sql\n<passphrase>```\nThe VARCHAR or BINARY value to encrypt.\n```sql\n<additional_authenticated_data>```\nThe passphrase to use to encrypt/decrypt the data. The passphrase is always a VARCHAR, regardless of whether the\nvalue_to_encrypt is VARCHAR or BINARY.\n```sql\n<encryption_method>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/encrypt)\n",
	"encrypt_raw":                            "```sql\nENCRYPT_RAW( <value_to_encrypt> , <key> , <iv> ,\n         [ [ <additional_authenticated_data> , ] <encryption_method> ]\n       )\n```\n```sql\n<value_to_encrypt>```\nRequired:\n```sql\n<key>```\nThe binary value to encrypt.\n```sql\n<iv>```\nThe key to use to encrypt/decrypt the data. The key must be a BINARY value. The key can be any value as long as the\nlength is correct. For example, for AES128, the key must be 128 bits (16 bytes), and for AES256, the key must be\n256 bits (32 bytes).\n```sql\n<additional_authenticated_data>```\nThe key used to encrypt the value must be used to decrypt the value.\n```sql\n<encryption_method>```\nThis parameter contains the Initialization Vector (IV) to use to encrypt and decrypt this piece of\ndata. The IV must be a BINARY value of a specific length:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/encrypt_raw)\n",
	"endswith":                               "```sql\nENDSWITH( <expr1> , <expr2> )\n```\n```sql\n<expr1>```\nThe string to search in.\n```sql\n<expr2>```\nThe string to search for at the end of expr1.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/endswith)\n",
	"equal_null":                             "```sql\nEQUAL_NULL( <expr1> , <expr2> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/equal_null)\n",
	"estimate_remaining_dp_aggregates":       "```sql\nSNOWFLAKE.DATA_PRIVACY.ESTIMATE_REMAINING_DP_AGGREGATES(\"<table_name>\")\n```\n```sql\n<table_name>```\nThe name of the table protected by a differential privacy policy. The function returns privacy budget data based on the queries that you\nhave run against this table since the last budget refresh.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/estimate_remaining_dp_aggregates)\n",
	"exp":                                    "```sql\nEXP( <real_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/exp)\n",
	"explain_json":                           "```sql\nEXPLAIN_JSON( <explain_output_in_json_format> )\n```\n```sql\n<explain_output_in_json_format>```\nA string, or an expression that evaluates to a string, containing EXPLAIN output as a JSON-compatible string.\nTypically, this input is the output of the function SYSTEM$EXPLAIN_PLAN_JSON.\nIf a literal string is used, it should be surrounded by single quote characters \".\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/explain_json)\n",
	"external_functions_history":             "```sql\nEXTERNAL_FUNCTIONS_HISTORY(\n      [ DATE_RANGE_START => <constant_date_expression> ]\n      [, DATE_RANGE_END => <constant_date_expression> ]\n      [, FUNCTION_SIGNATURE => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<FUNCTION_SIGNATURE>```\nThe date/time range, within the last 2 weeks, for which to retrieve the history:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/external_functions_history)\n",
	"external_table_files":                   "```sql\nEXTERNAL_TABLE_FILES(\n      TABLE_NAME => \"<string>\" )\n```\n```sql\n<TABLE_NAME>```\nRequired:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/external_table_files)\n",
	"external_table_registration_history":    "```sql\nEXTERNAL_TABLE_FILE_REGISTRATION_HISTORY (\n      TABLE_NAME => \"<string>\"\n      [, START_TIME => <constant_expr> ] )\n```\n```sql\n<TABLE_NAME>```\nRequired:\n```sql\n<START_TIME>```\nA string specifying an external table name.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/external_table_registration_history)\n",
	"extract":                                "```sql\nEXTRACT( <date_or_time_part> FROM <date_or_time_expr> )\n```\n```sql\n<date_or_time_part>```\nThe unit of time. Must be one of the values listed in Supported date and time parts (e.g. month).\nThe value can be a string literal or can be unquoted (e.g. \"month\" or month).\n```sql\n<date_or_timestamp_expr>```\nWhen date_or_time_part is week (or any of its variations), the output is controlled by the WEEK_START session parameter.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/extract)\n",
	"extract_answer-snowflake-cortex":        "```sql\nSNOWFLAKE.CORTEX.EXTRACT_ANSWER(\n    <source_document>, <question>)\n```\n```sql\n<source_document>```\nA string containing the plain-text or JSON document that contains the answer to the question.\n```sql\n<question>```\nA string containing the question to be answered.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/extract_answer)\n",
	"extract_semantic_categories":            "```sql\nEXTRACT_SEMANTIC_CATEGORIES( \"<object_name>\" [ , <max_rows_to_scan> ] )\n```\n```sql\n<object_name>```\nRequired:\n```sql\n<max_rows_to_scan>```\nThe name of the table, external table, view, or materialized view containing the columns to be classified. If a database and\nschema is not in use in the current session, the name must be fully-qualified.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/extract_semantic_categories)\n",
	"factorial":                              "```sql\nFACTORIAL( <integer_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/factorial)\n",
	"filter":                                 "```sql\nFILTER( <array> , <lambda_expression> )\n```\n```sql\n<array>```\nThe array that contains the elements to be filtered. The array can be semi-structured or structured.\n```sql\n<lambda_expression>```\nA lambda expression that defines the filter\ncondition on each array element.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/filter)\n",
	"finetune-cancel":                        "```sql\nSNOWFLAKE.CORTEX.FINETUNE(\n  \"CANCEL\",\n  \"<finetune_job_id>\"\n)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/finetune)\n",
	"finetune-create":                        "```sql\nSNOWFLAKE.CORTEX.FINETUNE(\n  \"CREATE\",\n  \"<name>\",\n  \"<base_model>\",\n  \"<training_data_query>\"\n  [\n    , \"<validation_data_query>\"\n    [, \"<options>\" ]\n  ]\n)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/finetune)\n",
	"finetune-describe":                      "```sql\nSNOWFLAKE.CORTEX.FINETUNE(\n  \"DESCRIBE\",\n  \"<finetune_job_id>\"\n)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/finetune)\n",
	"finetune-show":                          "```sql\nSNOWFLAKE.CORTEX.FINETUNE(\"SHOW\")\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/finetune)\n",
	"finetune-snowflake-cortex":              "```sql\nFINETUNE (\n  { \"CREATE\" | \"SHOW\" | \"DESCRIBE\" | \"CANCEL\" }\n  ...\n  )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/finetune)\n",
	"first_value":                            "```sql\nFIRST_VALUE( <expr> ) [ { IGNORE | RESPECT } NULLS ]\n  OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2>  [ { ASC | DESC } ] [ <window_frame> ] )\n```\n```sql\n<expr>```\nThe expression that determines the return value.\n```sql\n<expr1>```\nThe expression by which to partition the rows. You can specify a single expression or a comma-separated list of expressions.\nFor example:\n```sql\n<expr2>```\nThe expression by which to order the rows. You can specify a single expression or a comma-separated list of expressions.\nFor example:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/first_value)\n",
	"flatten":                                "```sql\nFLATTEN( INPUT => <expr> [ , PATH => <constant_expr> ]\n                         [ , OUTER => TRUE | FALSE ]\n                         [ , RECURSIVE => TRUE | FALSE ]\n                         [ , MODE => \"OBJECT\" | \"ARRAY\" | \"BOTH\" ] )\n```\n```sql\n<INPUT>```\nRequired:\n```sql\n<PATH>```\nThe expression that will be unseated into rows. The expression must be of data type VARIANT, OBJECT, or ARRAY.\n```sql\n<OUTER>```\nOptional:\n```sql\n<RECURSIVE>```\nThe path to the element within a VARIANT data structure which needs to be flattened. Can be a zero-length string (i.e. empty path) if the outermost element is to be flattened.\n```sql\n<MODE>```\nDefault: Zero-length string (i.e. empty path)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/flatten)\n",
	"floor":                                  "```sql\nFLOOR( <input_expr> [, <scale_expr> ] )\n```\n```sql\n<input_expr>```\nThe value or expression to operate on. The data type should be one of the numeric data types, such as FLOAT or NUMBER.\n```sql\n<scale_expr>```\nThe number of digits the output should include after the decimal point. The expression should evaluate to an\ninteger from -38 to +38.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/floor)\n",
	"generate_column_description":            "```sql\nGENERATE_COLUMN_DESCRIPTION( <expr> , \"<string>\" )\n```\n```sql\n<expr>```\nOutput of the INFER_SCHEMA function formatted as an array.\n```sql\n<\">```\nType of object that could be created from the column list. The appropriate formatting for this type is applied to the output.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/generate_column_description)\n",
	"generator":                              "```sql\nGENERATOR( ROWCOUNT => <count> [ , TIMELIMIT => <sec> ] )\n\nGENERATOR( [ TIMELIMIT => <sec> ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/generator)\n",
	"get":                                    "```sql\nGET( <array> , <index> )\n\nGET( <variant> , <index> )\n```\n```sql\n<array>```\nAn expression that evaluates to an ARRAY.\n```sql\n<index>```\nAn expression that evaluates to an INTEGER. This specifies the position of the element to retrieve from the ARRAY. The\nposition is 0-based, not 1-based.\n```sql\n<variant>```\nIf the index points outside of the array boundaries, or if the indexed element does not exist (in a sparse array):\n```sql\n<object>```\nIf array is a semi-structured ARRAY, this function returns NULL.\n```sql\n<field_name>```\nIf array is a structured ARRAY, an error occurs.\n```sql\n<map>```\nAn expression that evaluates to a VARIANT that contains either an ARRAY or an OBJECT.\n```sql\n<key>```\nAn expression that evaluates to an OBJECT that contains key-value pairs.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get)\n",
	"get_absolute_path":                      "```sql\nGET_ABSOLUTE_PATH( @<stage_name> , \"<relative_file_path>\" )\n```\n```sql\n<stage_name>```\nName of the internal or external stage where the file is stored.\n```sql\n<relative_file_path>```\nNote\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_absolute_path)\n",
	"get_anaconda_packages_repodata":         "```sql\nSNOWFLAKE.SNOWPARK.GET_ANACONDA_PACKAGES_REPODATA( \"<architecture>\" )\n```\n```sql\n<architecture>```\nString specifying the architecture, which can be:\nlinux-64, linux-aarch64, or noarch.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_anaconda_packages_repodata)\n",
	"get_condition_query_uuid":               "```sql\nSNOWFLAKE.ALERT.GET_CONDITION_QUERY_UUID()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_condition_query_uuid)\n",
	"get_ddl":                                "```sql\nGET_DDL( \"<object_type>\" , \"[<namespace>.]<object_name>\" [ , <use_fully_qualified_names_for_recreated_objects> ] )\n```\n```sql\n<\">```\nRequired:\n```sql\n<\">```\nSpecifies the type of object for which the DDL is returned. Valid values (corresponding to the supported object types) are:\n```sql\n<use_fully_qualified_names_for_recreated_objects>```\nDATABASE\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_ddl)\n",
	"get_ignore_case":                        "```sql\n\n```\n```sql\n<variant>```\nAn expression that evaluates to a VARIANT that contains either an ARRAY or an OBJECT.\n```sql\n<object>```\nAn expression that evaluates to an OBJECT that contains key-value pairs.\n```sql\n<field_name>```\nAn expression that evaluates to a VARCHAR. This specifies the key in a key-value pair for which you want to retrieve the value.\n```sql\n<map>```\nfield_name must not be an empty string.\n```sql\n<key>```\nIf object is a structured OBJECT, you must specify a constant for\nfield_name.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_ignore_case)\n",
	"get_lineage-snowflake-core":             "```sql\nSNOWFLAKE.CORE.GET_LINEAGE(\n    \"<object_name>\",\n    \"<object_domain>\",\n    \"<direction>\",\n    [ <distance>, ]\n    [ \"<object_version>\" ]\n)\n```\n```sql\n<\">```\nRequired:\n```sql\n<\">```\nName of the object for which data lineage information is retrieved. Use the fully qualified name if the object is in a\nschema different from the current schema in the session.\n```sql\n<\">```\nThe domain of the object. Supported domains are ‘COLUMN’, ‘TABLE’ (which includes all table-like objects including\nviews and dynamic tables), and ‘STAGE’. For ML lineage, use TABLE for feature views (which are dynamic tables and\nviews internally), ‘DATASET’, or ‘MODULE’ for models.\n```sql\n<distance>```\nThe direction for which the lineage should be retained. Supported directions are ‘UPSTREAM’ and ‘DOWNSTREAM’.\n```sql\n<\">```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_lineage)\n",
	"get_object_references":                  "```sql\nGET_OBJECT_REFERENCES(\n  DATABASE_NAME => \"<string>\"\n  , SCHEMA_NAME => \"<string>\"\n  , OBJECT_NAME => \"<string>\" )\n```\n```sql\n<DATABASE_NAME>```\nName of the database in which the schema and object reside.\n```sql\n<SCHEMA_NAME>```\nName of the schema in which the object resides.\n```sql\n<OBJECT_NAME>```\nName of the object. Currently limited to the name of a view (secure or not secure).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_object_references)\n",
	"get_path":                               "```sql\nGET_PATH( <column_identifier> , \"<path_name>\" )\n\n<column_identifier>:<path_name>\n\n:( <column_identifier> , \"<path_name>\" )\n```\n```sql\n<column_identifier>```\nAn expression that evaluates to an OBJECT, ARRAY, or\nVARIANT column .\n```sql\n<path_name>```\nAn expression that evaluates to a VARCHAR. This specifies the path to the field or element that you want to extract.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_path)\n",
	"get_presigned_url":                      "```sql\nGET_PRESIGNED_URL( @<stage_name> , \"<relative_file_path>\" , [ <expiration_time> ] )\n```\n```sql\n<stage_name>```\nName of the internal or external stage where the file is stored.\n```sql\n<relative_file_path>```\nNote\n```sql\n<expiration_time>```\nIf the stage name includes spaces or special characters, it must be enclosed in single quotes (e.g. \"@\"my stage\"\" for a stage\nnamed \"my stage\").\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_presigned_url)\n",
	"get_python_profiler_output":             "```sql\nSNOWFLAKE.CORE.GET_PYTHON_PROFILER_OUTPUT(<query_id>)\n```\n```sql\n<query_id>```\nQuery ID of the stored procedure query for which profiling was enabled.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_python_profiler_output)\n",
	"get_query_operator_stats":               "```sql\nGET_QUERY_OPERATOR_STATS( <query_id> )\n```\n```sql\n<query_id>```\nThe ID of a query. You can use:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_query_operator_stats)\n",
	"get_relative_path":                      "```sql\nGET_RELATIVE_PATH( @<stage_name> , \"<absolute_file_path>\" )\n```\n```sql\n<stage_name>```\nName of the internal or external stage where the file is stored.\n```sql\n<absolute_file_path>```\nNote\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_relative_path)\n",
	"get_stage_location":                     "```sql\nGET_STAGE_LOCATION( @<stage_name> )\n```\n```sql\n<stage_name>```\nName of an external or internal named stage.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/get_stage_location)\n",
	"getbit":                                 "```sql\nGETBIT( <integer_expr>, <bit_position> )\n```\n```sql\n<integer_expr>```\nThis expression must evaluate to a data type that can be cast to an INTEGER value.\n```sql\n<bit_position>```\nThe position of the bit (starting from 0 for the least significant bit up to 127 for the most significant bit) for which\nto retrieve the value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/getbit)\n",
	"getdate":                                "```sql\nGETDATE()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/getdate)\n",
	"getvariable":                            "```sql\nGETVARIABLE( \"<name>\" )\n```\n```sql\n<name>```\nThe name of the SQL variable.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/getvariable)\n",
	"greatest":                               "```sql\nGREATEST( <expr1> [ , <expr2> ... ] )\n```\n```sql\n<exprN>```\nThe arguments must include at least one expression. All the expressions\nshould be of the same type or compatible types.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/greatest)\n",
	"greatest_ignore_nulls":                  "```sql\nGREATEST_IGNORE_NULLS( <expr1> [ , <expr2> ... ] )\n```\n```sql\n<exprN>```\nThe arguments must include at least one expression. All the expressions\nshould be of the same type or compatible types.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/greatest_ignore_nulls)\n",
	"grouping":                               "```sql\nGROUPING( <expr1> [ , <expr2> , ... ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/grouping)\n",
	"grouping_id":                            "```sql\nGROUPING_ID( <expr1> [ , <expr2> , ... ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/grouping_id)\n",
	"h3_cell_to_boundary":                    "```sql\nH3_CELL_TO_BOUNDARY( <cell_id> )\n```\n```sql\n<cell_id>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_cell_to_boundary)\n",
	"h3_cell_to_children":                    "```sql\nH3_CELL_TO_CHILDREN( <cell_id> , <target_resolution> )\n```\n```sql\n<cell_id>```\nAn INTEGER that represents the H3 cell ID (index).\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_cell_to_children)\n",
	"h3_cell_to_children_string":             "```sql\nH3_CELL_TO_CHILDREN_STRING( <cell_id> , <target_resolution> )\n```\n```sql\n<cell_id>```\nA VARCHAR that represents the H3 cell ID (index) in hexadecimal format.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_cell_to_children_string)\n",
	"h3_cell_to_parent":                      "```sql\nH3_CELL_TO_PARENT( <cell_id> , <target_resolution> )\n```\n```sql\n<cell_id>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cell.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_cell_to_parent)\n",
	"h3_cell_to_point":                       "```sql\nH3_CELL_TO_POINT( <cell_id> )\n```\n```sql\n<cell_id>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_cell_to_point)\n",
	"h3_compact_cells":                       "```sql\nH3_COMPACT_CELLS( <array_of_cell_ids> )\n```\n```sql\n<array_of_cell_ids>```\nAn array of VARIANT values that contain the INTEGER values that represent H3 cell IDs (indexes).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_compact_cells)\n",
	"h3_compact_cells_strings":               "```sql\nH3_COMPACT_CELLS_STRINGS( <array_of_cell_ids> )\n```\n```sql\n<array_of_cell_ids>```\nAn array of VARIANT values that contain the VARCHAR hexadecimal values that represent H3 cell IDs (indexes).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_compact_cells_strings)\n",
	"h3_coverage":                            "```sql\nH3_COVERAGE( <geography_expression> , <target_resolution> )\n```\n```sql\n<geography_expression>```\nA GEOGRAPHY object.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_coverage)\n",
	"h3_coverage_strings":                    "```sql\nH3_COVERAGE_STRINGS( <geography_expression> , <target_resolution> )\n```\n```sql\n<geography_expression>```\nA GEOGRAPHY object.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_coverage_strings)\n",
	"h3_get_resolution":                      "```sql\nH3_GET_RESOLUTION( <cell_id> )\n```\n```sql\n<cell_id>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_get_resolution)\n",
	"h3_grid_disk":                           "```sql\nH3_GRID_DISK( <cell_id> , <k_value> )\n```\n```sql\n<cell_id>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n```sql\n<k_value>```\nAn INTEGER that represents the grid distance. You must specify a non-negative value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_grid_disk)\n",
	"h3_grid_distance":                       "```sql\nH3_GRID_DISTANCE( <cell_id_1> , <cell_id_2> )\n```\n```sql\n<cell_id_1>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n```sql\n<cell_id_2>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_grid_distance)\n",
	"h3_grid_path":                           "```sql\nH3_GRID_PATH( <cell_id_1> , <cell_id_2> )\n```\n```sql\n<cell_id_1>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n```sql\n<cell_id_2>```\nAn INTEGER that represents the H3 cell ID (index), or a VARCHAR that represents the cell ID in hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_grid_path)\n",
	"h3_int_to_string":                       "```sql\nH3_INT_TO_STRING( <cell_id> )\n```\n```sql\n<cell_id>```\nAn INTEGER value that represents the cell ID (index).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_int_to_string)\n",
	"h3_is_pentagon":                         "```sql\nH3_IS_PENTAGON( <cell_id> )\n```\n```sql\n<cell_id>```\nAn INTEGER value that represents the H3 cell ID (index), or a VARCHAR value that represents the cell ID\nin hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_is_pentagon)\n",
	"h3_is_valid_cell":                       "```sql\nH3_IS_VALID_CELL( <cell_id> )\n```\n```sql\n<cell_id>```\nAn INTEGER value that represents the H3 cell ID (index), or a VARCHAR value that represents the cell ID\nin hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_is_valid_cell)\n",
	"h3_latlng_to_cell":                      "```sql\nH3_LATLNG_TO_CELL( <latitude> , <longitude> , <target_resolution> )\n```\n```sql\n<latitude>```\nA FLOAT that represents the latitude.\n```sql\n<longitude>```\nValues outside the standard latitude range are wrapped to the range [-90, 90].\n```sql\n<target_resolution>```\nA FLOAT that represents the longitude.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_latlng_to_cell)\n",
	"h3_latlng_to_cell_string":               "```sql\nH3_LATLNG_TO_CELL_STRING( <latitude> , <longitude> , <target_resolution> )\n```\n```sql\n<latitude>```\nA FLOAT that represents the latitude.\n```sql\n<longitude>```\nValues outside the standard latitude range are wrapped to the range [-90, 90].\n```sql\n<target_resolution>```\nA FLOAT that represents the longitude.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_latlng_to_cell_string)\n",
	"h3_point_to_cell":                       "```sql\nH3_POINT_TO_CELL( <geography_point> , <target_resolution> )\n```\n```sql\n<geography_point>```\nA GEOGRAPHY object that represents a Point.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) that specifies the H3 resolution that you want to use for the returned H3 cell.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_point_to_cell)\n",
	"h3_point_to_cell_string":                "```sql\nH3_POINT_TO_CELL_STRING( <geography_point> , <target_resolution> )\n```\n```sql\n<geography_point>```\nA GEOGRAPHY object that represents a Point.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) that specifies the H3 resolution that you want to use for the returned H3 cell.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_point_to_cell_string)\n",
	"h3_polygon_to_cells":                    "```sql\nH3_POLYGON_TO_CELLS( <geography_polygon> , <target_resolution> )\n```\n```sql\n<geography_polygon>```\nA GEOGRAPHY object that represents a Polygon.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) that specifies the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_polygon_to_cells)\n",
	"h3_polygon_to_cells_strings":            "```sql\nH3_POLYGON_TO_CELLS_STRINGS( <geography_polygon> , <target_resolution> )\n```\n```sql\n<geography_polygon>```\nA GEOGRAPHY object that represents a Polygon.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) that specifies the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_polygon_to_cells_strings)\n",
	"h3_string_to_int":                       "```sql\nH3_STRING_TO_INT( <cell_id> )\n```\n```sql\n<cell_id>```\nA VARCHAR that represents the cell ID (index) in hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_string_to_int)\n",
	"h3_try_coverage":                        "```sql\nH3_TRY_COVERAGE( <geography_expression> , <target_resolution> )\n```\n```sql\n<geography_expression>```\nA GEOGRAPHY object.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_try_coverage)\n",
	"h3_try_coverage_strings":                "```sql\nH3_TRY_COVERAGE_STRINGS( <geography_expression> , <target_resolution> )\n```\n```sql\n<geography_expression>```\nA GEOGRAPHY object.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_try_coverage_strings)\n",
	"h3_try_grid_distance":                   "```sql\nH3_TRY_GRID_DISTANCE( <cell_id_1> , <cell_id_2> )\n```\n```sql\n<cell_id_1>```\nAn INTEGER value that represents the H3 cell ID (index), or a VARCHAR value that represents the cell ID\nin hexadecimal format.\n```sql\n<cell_id_2>```\nAn INTEGER value that represents the H3 cell ID (index), or a VARCHAR value that represents the cell ID\nin hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_try_grid_distance)\n",
	"h3_try_grid_path":                       "```sql\nH3_TRY_GRID_PATH( <cell_id_1> , <cell_id_2> )\n```\n```sql\n<cell_id_1>```\nAn INTEGER value that represents the H3 cell ID (index), or a VARCHAR value that represents the cell ID\nin hexadecimal format.\n```sql\n<cell_id_2>```\nAn INTEGER value that represents the H3 cell ID (index), or a VARCHAR value that represents the cell ID\nin hexadecimal format.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_try_grid_path)\n",
	"h3_try_polygon_to_cells":                "```sql\nH3_TRY_POLYGON_TO_CELLS( <geography_polygon> , <target_resolution> )\n```\n```sql\n<geography_polygon>```\nA GEOGRAPHY object that represents a Polygon.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) that specifies the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_try_polygon_to_cells)\n",
	"h3_try_polygon_to_cells_strings":        "```sql\nH3_TRY_POLYGON_TO_CELLS_STRINGS( <geography_polygon> , <target_resolution> )\n```\n```sql\n<geography_polygon>```\nA GEOGRAPHY object that represents a Polygon.\n```sql\n<target_resolution>```\nAn INTEGER between 0 and 15 (inclusive) that specifies the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_try_polygon_to_cells_strings)\n",
	"h3_uncompact_cells":                     "```sql\nH3_UNCOMPACT_CELLS( <array_of_cell_ids> , <target_resolution> )\n```\n```sql\n<array_of_cell_ids>```\nAn array of VARIANT values that contain INTEGER values that represent H3 cell IDs (indexes).\n```sql\n<target_resolution>```\nAn INTEGER value between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_uncompact_cells)\n",
	"h3_uncompact_cells_strings":             "```sql\nH3_UNCOMPACT_CELLS_STRINGS( <array_of_cell_ids> , <target_resolution> )\n```\n```sql\n<array_of_cell_ids>```\nAn array of VARIANT values that contain VARCHAR hexadecimal values that represent H3 cell IDs (indexes).\n```sql\n<target_resolution>```\nAn INTEGER value between 0 and 15 (inclusive) specifying the H3 resolution that you want to use for the returned H3 cells.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/h3_uncompact_cells_strings)\n",
	"hash":                                   "```sql\nHASH( <expr> [ , <expr> ... ] )\n\nHASH(*)\n```\n```sql\n<expr>```\nThe expression can be a general expression of any Snowflake data type.\n```sql\n<*>```\nReturns a single hashed value based on all columns in each record,\nincluding records with NULL values.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hash)\n",
	"hash_agg":                               "```sql\nHASH_AGG( [ DISTINCT ] <expr> [ , <expr2> ... ] )\n\nHASH_AGG(*)\n```\n```sql\n<exprN>```\nThe expression can be a general expression of any Snowflake data type.\n```sql\n<expr2>```\nYou can include additional expressions.\n```sql\n<expr3>```\nThe column to partition on, if you want the result to be split into multiple\nwindows.\n```sql\n<*>```\nReturns an aggregated hash value over all columns for all records, including records with\nNULL values. You can specify the wildcard for both the aggregate function and the window\nfunction.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hash_agg)\n",
	"haversine":                              "```sql\nHAVERSINE( <lat1>, <lon1>, <lat2>, <lon2> )\n```\n```sql\n<lat1>```\nThe latitude of the first point in decimal degrees.\n```sql\n<lon1>```\nThe longitude of the first point in decimal degrees.\n```sql\n<lat2>```\nThe latitude of the second point in decimal degrees.\n```sql\n<lon2>```\nThe longitude of the second point in decimal degrees.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/haversine)\n",
	"hex_decode_binary":                      "```sql\nHEX_DECODE_BINARY(<input>)\n```\n```sql\n<input>```\nA string expression containing only hexadecimal digits. Typically, this\ninput string is generated by calling the function\nHEX_ENCODE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hex_decode_binary)\n",
	"hex_decode_string":                      "```sql\nHEX_DECODE_STRING(<input>)\n```\n```sql\n<input>```\nA hex-encoded string expression. Typically the input was created by a\ncall to HEX_ENCODE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hex_decode_string)\n",
	"hex_encode":                             "```sql\nHEX_ENCODE(<input> [, <case>])\n```\n```sql\n<input>```\nRequired:\n```sql\n<case>```\nA binary or string expression to be encoded.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hex_encode)\n",
	"hll":                                    "```sql\nHLL( [ DISTINCT ] <expr1> [ , ... ] )\n\nHLL(*)\n```\n```sql\n<expr1>```\nThis is the expression for which you want to know the number of distinct values.\n```sql\n<expr2>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hll)\n",
	"hll_accumulate":                         "```sql\nHLL_ACCUMULATE( [ DISTINCT ] <expr> )\n\nHLL_ACCUMULATE(*)\n```\n```sql\n<expr>```\nThe expression for which you want to estimate cardinality (number of\ndistinct values). This is typically a column name, but can be a more\ngeneral expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hll_accumulate)\n",
	"hll_combine":                            "```sql\nHLL_COMBINE([DISTINCT] state)\n```\n```sql\n<state>```\nAn expression that contains state information generated\nby a call to HLL_ACCUMULATE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hll_combine)\n",
	"hll_estimate":                           "```sql\nHLL_ESTIMATE( <state> )\n```\n```sql\n<state>```\nAn expression that contains state information generated\nby a call to HLL_ACCUMULATE or HLL_COMBINE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hll_estimate)\n",
	"hll_export":                             "```sql\nHLL_EXPORT( <binary_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hll_export)\n",
	"hll_import":                             "```sql\nHLL_IMPORT(obj)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hll_import)\n",
	"hour-minute-second":                     "```sql\nHOUR( <time_or_timestamp_expr> )\n\nMINUTE( <time_or_timestamp_expr> )\n\nSECOND( <time_or_timestamp_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/hour)\n",
	"iceberg_table_files":                    "```sql\nICEBERG_TABLE_FILES(\n  TABLE_NAME => \"<table_name>\"\n  [, AT => \"<timestamp_ltz>\"]\n)\n```\n```sql\n<TABLE_NAME>```\nRequired\n```sql\n<AT>```\nThe name of the externally managed Iceberg table\nfor which you want to retrieve the data file information.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/iceberg_table_files)\n",
	"iceberg_table_snapshot_refresh_history": "```sql\nICEBERG_TABLE_SNAPSHOT_REFRESH_HISTORY(\n  TABLE_NAME => \"<table_name>\"\n)\n```\n```sql\n<TABLE_NAME>```\nThe name of the externally managed Iceberg table\nfor which you want to retrieve the snapshot refresh history.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/iceberg_table_snapshot_refresh_history)\n",
	"iff":                                    "```sql\nIFF( <condition> , <expr1> , <expr2> )\n```\n```sql\n<condition>```\nThe condition is an expression that should evaluate to a BOOLEAN value\n(TRUE, FALSE, or NULL).\n```sql\n<expr1>```\nIf condition evaluates to TRUE, returns expr1, otherwise\nreturns expr2.\n```sql\n<expr2>```\nA general expression. The function returns this value if the condition\nis true.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/iff)\n",
	"ifnull":                                 "```sql\nIFNULL( <expr1> , <expr2> )\n```\n```sql\n<expr1>```\nA general expression.\n```sql\n<expr2>```\nA general expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ifnull)\n",
	"ilike":                                  "```sql\n<subject> [ NOT ] ILIKE <pattern> [ ESCAPE <escape> ]\n\nILIKE( <subject> , <pattern> [ , <escape> ] )\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nSubject to match.\n```sql\n<escape>```\nPattern to match.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ilike)\n",
	"ilike_any":                              "```sql\n<subject> ILIKE ANY (<pattern1> [, <pattern2> ... ] ) [ ESCAPE <escape_char> ]\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern#>```\nThe string to compare to the pattern(s).\n```sql\n<escape_char>```\nThe pattern(s) that the string is to be compared to. You must specify at least one pattern.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ilike_any)\n",
	"in":                                     "```sql\n<value> [ NOT ] IN ( <value_1> [ , <value_2> ...  ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/in)\n",
	"infer_schema":                           "```sql\nINFER_SCHEMA(\n  LOCATION => \"{ internalStage | externalStage }\"\n  , FILE_FORMAT => \"<file_format_name>\"\n  , FILES => ( \"<file_name>\" [ , \"<file_name>\" ] [ , ... ] )\n  , IGNORE_CASE => TRUE | FALSE\n  , MAX_FILE_COUNT => <num>\n  , MAX_RECORDS_PER_FILE => <num>\n)\n```\n```sql\n<LOCATION>```\nName of the internal or external stage where the files are stored. Optionally include a path to one or more files in the cloud storage\nlocation; otherwise, the INFER_SCHEMA function scans files in all subdirectories in the stage:\n```sql\n<FILES>```\n@[namespace.]int_stage_name[/path][/filename]\n```sql\n<FILE_FORMAT>```\nFiles are in the specified named internal stage.\n```sql\n<IGNORE_CASE>```\n@[namespace.]ext_stage_name[/path][/filename]\n```sql\n<MAX_FILE_COUNT>```\nFiles are in the specified named external stage.\n```sql\n<MAX_RECORDS_PER_FILE>```\n@~[/path][/filename]\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/infer_schema)\n",
	"initcap":                                "```sql\nINITCAP( <expr> [ , \"<delimiters>\" ] )\n```\n```sql\n<expr>```\nThe string expression.\n```sql\n<\">```\nA string of one or more characters that INITCAP uses as separators for words in the input expression:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/initcap)\n",
	"insert":                                 "```sql\nINSERT( <base_expr>, <pos>, <len>, <insert_expr> )\n```\n```sql\n<base_expr>```\nThe string or BINARY expression for which you want to insert/replace\ncharacters.\n```sql\n<pos>```\nThe offset at which to start inserting characters. This is 1-based,\nnot 0-based. In other words, the first character in the string is\nconsidered to be at position 1, not position 0. For example, to insert\nat the beginning of the string, set pos to 1.\n```sql\n<len>```\nValid values are between 1 and one more than the length of the string\n(inclusive).\n```sql\n<insert_expr>```\nSetting pos to one more than the length of the string\nmakes the operation equivalent to an append. (This also requires that the\nlen parameter be 0 because you should not try to delete any\ncharacters past the last character.)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/insert)\n",
	"integration":                            "```sql\nSNOWFLAKE.NOTIFICATION.INTEGRATION( \"<integration_name>\" )\n```\n```sql\n<\">```\nName of the notification integration to use.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/integration)\n",
	"invoker_role":                           "```sql\nINVOKER_ROLE()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/invoker_role)\n",
	"invoker_share":                          "```sql\nINVOKER_SHARE()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/invoker_share)\n",
	"is-distinct-from":                       "```sql\n<expr1> IS [ NOT ] DISTINCT FROM <expr2>\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is)\n",
	"is-null":                                "```sql\n<expr> IS [ NOT ] NULL\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is)\n",
	"is_application_role_in_session":         "```sql\nIS_APPLICATION_ROLE_IN_SESSION( \"<string_literal>\" )\n```\n```sql\n<\">```\nThe application role name. When the application role name is unspecified, the application role name is inferred by the current database session context.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_application_role_in_session)\n",
	"is_array":                               "```sql\nIS_ARRAY( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_array)\n",
	"is_binary":                              "```sql\nIS_BINARY( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_binary)\n",
	"is_boolean":                             "```sql\nIS_BOOLEAN( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_boolean)\n",
	"is_char-varchar":                        "```sql\nIS_CHAR( <variant_expr> )\n\nIS_VARCHAR( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_char)\n",
	"is_database_role_in_session":            "```sql\nIS_DATABASE_ROLE_IN_SESSION( \"<string_literal>\" )\n```\n```sql\n<\">```\nThe name of the database role.\n```sql\n<column_name>```\nSpecify the relative name of the database role. The function evaluates to False if you specify the fully qualified name.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_database_role_in_session)\n",
	"is_date-value":                          "```sql\nIS_DATE( <variant_expr> )\n\nIS_DATE_VALUE( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_date)\n",
	"is_decimal":                             "```sql\nIS_DECIMAL( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_decimal)\n",
	"is_double-real":                         "```sql\nIS_DOUBLE( <variant_expr> )\n\nIS_REAL( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_double)\n",
	"is_granted_to_invoker_role":             "```sql\nIS_GRANTED_TO_INVOKER_ROLE( \"<string_literal>\" )\n```\n```sql\n<\">```\nThe name of the role.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_granted_to_invoker_role)\n",
	"is_instance_role_in_session":            "```sql\nIS_INSTANCE_ROLE_IN_SESSION( \"<instance_name>\" , \"<instance_role_name>\" )\n```\n```sql\n<\">```\nSpecifies the name of the instance.\n```sql\n<\">```\nSpecifies the name of the instance role.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_instance_role_in_session)\n",
	"is_integer":                             "```sql\nIS_INTEGER( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_integer)\n",
	"is_null_value":                          "```sql\nIS_NULL_VALUE( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_null_value)\n",
	"is_object":                              "```sql\nIS_OBJECT( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_object)\n",
	"is_role_in_session":                     "```sql\nIS_ROLE_IN_SESSION( \"<string_literal>\" )\n```\n```sql\n<\">```\nThe name of the role.\n```sql\n<column_name>```\nThe column name in a table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_role_in_session)\n",
	"is_time":                                "```sql\nIS_TIME( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_time)\n",
	"is_timestamp":                           "```sql\nIS_TIMESTAMP_LTZ( <variant_expr> )\n\nIS_TIMESTAMP_NTZ( <variant_expr> )\n\nIS_TIMESTAMP_TZ( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression that evaluates to a value of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/is_timestamp)\n",
	"jarowinkler_similarity":                 "```sql\nJAROWINKLER_SIMILARITY( <string_expr1> , <string_expr2> )\n```\n```sql\n<string_expr1>```\nRequired:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/jarowinkler_similarity)\n",
	"json_extract_path_text":                 "```sql\nJSON_EXTRACT_PATH_TEXT( <column_identifier> , \"<path_name>\" )\n```\n```sql\n<column_identifier>```\nThe name of the column with the data that you want to extract.\n```sql\n<path_name>```\nA string that contains the path to the element that you want to extract.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/json_extract_path_text)\n",
	"kurtosis":                               "```sql\nKURTOSIS( <expr> )\n```\n```sql\n<expr>```\nThis is an expression that evaluates to a numeric data type (INTEGER, FLOAT, DECIMAL, etc.).\n```sql\n<expr2>```\nThe expression that defines the individual groups or windows.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/kurtosis)\n",
	"lag":                                    "```sql\nLAG ( <expr> [ , <offset> , <default> ] ) [ { IGNORE | RESPECT } NULLS ]\n    OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] )\n```\n```sql\n<expr>```\nThe expression to be returned based on the specified offset.\n```sql\n<offset>```\nThe number of rows backward from the current row from which to obtain a value. For example, an offset of 2 returns\nthe expr value with an interval of 2 rows.\n```sql\n<default>```\nNote that setting a negative offset has the same effect as using the LEAD function.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/lag)\n",
	"last_day":                               "```sql\nLAST_DAY( <date_or_time_expr> [ , <date_part> ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/last_day)\n",
	"last_query_id":                          "```sql\nLAST_QUERY_ID( [ <num> ] )\n```\n```sql\n<num>```\nSpecifies the query to return, based on the position of the query (within the session).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/last_query_id)\n",
	"last_successful_scheduled_time":         "```sql\nSNOWFLAKE.ALERT.LAST_SUCCESSFUL_SCHEDULED_TIME()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/last_successful_scheduled_time)\n",
	"last_transaction":                       "```sql\nLAST_TRANSACTION()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/last_transaction)\n",
	"last_value":                             "```sql\nLAST_VALUE( <expr> ) [ { IGNORE | RESPECT } NULLS ]\n  OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] [ <window_frame> ] )\n```\n```sql\n<expr>```\nThe expression that determines the return value.\n```sql\n<expr1>```\nThe expression by which to partition the rows. You can specify a single expression or a comma-separated list of expressions.\nFor example:\n```sql\n<expr2>```\nThe expression by which to order the rows. You can specify a single expression or a comma-separated list of expressions.\nFor example:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/last_value)\n",
	"lead":                                   "```sql\nLEAD ( <expr> [ , <offset> , <default> ] ) [ { IGNORE | RESPECT } NULLS ]\n  OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] )\n```\n```sql\n<expr>```\nThe string expression to be returned.\n```sql\n<offset>```\nThe number of rows forward from the current row from which to obtain a value. For example, an offset of 2 returns the\nexpr value with an interval of 2 rows.\n```sql\n<default>```\nNote that setting a negative offset has the same effect as using the LAG function.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/lead)\n",
	"least":                                  "```sql\nLEAST(( <expr1> [ , <expr2> ... ] )\n```\n```sql\n<exprN>```\nThe arguments must include at least one expression. All the expressions\nshould be of the same type or compatible types.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/least)\n",
	"least_ignore_nulls":                     "```sql\nLEAST_IGNORE_NULLS( <expr1> [ , <expr2> ... ] )\n```\n```sql\n<exprN>```\nThe arguments must include at least one expression. All the expressions\nshould be of the same type or compatible types.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/least_ignore_nulls)\n",
	"left":                                   "```sql\nLEFT( <string_expr> , <length_expr> )\n```\n```sql\n<string_expr>```\nAn expression that evaluates to a VARCHAR or BINARY value.\n```sql\n<length_expr>```\nAn expression that evaluates to an integer. It specifies:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/left)\n",
	"length":                                 "```sql\nLENGTH( <expression> )\nLEN( <expression> )\n```\n```sql\n<expression>```\nThe input expression must be a string or binary value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/length)\n",
	"like":                                   "```sql\n<subject> [ NOT ] LIKE <pattern> [ ESCAPE <escape> ]\n\nLIKE( <subject> , <pattern> [ , <escape> ] )\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nSubject to match. This is typically a VARCHAR, although some other data\ntypes can be used.\n```sql\n<escape>```\nPattern to match. This is typically a VARCHAR, although some other data\ntypes can be used.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/like)\n",
	"like_all":                               "```sql\n<subject> LIKE ALL (<pattern1> [, <pattern2> ... ] ) [ ESCAPE <escape_char> ]\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern#>```\nThe string to compare to the pattern(s).\n```sql\n<escape_char>```\nThe pattern(s) that the string is to be compared to. You must specify at least one pattern.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/like_all)\n",
	"like_any":                               "```sql\n<subject> LIKE ANY (<pattern1> [, <pattern2> ... ] ) [ ESCAPE <escape_char> ]\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern#>```\nThe string to compare to the pattern(s).\n```sql\n<escape_char>```\nThe pattern(s) that the string is to be compared to. You must specify at least one pattern.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/like_any)\n",
	"listagg":                                "```sql\nLISTAGG( [ DISTINCT ] <expr1> [, <delimiter> ] )\n    [ WITHIN GROUP ( <orderby_clause> ) ]\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/listagg)\n",
	"listing_refresh_history":                "```sql\nLISTING_REFRESH_HISTORY(\n  LISTING_NAME => \"<listing_name>\"\n  [ , SNOWFLAKE_REGION => \"<snowflake_region>\" ]\n  [ , REGION_GROUP => \"<region_group>\" ] )\n```\n```sql\n<LISTING_NAME>```\nRequired\n```sql\n<SNOWFLAKE_REGION>```\nSQL identifier of a cross-cloud auto-fulfillment listing in this account. The SQL identifier for\nlistings can be found in the name column returned by show listings in data exchange <exchange_name>.\nSimilarly, the SQL identifier for data exchanges can be found in the name column returned by\nshow data exchanges.\n```sql\n<REGION_GROUP>```\nOptional\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/listing_refresh_history)\n",
	"ln":                                     "```sql\nLN(<expr>)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ln)\n",
	"localtime":                              "```sql\nLOCALTIME()\n\nLOCALTIME\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/localtime)\n",
	"localtimestamp":                         "```sql\nLOCALTIMESTAMP( [ <fract_sec_precision> ] )\n\nLOCALTIMESTAMP\n```\n```sql\n<fract_sec_precision>```\nThis optional argument indicates the precision with which to report the\ntime. For example, a value of 3 says to use 3 digits after the decimal\npoint (i.e. to specify the time with a precision of milliseconds).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/localtimestamp)\n",
	"log":                                    "```sql\nLOG(<base>, <expr>)\n```\n```sql\n<base>```\nThe “base” to use (e.g. 10 for base 10 arithmetic).\n```sql\n<expr>```\nThis can be of any numeric data type (INTEGER, fixed-point, or floating\npoint).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/log)\n",
	"login_history":                          "```sql\nLOGIN_HISTORY(\n      [  TIME_RANGE_START => <constant_expr> ]\n      [, TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <num> ] )\n\nLOGIN_HISTORY_BY_USER(\n      [  USER_NAME => \"<string>\" ]\n      [, TIME_RANGE_START => <constant_expr> ]\n      [, TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <num> ] )\n```\n```sql\n<TIME_RANGE_START>```\nAll the arguments are optional.\n```sql\n<USER_NAME>```\nTime range (in TIMESTAMP_LTZ format), within the last 7 days, in which the login event occurred.\n```sql\n<RESULT_LIMIT>```\nIf TIME_RANGE_END is not specified, the function returns the most recent login events.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/login_history)\n",
	"lower":                                  "```sql\nLOWER( <expr> )\n```\n```sql\n<expr>```\nThe string expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/lower)\n",
	"lpad":                                   "```sql\nLPAD( <base>, <length_expr> [, <pad>] )\n```\n```sql\n<base>```\nA VARCHAR or BINARY value.\n```sql\n<length_expr>```\nAn expression that evaluates to an integer. It specifies:\n```sql\n<pad>```\nThe number of UTF-8 characters to return if the input is VARCHAR.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/lpad)\n",
	"ltrim":                                  "```sql\nLTRIM( <expr> [, <characters> ] )\n```\n```sql\n<expr>```\nThe string expression to be trimmed.\n```sql\n<characters>```\nOne or more characters to remove from the left side of expr.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ltrim)\n",
	"map_cat":                                "```sql\nMAP_CAT( <map1> , <map2> )\n```\n```sql\n<map1>```\nThe source MAP.\n```sql\n<map2>```\nThe MAP to be appended to map1.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/map_cat)\n",
	"map_contains_key":                       "```sql\nMAP_CONTAINS_KEY( <key> , <map> )\n```\n```sql\n<key>```\nThe key to find.\n```sql\n<map>```\nThe map to be searched.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/map_contains_key)\n",
	"map_delete":                             "```sql\nMAP_DELETE( <map>, <key1> [, <key2>, ... ] )\n```\n```sql\n<map>```\nThe map that contains the key to remove.\n```sql\n<keyN>```\nThe key to be omitted from the returned map.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/map_delete)\n",
	"map_insert":                             "```sql\nMAP_INSERT( <map> , <key> , <value> [ , <updateFlag> ] )\n```\n```sql\n<map>```\nThe source map into which the new key-value pair is inserted.\n```sql\n<key>```\nThe new key to insert into the map. Must be different from all existing keys in the map, unless updateFlag is set to\nTRUE.\n```sql\n<value>```\nThe value associated with the key.\n```sql\n<updateFlag>```\nOptional\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/map_insert)\n",
	"map_keys":                               "```sql\nMAP_KEYS( <map> )\n```\n```sql\n<map>```\nThe input map.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/map_keys)\n",
	"map_pick":                               "```sql\nMAP_PICK( <map>, <key1> [, <key2>, ... ] )\n\nMAP_PICK( <map>, <array> )\n```\n```sql\n<map>```\nThe input map.\n```sql\n<key1>```\nOne or more keys that identify the key-value pairs to be included in the returned map.\n```sql\n<array>```\nAn array of keys that identify the key-value pairs to be included in the returned map. You can specify a semi-structured ARRAY\nor a structured ARRAY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/map_pick)\n",
	"map_size":                               "```sql\nMAP_SIZE( <map> )\n```\n```sql\n<map>```\nThe input map.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/map_size)\n",
	"materialized_view_refresh_history":      "```sql\nMATERIALIZED_VIEW_REFRESH_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [ , DATE_RANGE_END => <constant_expr> ]\n      [ , MATERIALIZED_VIEW_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<MATERIALIZED_VIEW_NAME>```\nThe date/time range to display the materialized view maintenance history.\nFor example, if you specify that the start date is 2019-04-03 and the end date is 2019-04-05, then you get data for\nApril 3, April 4, and April 5. (The endpoints are included.)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/materialized_view_refresh_history)\n",
	"max":                                    "```sql\nMAX( <expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/max)\n",
	"md5":                                    "```sql\nMD5(<msg>)\n\nMD5_HEX(<msg>)\n```\n```sql\n<msg>```\nA string expression, the message to be hashed.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/md5)\n",
	"md5_binary":                             "```sql\nMD5_BINARY(<msg>)\n```\n```sql\n<msg>```\nA string expression, the message to be hashed.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/md5_binary)\n",
	"md5_number":                             "```sql\nMD5_NUMBER(<msg>)\n```\n```sql\n<msg>```\nA string expression, the message to be hashed.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/md5_number)\n",
	"md5_number_upper64":                     "```sql\nMD5_NUMBER_UPPER64(<msg>)\n```\n```sql\n<msg>```\nA string expression, the message to be hashed.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/md5_number_upper64)\n",
	"median":                                 "```sql\nMEDIAN( <expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/median)\n",
	"min":                                    "```sql\nMIN( <expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/min)\n",
	"min_by":                                 "```sql\nMIN_BY( <col_to_return>, <col_containing_mininum> [ , <maximum_number_of_values_to_return> ] )\n```\n```sql\n<col_to_return>```\nRequired:\n```sql\n<col_containing_mininum>```\nColumn containing the value to return.\n```sql\n<maximum_number_of_values_to_return>```\nColumn containing the minimum value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/min_by)\n",
	"minhash":                                "```sql\nMINHASH( <k> , [ DISTINCT ] expr+ )\n\nMINHASH( <k> , * )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/minhash)\n",
	"minhash_combine":                        "```sql\nMINHASH_COMBINE( [ DISTINCT ] <state> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/minhash_combine)\n",
	"mod":                                    "```sql\nMOD( <expr1> , <expr2> )\n```\n```sql\n<expr1>```\nA numeric expression.\n```sql\n<expr2>```\nA numeric expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/mod)\n",
	"mode":                                   "```sql\nMODE( <expr1> )\n```\n```sql\n<expr1>```\nThis expression produces the values that are searched to find the most frequent value. The expression can be of any of the following data types:\n```sql\n<expr2>```\nBINARY\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/mode)\n",
	"monthname":                              "```sql\nMONTHNAME( <date_or_timestamp_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/monthname)\n",
	"months_between":                         "```sql\nMONTHS_BETWEEN( <date_expr1> , <date_expr2> )\n```\n```sql\n<date_expr1>```\nThe date to subtract from.\n```sql\n<date_expr2>```\nThe date to subtract.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/months_between)\n",
	"network_rule_references":                "```sql\nNETWORK_RULE_REFERENCES(\n  NETWORK_RULE_NAME => \"<string>\"\n)\n\nNETWORK_RULE_REFERENCES(\n  CONTAINER_NAME => \"<container_name>\" ,\n  CONTAINER_TYPE => { \"INTEGRATION\" | \"NETWORK_POLICY\" }\n)\n```\n```sql\n<NETWORK_RULE_NAME>```\nSpecifies the identifier for the network rule.\n```sql\n<CONTAINER_NAME>```\nThe entire network rule name must be enclosed in single quotes.\n```sql\n<CONTAINER_TYPE>```\nIf the network rule name is case-sensitive or includes any special characters or spaces, double quotes are required to process the\ncase/characters. The double quotes must be enclosed within the single quotes, such as \"\"name\"\".\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/network_rule_references)\n",
	"next_day":                               "```sql\nNEXT_DAY( <date_or_time_expr> , <dow_string> )\n```\n```sql\n<date_or_time_expr>```\nSpecifies the input date; can be a date or timestamp.\n```sql\n<dow_string>```\nSpecifies the day of week used to calculate the date for the previous day. The value can be a string literal or an expression that returns a string. The string\nmust start with the first two characters (case-insensitive) of the day name:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/next_day)\n",
	"normal":                                 "```sql\nNORMAL( <mean> , <stddev> , <gen> )\n```\n```sql\n<mean>```\nA constant specifying the value that the output values should be centered on.\n```sql\n<stddev>```\nA constant specifying the width of one standard deviation.\n```sql\n<gen>```\nFor example, if you specify a mean of 0.0 and a standard deviation of 1.0,\napproximately 68.2% of returned values from multiple calls will be between\n-1.0 and +1.0 (i.e. within one standard deviation of the mean).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/normal)\n",
	"notification_history":                   "```sql\nNOTIFICATION_HISTORY(\n  [ START_TIME => <constant_expr> ]\n  [, END_TIME => <constant_expr> ]\n  [, INTEGRATION_NAME => \"<string>\" ]\n  [, RESULT_LIMIT => <integer> ] )\n```\n```sql\n<START_TIME=>>```\nAll the arguments are optional.\n```sql\n<INTEGRATION_NAME>```\nTime range (in TIMESTAMP_LTZ format) when the notification is sent out.\n```sql\n<RESULT_LIMIT>```\nIf START_TIME is not specified, the range starts 24 hours prior to the END_TIME.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/notification_history)\n",
	"nth_value":                              "```sql\nNTH_VALUE( <expr> , <n> ) [ FROM { FIRST | LAST } ] [ { IGNORE | RESPECT } NULLS ]\n  OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] [ <window_frame> ] )\n```\n```sql\n<n>```\nThis specifies which value of N to use when looking for the Nth value.\n```sql\n<expr>```\nThe expression that determines the return value.\n```sql\n<expr1>```\nThe expression by which to partition the rows. You can specify a single expression or a comma-separated list of expressions.\nFor example:\n```sql\n<expr2>```\nThe expression by which to order the rows. You can specify a single expression or a comma-separated list of expressions.\nFor example:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/nth_value)\n",
	"ntile":                                  "```sql\nNTILE( <constant_value> ) OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] )\n```\n```sql\n<constant_value>```\nThe desired number of buckets; must be a positive integer value.\n```sql\n<expr1>```\nIf you wish to partition the data into groups, specify the criterion\n(usually a column) to partition by. For example, you might partition by\nprovince.\n```sql\n<expr2>```\nThe expression (usually a column) by which to order the rows in the window.\nFor example, you might order by timestamp.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ntile)\n",
	"nullif":                                 "```sql\nNULLIF( <expr1> , <expr2> )\n```\n```sql\n<expr1>```\nAny general expression of any data type.\n```sql\n<expr2>```\nAny general expression that evaluates to the same data type as expr1.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/nullif)\n",
	"nullifzero":                             "```sql\nNULLIFZERO( <expr> )\n```\n```sql\n<expr>```\nThe input should be an expression that evaluates to a numeric value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/nullifzero)\n",
	"nvl":                                    "```sql\nNVL( <expr1> , <expr2> )\n```\n```sql\n<expr1>```\nA general expression.\n```sql\n<expr2>```\nA general expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/nvl)\n",
	"nvl2":                                   "```sql\nNVL2( <expr1> , <expr2> , <expr3> )\n```\n```sql\n<expr1>```\nThe expression to be checked to see whether it is NULL.\n```sql\n<expr2>```\nIf expr1 is not NULL, this expression will be evaluated and\nits value will be returned.\n```sql\n<expr3>```\nIf expr1 is NULL, this expression will be evaluated and\nits value will be returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/nvl2)\n",
	"object_agg":                             "```sql\nOBJECT_AGG(<key>, <value>)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/object_agg)\n",
	"object_construct":                       "```sql\nOBJECT_CONSTRUCT( [<key>, <value> [, <key>, <value> , ...]] )\n\nOBJECT_CONSTRUCT(*)\n```\n```sql\n<key>```\nThe key in a key-value pair. Each key is a VARCHAR value.\n```sql\n<value>```\nThe value that is associated with the key. The value can be any data type.\n```sql\n<*>```\nWhen invoked with an asterisk (wildcard), the OBJECT value is constructed from the\nspecified data using the attribute names as keys and the associated values as values.\nSee the examples below.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/object_construct)\n",
	"object_construct_keep_null":             "```sql\nOBJECT_CONSTRUCT_KEEP_NULL( [<key>, <value> [, <key>, <value> , ...]] )\n\nOBJECT_CONSTRUCT_KEEP_NULL(*)\n```\n```sql\n<key>```\nThe key in a key-value pair. Each key is a VARCHAR value.\n```sql\n<value>```\nThe value that is associated with the key. The value can be any data type.\n```sql\n<*>```\nWhen invoked with an asterisk (wildcard), the OBJECT value is constructed from the\nspecified data using the attribute names as keys and the associated values as values.\nSee the examples below.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/object_construct_keep_null)\n",
	"object_delete":                          "```sql\nOBJECT_DELETE( <object>, <key1> [, <key2>, ... ] )\n```\n```sql\n<object>```\nThe source object.\n```sql\n<key1>```\nKey to be omitted from the returned object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/object_delete)\n",
	"object_insert":                          "```sql\nOBJECT_INSERT( <object> , <key> , <value> [ , <updateFlag> ] )\n```\n```sql\n<object>```\nRequired:\n```sql\n<key>```\nThe source OBJECT value into which the new key-value pair is inserted or in which an existing key-value pair is updated.\n```sql\n<value>```\nThe new key to be inserted into the OBJECT value or an existing key whose value is being updated. The specified key must\nbe different from all existing keys in the OBJECT value, unless updateFlag is set to TRUE.\n```sql\n<updateFlag>```\nThe value associated with the key.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/object_insert)\n",
	"object_keys":                            "```sql\nOBJECT_KEYS( <object> )\n```\n```sql\n<object>```\nThe value for which you want the keys. The input value must be one of the following:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/object_keys)\n",
	"object_pick":                            "```sql\nOBJECT_PICK( <object>, <key1> [, <key2>, ... ] )\n\nOBJECT_PICK( <object>, <array> )\n```\n```sql\n<object>```\nThe input object.\n```sql\n<key1>```\nOne or more keys identifying the key-value pairs that should be included in the returned object.\n```sql\n<array>```\nArray of keys identifying the key-value pairs that should be included in the returned object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/object_pick)\n",
	"octet_length":                           "```sql\nOCTET_LENGTH(<string_or_binary>)\n```\n```sql\n<string_or_binary>```\nThe string or binary value for which the length is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/octet_length)\n",
	"parse_document-snowflake-cortex":        "```sql\nSNOWFLAKE.CORTEX.PARSE_DOCUMENT( \"@<stage>\", \"<path>\", [ { \"mode\": \"<mode>\" }, ] )\n```\n```sql\n<stage>```\nRequired:\n```sql\n<path>```\nName of the Snowflake stage.\n```sql\n<mode>```\nRelative path to the document on the Snowflake stage.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/parse_document)\n",
	"parse_ip":                               "```sql\nPARSE_IP(<expr>, \"<type>\" [, <permissive>])\n```\n```sql\n<expr>```\nRequired:\n```sql\n<type>```\nA string expression.\n```sql\n<permissive>```\nA string that identifies the type of IP address. Supports either INET or CIDR; the value is\ncase-insenstitive.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/parse_ip)\n",
	"parse_json":                             "```sql\nPARSE_JSON( <expr> [ , \"<parameter>\" ] )\n```\n```sql\n<expr>```\nRequired:\n```sql\n<\">```\nAn expression of string type (for example, VARCHAR) that holds valid JSON information.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/parse_json)\n",
	"parse_url":                              "```sql\nPARSE_URL(<string>, [<permissive>])\n```\n```sql\n<string>```\nRequired:\n```sql\n<permissive>```\nString to parse.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/parse_url)\n",
	"parse_xml":                              "```sql\nPARSE_XML( <string_containing_xml> [ , <disable_auto_convert> ] )\n```\n```sql\n<string_containing_xml>```\nRequired:\n```sql\n<disable_auto_convert>```\nThis expression should evaluate to a VARCHAR. The VARCHAR should contain valid XML.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/parse_xml)\n",
	"percent_rank":                           "```sql\nPERCENT_RANK()\n  OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] [ <fixedRangeFrame> ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/percent_rank)\n",
	"percentile_cont":                        "```sql\nPERCENTILE_CONT( <percentile> ) WITHIN GROUP (ORDER BY <order_by_expr>)\n```\n```sql\n<percentile>```\nThe percentile of the value that you want to find. The percentile must be a\nconstant between 0.0 and 1.0. For example, if you want to find the value\nat the 90th percentile, specify 0.9.\n```sql\n<order_by_expr>```\nThe expression (typically a column name) by which to order the values. For\nexample, if you want to want to find the student whose math SAT score is at\nthe 90th percentile, then specify the column containing the math SAT score.\n```sql\n<expr3>```\nNote that this is also implicitly the column from which the returned value\nis chosen. For example, if you order by math SAT scores, then the result\nis one of the math SAT scores. You cannot order by one column and get\na percentile value for a different column.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/percentile_cont)\n",
	"percentile_disc":                        "```sql\nPERCENTILE_DISC( <percentile> ) WITHIN GROUP (ORDER BY <order_by_expr> )\n```\n```sql\n<percentile>```\nThe percentile of the value that you want to find. The percentile must be a\nconstant between 0.0 and 1.0. For example, if you want to find the value\nat the 90th percentile, specify 0.9.\n```sql\n<order_by_expr>```\nThe expression (typically a column name) by which to order the values. For\nexample, if you want to want to find the student whose math SAT score is at\nthe 90th percentile, then specify the column containing the math SAT score.\n```sql\n<expr3>```\nNote that this is also implicitly the column from which the returned value\nis chosen. For example, if you order by math SAT scores, then the result\nis one of the math SAT scores. You cannot order by one column and get\na percentile value for a different column.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/percentile_disc)\n",
	"pi":                                     "```sql\nPI()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/pi)\n",
	"pipe_usage_history":                     "```sql\nPIPE_USAGE_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [, DATE_RANGE_END => <constant_expr> ]\n      [, PIPE_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<PIPE_NAME>```\nThe date/time range, within the last 2 weeks, for which to retrieve the data load history:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/pipe_usage_history)\n",
	"policy_context":                         "```sql\nEXECUTE USING\nPOLICY_CONTEXT( <arg_1> => \"<string_literal>\" [ , <arg_2> => \"<string_literal>\" , ... , <arg_n> => \"<string_literal>\" ] )\nAS\nSELECT <query>\n```\n```sql\n<arg_1>```\nSpecifies a context function and its value as a string.\n```sql\n<arg_2>```\nRequired. You must specify at least one function and its value.\n```sql\n<query>```\nSnowflake supports the following context functions and their values as arguments:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/policy_context)\n",
	"policy_references":                      "```sql\nPOLICY_REFERENCES(\n      POLICY_NAME => \"<string>\" ,\n      POLICY_KIND => \"NETWORK_POLICY\"\n      )\n```\n```sql\n<POLICY_NAME>```\nSpecifies the policy name.\n```sql\n<POLICY_KIND>```\nThe entire policy name must be enclosed in single quotes.\n```sql\n<REF_ENTITY_NAME>```\nIf the policy name is case-sensitive or includes any special characters or spaces, double quotes are required to process the\ncase/characters. The double quotes must be enclosed within the single quotes (i.e. \"\"<policy_name>\"\").\n```sql\n<REF_ENTITY_DOMAIN>```\nCurrently, Snowflake supports the following policies when specifying the policy name as an argument:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/policy_references)\n",
	"position":                               "```sql\nPOSITION( <expr1>, <expr2> [ , <start_pos> ] )\n\nPOSITION( <expr1> IN <expr2> )\n```\n```sql\n<expr1>```\nRequired:\n```sql\n<expr2>```\nA string or binary expression representing the value to look for.\n```sql\n<start_pos>```\nA string or binary expression representing the value to search.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/position)\n",
	"pow":                                    "```sql\nPOW(x, y)\n\nPOWER (x, y)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/pow)\n",
	"previous_day":                           "```sql\nPREVIOUS_DAY( <date_or_time_expr> , <dow> )\n```\n```sql\n<date_or_time_expr>```\nSpecifies the input date; can be a date or timestamp.\n```sql\n<dow_string>```\nSpecifies the day of week used to calculate the date for the previous day. The value can be a string literal or an expression that returns a string. The string\nmust start with the first two characters (case-insensitive) of the day name:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/previous_day)\n",
	"query_acceleration_history":             "```sql\nQUERY_ACCELERATION_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [ , DATE_RANGE_END => <constant_expr> ]\n      [ , WAREHOUSE_NAME => \"<string>\" ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/query_acceleration_history)\n",
	"query_history":                          "```sql\nQUERY_HISTORY(\n      [ END_TIME_RANGE_START => <constant_expr> ]\n      [, END_TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <num> ] )\n\nQUERY_HISTORY_BY_SESSION(\n      [ SESSION_ID => <constant_expr> ]\n      [, END_TIME_RANGE_START => <constant_expr> ]\n      [, END_TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <num> ] )\n\nQUERY_HISTORY_BY_USER(\n      [ USER_NAME => \"<string>\" ]\n      [, END_TIME_RANGE_START => <constant_expr> ]\n      [, END_TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <num> ] )\n\nQUERY_HISTORY_BY_WAREHOUSE(\n      [ WAREHOUSE_NAME => \"<string>\" ]\n      [, END_TIME_RANGE_START => <constant_expr> ]\n      [, END_TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <num> ] )\n```\n```sql\n<END_TIME_RANGE_START>```\nAll the arguments are optional.\n```sql\n<SESSION_ID>```\nTime range (in TIMESTAMP_LTZ format), within the last 7 days, in which the query completed running:\n```sql\n<USER_NAME>```\nIf END_TIME_RANGE_END is not specified, the function returns all queries, including those that are still running.\n```sql\n<WAREHOUSE_NAME>```\nIf END_TIME_RANGE_END is CURRENT_TIMESTAMP, the function returns only those queries that have completed.\n```sql\n<RESULT_LIMIT>```\nIf the time range does not fall within the last 7 days, an error is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/query_history)\n",
	"radians":                                "```sql\nRADIANS( <real_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/radians)\n",
	"random":                                 "```sql\nRANDOM([seed])\n```\n```sql\n<seed>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/random)\n",
	"randstr":                                "```sql\nRANDSTR( <length> , <gen> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/randstr)\n",
	"rank":                                   "```sql\nRANK() OVER ( [ PARTITION BY <expr1> ] ORDER BY <expr2> [ { ASC | DESC } ] [ <window_frame> ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/rank)\n",
	"ratio_to_report":                        "```sql\nRATIO_TO_REPORT( <expr1> ) [ OVER ( [ PARTITION BY <expr2> ] [ ORDER BY <expr3> ] ) ]\n```\n```sql\n<expr1>```\nThis is an expression that evaluates to a numeric data type (INTEGER, FLOAT, DECIMAL, etc.).\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the optional expression to order by within each partition. Note that for this function, the order within\nthe partition does not affect the output.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/ratio_to_report)\n",
	"reduce":                                 "```sql\nREDUCE( <array> , <init> , <lambda_expression> )\n```\n```sql\n<array>```\nThe array that contains the elements to be reduced. The array can be semi-structured or structured.\n```sql\n<init>```\nThe initial accumulator value.\n```sql\n<lambda_expression>```\nA lambda expression that defines the reduce\nlogic on each array element.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/reduce)\n",
	"regexp":                                 "```sql\n<subject> [ NOT ] REGEXP <pattern>\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nThe string to search for matches.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regexp)\n",
	"regexp_count":                           "```sql\nREGEXP_COUNT( <subject> , <pattern> [ , <position> , <parameters> ] )\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nThe string to search for matches.\n```sql\n<position>```\nPattern to match.\n```sql\n<parameters>```\nFor guidelines on specifying patterns, see String functions (regular expressions).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regexp_count)\n",
	"regexp_instr":                           "```sql\nREGEXP_INSTR( <subject> , <pattern> [ , <position> [ , <occurrence> [ , <option> [ , <regexp_parameters> [ , <group_num> ] ] ] ] ] )\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nThe string to search for matches.\n```sql\n<position>```\nPattern to match.\n```sql\n<occurrence>```\nFor guidelines on specifying patterns, see String functions (regular expressions).\n```sql\n<option>```\nOptional:\n```sql\n<regexp_parameters>```\nNumber of characters from the beginning of the string where the function starts searching for matches.\n```sql\n<group_num>```\nDefault: 1 (the search for a match starts at the first character on the left)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regexp_instr)\n",
	"regexp_like":                            "```sql\nREGEXP_LIKE( <subject> , <pattern> [ , <parameters> ] )\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nThe string to search for matches.\n```sql\n<parameters>```\nPattern to match.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regexp_like)\n",
	"regexp_replace":                         "```sql\nREGEXP_REPLACE( <subject> , <pattern> [ , <replacement> , <position> , <occurrence> , <parameters> ] )\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nThe string to search for matches.\n```sql\n<replacement>```\nPattern to match.\n```sql\n<position>```\nFor guidelines on specifying patterns, see String functions (regular expressions).\n```sql\n<occurrence>```\nOptional:\n```sql\n<parameters>```\nString that replaces the substrings matched by the pattern. If an empty string is specified, the function removes all matched patterns and returns the resulting string.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regexp_replace)\n",
	"regexp_substr":                          "```sql\nREGEXP_SUBSTR( <subject> , <pattern> [ , <position> [ , <occurrence> [ , <regex_parameters> [ , <group_num> ] ] ] ] )\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nThe string to search for matches.\n```sql\n<position>```\nPattern to match.\n```sql\n<occurrence>```\nFor guidelines on specifying patterns, see String functions (regular expressions).\n```sql\n<regex_parameters>```\nOptional:\n```sql\n<group_num>```\nNumber of characters from the beginning of the string where the function starts searching for matches.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regexp_substr)\n",
	"regexp_substr_all":                      "```sql\nREGEXP_SUBSTR_ALL( <subject> , <pattern> [ , <position> [ , <occurrence> [ , <regex_parameters> [ , <group_num> ] ] ] ] )\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nThe string to search for matches.\n```sql\n<position>```\nPattern to match.\n```sql\n<occurrence>```\nFor guidelines on specifying patterns, see String functions (regular expressions).\n```sql\n<regex_parameters>```\nOptional:\n```sql\n<group_num>```\nNumber of characters from the beginning of the string where the function starts searching for matches.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regexp_substr_all)\n",
	"regr_avgx":                              "```sql\nREGR_AVGX(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_avgx)\n",
	"regr_avgy":                              "```sql\nREGR_AVGY(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_avgy)\n",
	"regr_count":                             "```sql\nREGR_COUNT(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_count)\n",
	"regr_intercept":                         "```sql\nREGR_INTERCEPT(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_intercept)\n",
	"regr_r2":                                "```sql\nREGR_R2(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_r2)\n",
	"regr_slope":                             "```sql\nREGR_SLOPE(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_slope)\n",
	"regr_sxx":                               "```sql\nREGR_SXX(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_sxx)\n",
	"regr_sxy":                               "```sql\nREGR_SXY(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_sxy)\n",
	"regr_syy":                               "```sql\nREGR_SYY(y, x)\n```\n```sql\n<y>```\nThe dependent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<x>```\nThe independent variable. This must be an expression that can be evaluated to a numeric type.\n```sql\n<expr3>```\nThis is the optional expression used to group rows into partitions.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_syy)\n",
	"regr_valx":                              "```sql\nREGR_VALX( <y> , <x> )\n```\n```sql\n<y>```\nAn expression that evaluates to type DOUBLE or that can be cast to DOUBLE.\n```sql\n<x>```\nAn expression that evaluates to type DOUBLE or that can be cast to DOUBLE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_valx)\n",
	"regr_valy":                              "```sql\nREGR_VALY( <y> , <x> )\n```\n```sql\n<y>```\nAn expression that evaluates to type DOUBLE or that can be cast to DOUBLE.\n```sql\n<x>```\nAn expression that evaluates to type DOUBLE or that can be cast to DOUBLE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/regr_valy)\n",
	"repeat":                                 "```sql\nREPEAT(<input>, <n>)\n```\n```sql\n<input>```\nThe input string from which the output string is built.\n```sql\n<n>```\nThe number of times the input string should be repeated. The minimum\nvalid number is 0 (which results in an empty string).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/repeat)\n",
	"replace":                                "```sql\nREPLACE( <subject> , <pattern> [ , <replacement> ] )\n```\n```sql\n<subject>```\nThe subject is the string in which to do the replacements. Typically,\nthis is a column, but it can be a literal.\n```sql\n<pattern>```\nThis is the substring that you want to replace. Typically, this is a literal,\nbut it can be a column or expression. Note that this is not a “regular\nexpression”; if you want to use regular expressions to search for a\npattern, use the REGEXP_REPLACE function.\n```sql\n<replacement>```\nThis is the value used as a replacement for the pattern. If this\nis omitted, or is an empty string, then the REPLACE function simply\ndeletes all occurrences of the pattern.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/replace)\n",
	"replication_group_refresh_history":      "```sql\nREPLICATION_GROUP_REFRESH_HISTORY( \"<secondary_group_name>\" )\n```\n```sql\n<secondary_group_name>```\nName of the secondary group. Note that the entire name must be enclosed in single quotes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/replication_group_refresh_history)\n",
	"replication_group_refresh_progress":     "```sql\nREPLICATION_GROUP_REFRESH_PROGRESS( \"<secondary_group_name>\" )\n\nREPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB( \"<query_id>\" )\n```\n```sql\n<secondary_group_name>```\nName of the secondary replication or failover group. Note that the entire name must be enclosed in single quotes.\n```sql\n<query_id>```\nID of the replication group refresh query. The query ID can be obtained from the History  page in the web\ninterface.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/replication_group_refresh_progress)\n",
	"replication_group_usage_history":        "```sql\nREPLICATION_GROUP_USAGE_HISTORY(\n   [ DATE_RANGE_START => <constant_expr> ]\n   [, DATE_RANGE_END => <constant_expr> ]\n   [, REPLICATION_GROUP_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<REPLICATION_GROUP_NAME>```\nThe date/time range, within the last 2 weeks, for which to retrieve the data load history:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/replication_group_usage_history)\n",
	"replication_usage_history":              "```sql\nREPLICATION_USAGE_HISTORY(\n  [ DATE_RANGE_START => <constant_expr> ]\n  [ , DATE_RANGE_END => <constant_expr> ]\n  [ , DATABASE_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<DATABASE_NAME>```\nThe date/time range to display the database replication history:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/replication_usage_history)\n",
	"rest_event_history":                     "```sql\nREST_EVENT_HISTORY(\n      REST_SERVICE_TYPE => \"scim\"\n      [, TIME_RANGE_START => <constant_expr> ]\n      [, TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <integer> ] )\n```\n```sql\n<REST_SERVICE_TYPE>```\nRequired:\n```sql\n<TIME_RANGE_START>```\nThe type of REST API service. Currently, Snowflake only supports SCIM.\n```sql\n<RESULT_LIMIT>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/rest_event_history)\n",
	"result_scan":                            "```sql\nRESULT_SCAN ( { \"<query_id>\" | <query_index>  | LAST_QUERY_ID() } )\n```\n```sql\n<query_id>```\nA specification of a query you executed within the last 24 hours in any session, an integer index of a query in the\ncurrent session, or the LAST_QUERY_ID function, which returns the ID of a query within your current session.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/result_scan)\n",
	"reverse":                                "```sql\nREVERSE(<subject>)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/reverse)\n",
	"right":                                  "```sql\nRIGHT( <string_expr> , <length_expr> )\n```\n```sql\n<string_expr>```\nAn expression that evaluates to a VARCHAR or BINARY value.\n```sql\n<length_expr>```\nAn expression that evaluates to an integer. It specifies:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/right)\n",
	"rlike":                                  "```sql\n-- 1st syntax\nRLIKE( <subject> , <pattern> [ , <parameters> ] )\n\n-- 2nd syntax\n<subject> [ NOT ] RLIKE <pattern>\n```\n```sql\n<subject>```\nRequired:\n```sql\n<pattern>```\nThe string to search for matches.\n```sql\n<parameters>```\nPattern to match.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/rlike)\n",
	"round":                                  "```sql\nROUND( <input_expr> [ , <scale_expr> [ , <rounding_mode> ] ] )\n```\n```sql\n<input_expr>```\nRequired:\n```sql\n<scale_expr>```\nThe value or expression to operate on. The data type should be one of the numeric data types, such as FLOAT or NUMBER.\n```sql\n<rounding_mode>```\nIf you specify the EXPR => named argument, you must also specify the SCALE => named argument.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/round)\n",
	"row_number":                             "```sql\nROW_NUMBER() OVER (\n  [ PARTITION BY <expr1> [, <expr2> ... ] ]\n  ORDER BY <expr3> [ , <expr4> ... ] [ { ASC | DESC } ]\n  )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/row_number)\n",
	"rpad":                                   "```sql\nRPAD( <base>, <length_expr> [, <pad>] )\n```\n```sql\n<base>```\nA VARCHAR or BINARY value.\n```sql\n<length_expr>```\nAn expression that evaluates to an integer. It specifies:\n```sql\n<pad>```\nThe number of UTF-8 characters to return if the input is VARCHAR.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/rpad)\n",
	"rtrim":                                  "```sql\nRTRIM(<expr> [, <characters> ])\n```\n```sql\n<expr>```\nThe string expression to be trimmed.\n```sql\n<characters>```\nOne or more characters to remove from the right side of expr:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/rtrim)\n",
	"rtrimmed_length":                        "```sql\nRTRIMMED_LENGTH( <string_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/rtrimmed_length)\n",
	"sanitize_webhook_content":               "```sql\nSNOWFLAKE.NOTIFICATION.SANITIZE_WEBHOOK_CONTENT( <message> )\n```\n```sql\n<message>```\nA VARCHAR value containing the message to sanitize.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sanitize_webhook_content)\n",
	"scheduled_time":                         "```sql\nSNOWFLAKE.ALERT.SCHEDULED_TIME()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/scheduled_time)\n",
	"search":                                 "```sql\nSEARCH( <search_data>, <search_string> [ , ANALYZER => \"<analyzer_name>\" ] )\n```\n```sql\n<search_data>```\nThe data you want to search, expressed as a comma-delimited list of string literals, column names, or\npaths to fields in VARIANT columns. The search data can\nalso be a single literal string, which can be useful when you are testing the function.\n```sql\n<search_string>```\nYou can specify the wildcard character (*), where * expands to all qualifying columns in all of the\ntables that are in scope for the function. Qualifying columns are those that have VARCHAR (text), VARIANT,\nARRAY, and OBJECT data types. VARIANT, ARRAY, and OBJECT data is converted to text for searching.\n```sql\n<ANALYZER>```\nWhen you pass a wildcard to the function, you can qualify the wildcard with the name or alias for the table.\nFor example, to pass in all of the columns from the table named mytable, specify the following:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/search)\n",
	"search_ip":                              "```sql\nSEARCH_IP( <search_data>, <search_string> )\n```\n```sql\n<search_data>```\nThe data you want to search, expressed as a comma-delimited list of string literals, column names, or\npaths to fields in VARIANT columns. The search data can\nalso be a single literal string, which can be useful when you are testing the function.\n```sql\n<search_string>```\nYou can specify the wildcard character (*), where * expands to all qualifying columns in all of the\ntables that are in scope for the function. Qualifying columns are those that have VARCHAR (text), VARIANT,\nARRAY, and OBJECT data types. VARIANT, ARRAY, and OBJECT data is converted to text for searching. You can\nalso use the ILIKE and EXCLUDE keywords for filtering.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/search_ip)\n",
	"search_optimization_history":            "```sql\nSEARCH_OPTIMIZATION_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [ , DATE_RANGE_END => <constant_expr> ]\n      [ , TABLE_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<TABLE_NAME>```\nThe date/time range for which to display the history.\nFor example, if you specify that the start date is 2019-04-03 and the end date is 2019-04-05, then you get data for\nApril 3, April 4, and April 5. (The endpoints are included.)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/search_optimization_history)\n",
	"search_preview-snowflake-cortex":        "```sql\nSNOWFLAKE.CORTEX.SEARCH_PREVIEW(\n    \"<service_name>\",\n    \"<query_parameters_object>\"\n)\n```\n```sql\n<service_name>```\nName of your Cortex Search service. Use the fully qualified name if the service is in a schema different from the current session.\n```sql\n<query_parameters_object>```\nA STRING that contains a JSON object that specifies the query parameters for invoking the service.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/search_preview)\n",
	"sentiment-snowflake-cortex":             "```sql\nSNOWFLAKE.CORTEX.SENTIMENT(<text>)\n```\n```sql\n<text>```\nA string containing the text for which a sentiment score should be calculated.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sentiment)\n",
	"seq1":                                   "```sql\nSEQ1( [0|1] )\n\nSEQ2( [0|1] )\n\nSEQ4( [0|1] )\n\nSEQ8( [0|1] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/seq1)\n",
	"serverless_alert_history":               "```sql\nSERVERLESS_ALERT_HISTORY(\n  [ DATE_RANGE_START => <constant_expr> ]\n  [ , DATE_RANGE_END => <constant_expr> ]\n  [ , ALERT_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll of the arguments are optional.\n```sql\n<ALERT_NAME>```\nDate/time range of the usage window:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/serverless_alert_history)\n",
	"serverless_task_history":                "```sql\nSERVERLESS_TASK_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [ , DATE_RANGE_END => <constant_expr> ]\n      [ , TASK_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll of the arguments are optional.\n```sql\n<TASK_NAME>```\nDate/time range of the usage window:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/serverless_task_history)\n",
	"sha1":                                   "```sql\nSHA1(<msg>)\n\nSHA1_HEX(<msg>)\n```\n```sql\n<msg>```\nA string expression, the message to be hashed.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sha1)\n",
	"sha1_binary":                            "```sql\nSHA1_BINARY(<msg>)\n```\n```sql\n<msg>```\nA string expression, the message to be hashed.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sha1_binary)\n",
	"sha2":                                   "```sql\nSHA2( <msg> [, <digest_size>] )\n\nSHA2_HEX( <msg> [, <digest_size>] )\n```\n```sql\n<msg>```\nRequired:\n```sql\n<digest_size>```\nA string expression, the message to be hashed\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sha2)\n",
	"sha2_binary":                            "```sql\nSHA2_BINARY(<msg> [, <digest_size>])\n```\n```sql\n<msg>```\nRequired:\n```sql\n<digest_size>```\nA string expression, the message to be hashed\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sha2_binary)\n",
	"show_python_packages_dependencies":      "```sql\nSNOWFLAKE.SNOWPARK.SHOW_PYTHON_PACKAGES_DEPENDENCIES( \"<Python_runtime_version>\", \"<packages_list>\" )\n```\n```sql\n<Python_runtime_version>```\nString specifying the version of the Python runtime.\n```sql\n<packages_list>```\nARRAY of strings that specify the list of packages to check.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/show_python_packages_dependencies)\n",
	"sign":                                   "```sql\nSIGN( <expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sign)\n",
	"sin":                                    "```sql\nSIN( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number. The value should be in\nradians, not degrees.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sin)\n",
	"sinh":                                   "```sql\nSINH( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sinh)\n",
	"skew":                                   "```sql\nSKEW( <expr> )\n```\n```sql\n<expr>```\nThis is an expression that evaluates to a numeric data type (INTEGER, FLOAT, DECIMAL, etc.).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/skew)\n",
	"soundex":                                "```sql\nSOUNDEX( <varchar_expr> )\n```\n```sql\n<varchar_expr>```\nThe string for which a representation of the pronunciation is returned. The string should use the Latin or Unicode character set.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/soundex)\n",
	"soundex_p123":                           "```sql\nSOUNDEX_P123( <varchar_expr> )\n```\n```sql\n<varchar_expr>```\nThe string for which a representation of the pronunciation is returned. The string should use the Latin or Unicode character set.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/soundex_p123)\n",
	"space":                                  "```sql\nSPACE(<n>)\n```\n```sql\n<n>```\nThe number of blank spaces used to build the string.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/space)\n",
	"split":                                  "```sql\nSPLIT(<string>, <separator>)\n```\n```sql\n<string>```\nText to be split into parts.\n```sql\n<separator>```\nText to split string by.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/split)\n",
	"split_part":                             "```sql\nSPLIT_PART(<string>, <delimiter>, <partNumber>)\n```\n```sql\n<string>```\nText to be split into parts.\n```sql\n<delimiter>```\nText representing the delimiter to split by.\n```sql\n<partNumber>```\nRequested part of the split (1-based).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/split_part)\n",
	"split_text_recursive_character-snowflake-cortex": "```sql\nSNOWFLAKE.CORTEX.SPLIT_TEXT_RECURSIVE_CHARACTER (\n  \"<text_to_split>\",\n  \"<format>\",\n  <chunk_size>,\n  [ <overlap> ],\n  [ <separators> ]\n)\n```\n```sql\n<\">```\nRequired:\n```sql\n<\">```\nThe text to split.\n```sql\n<chunk_size>```\nThe format of your input text, which determines the default separators in the splitting algorithm. Must be one of the following:\n```sql\n<overlap>```\nnone: No format-specific separators. Only the separators in the separators field are used for splitting.\n```sql\n<separators>```\nmarkdown: Separates on headers, code blocks, and tables, in addition to any separators in the separators field.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/split_text_recursive_character)\n",
	"split_to_table":          "```sql\nSPLIT_TO_TABLE(<string>, <delimiter>)\n```\n```sql\n<string>```\nText to be split.\n```sql\n<delimiter>```\nText to split the string by.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/split_to_table)\n",
	"sqrt":                    "```sql\nSQRT(expr)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sqrt)\n",
	"square":                  "```sql\nSQUARE(expr)\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/square)\n",
	"st_area":                 "```sql\nST_AREA( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_area)\n",
	"st_asewkb":               "```sql\nST_ASEWKB( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_asewkb)\n",
	"st_asewkt":               "```sql\nST_ASEWKT( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_asewkt)\n",
	"st_asgeojson":            "```sql\nST_ASGEOJSON( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_asgeojson)\n",
	"st_aswkb":                "```sql\nST_ASWKB( <geography_or_geometry_expression> )\n\nST_ASBINARY( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_aswkb)\n",
	"st_aswkt":                "```sql\nST_ASWKT( <geography_or_geometry_expression> )\n\nST_ASTEXT( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_aswkt)\n",
	"st_azimuth":              "```sql\nST_AZIMUTH( <geography_expression_for_origin> , <geography_expression_for_target> )\nST_AZIMUTH( <geometry_expression_for_origin> , <geometry_expression_for_target> )\n```\n```sql\n<geography_expression_for_origin>```\nA GEOGRAPHY object that is a Point representing the origin (where the observer is located).\n```sql\n<geography_expression_for_target>```\nA GEOGRAPHY object that is a Point for which you want to calculate the azimuth.\n```sql\n<geometry_expression_for_origin>```\nA GEOMETRY object that is a Point representing the origin (where the observer is located).\n```sql\n<geometry_expression_for_target>```\nA GEOMETRY object that is a Point for which you want to calculate the azimuth.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_azimuth)\n",
	"st_buffer":               "```sql\nST_BUFFER( <geometry_expression> , <distance> )\n```\n```sql\n<geometry_expression>```\nThe argument must be an expression of type GEOMETRY.\n```sql\n<distance>```\nThe distance from the GEOMETRY object. To “shrink” the object, you can specify a negative value for the distance.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_buffer)\n",
	"st_centroid":             "```sql\nST_CENTROID( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_centroid)\n",
	"st_collect":              "```sql\nScalar:\n\n    ST_COLLECT( <geography_expression_1> , <geography_expression_2> )\n\nAggregate:\n\n    ST_COLLECT( <geography_expression_1> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_collect)\n",
	"st_contains":             "```sql\nST_CONTAINS( <geography_expression_1> , <geography_expression_2> )\n\nST_CONTAINS( <geometry_expression_1> , <geometry_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geometry_expression_1>```\nA GEOMETRY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geometry_expression_2>```\nA GEOMETRY object that is not a GeometryCollection or FeatureCollection.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_contains)\n",
	"st_coveredby":            "```sql\nST_COVEREDBY( <geography_expression_1> , <geography_expression_2> )\n\nST_COVEREDBY( <geometry_expression_1> , <geometry_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geometry_expression_1>```\nA GEOMETRY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geometry_expression_2>```\nA GEOMETRY object that is not a GeometryCollection or FeatureCollection.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_coveredby)\n",
	"st_covers":               "```sql\nST_COVERS( <geography_expression_1> , <geography_expression_2> )\n\nST_COVERS( <geometry_expression_1> , <geometry_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geometry_expression_1>```\nA GEOMETRY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geometry_expression_2>```\nA GEOMETRY object that is not a GeometryCollection or FeatureCollection.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_covers)\n",
	"st_difference":           "```sql\nST_DIFFERENCE( <geography_expression_1> , <geography_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_difference)\n",
	"st_dimension":            "```sql\nST_DIMENSION( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_dimension)\n",
	"st_disjoint":             "```sql\nST_DISJOINT( <geography_expression_1> , <geography_expression_2> )\n\nST_DISJOINT( <geometry_expression_1> , <geometry_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object.\n```sql\n<geometry_expression_1>```\nA GEOMETRY object.\n```sql\n<geometry_expression_2>```\nA GEOMETRY object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_disjoint)\n",
	"st_distance":             "```sql\nST_DISTANCE( <geography_or_geometry_expression_1> , <geography_or_geometry_expression_2> )\n```\n```sql\n<geography_or_geometry_expression_1>```\nThe argument must be of type GEOGRAPHY or GEOMETRY.\n```sql\n<geography_or_geometry_expression_2>```\nThe argument must be of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_distance)\n",
	"st_dwithin":              "```sql\nST_DWITHIN( <geography_expression_1> , <geography_expression_2> , <distance_in_meters> )\n```\n```sql\n<geography_expression_1>```\nThe argument must be an expression of type GEOGRAPHY.\n```sql\n<geography_expression_2>```\nThe argument must be an expression of type GEOGRAPHY.\n```sql\n<distance_in_meters>```\nThe argument must be an expression of type REAL. The distance is in meters.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_dwithin)\n",
	"st_endpoint":             "```sql\nST_ENDPOINT( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY that represents a LineString.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_endpoint)\n",
	"st_envelope":             "```sql\nST_ENVELOPE( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_envelope)\n",
	"st_geogfromgeohash":      "```sql\nST_GEOGFROMGEOHASH( <geohash> [, <precision> ] )\n```\n```sql\n<geohash>```\nRequired:\n```sql\n<precision>```\nThe argument must be a geohash.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geogfromgeohash)\n",
	"st_geogpointfromgeohash": "```sql\nST_GEOGPOINTFROMGEOHASH( <geohash> )\n```\n```sql\n<geohash>```\nThe argument must be a geohash.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geogpointfromgeohash)\n",
	"st_geographyfromwkb":     "```sql\nST_GEOGRAPHYFROMWKB( <varchar_or_binary_expression> [ , <allow_invalid> ] )\n\nST_GEOGFROMWKB( <varchar_or_binary_expression> [ , <allow_invalid> ] )\n\nST_GEOGRAPHYFROMEWKB( <varchar_or_binary_expression> [ , <allow_invalid> ] )\n\nST_GEOGFROMEWKB( <varchar_or_binary_expression> [ , <allow_invalid> ] )\n```\n```sql\n<varchar_or_binary_expression>```\nRequired:\n```sql\n<allow_invalid>```\nThe argument must be a string or binary expression in WKB or EWKB that represents a valid geospatial object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geographyfromwkb)\n",
	"st_geographyfromwkt":     "```sql\nST_GEOGRAPHYFROMWKT( <varchar_expression> [ , <allow_invalid> ] )\n\nST_GEOGFROMWKT( <varchar_expression> [ , <allow_invalid> ] )\n\nST_GEOGRAPHYFROMEWKT( <varchar_expression> [ , <allow_invalid> ] )\n\nST_GEOGFROMEWKT( <varchar_expression> [ , <allow_invalid> ] )\n\nST_GEOGRAPHYFROMTEXT( <varchar_expression> [ , <allow_invalid> ] )\n\nST_GEOGFROMTEXT( <varchar_expression> [ , <allow_invalid> ] )\n```\n```sql\n<varchar_expression>```\nRequired:\n```sql\n<allow_invalid>```\nThe argument must be a string expression in WKT or EWKT that represents a valid geospatial object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geographyfromwkt)\n",
	"st_geohash":              "```sql\nST_GEOHASH( <geography_expression> [, <precision> ] )\n\nST_GEOHASH( <geometry_expression> [, <precision> ] )\n```\n```sql\n<geography_expression>```\nRequired:\n```sql\n<geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY.\n```sql\n<precision>```\nThe argument must be an expression of type GEOMETRY with the SRID 4326.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geohash)\n",
	"st_geometryfromwkb":      "```sql\nST_GEOMETRYFROMWKB( <varchar_or_binary_expression> [ , <srid> ]  [ , <allow_invalid> ] )\n\nST_GEOMFROMWKB( <varchar_or_binary_expression> [ , <srid> ]  [ , <allow_invalid> ] )\n\nST_GEOMETRYFROMEWKB( <varchar_or_binary_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nST_GEOMFROMEWKB( <varchar_or_binary_expression> [ , <srid> ] [ , <allow_invalid> ] )\n```\n```sql\n<varchar_or_binary_expression>```\nRequired:\n```sql\n<srid>```\nThe argument must be a string or binary expression in WKB or EWKB that represents a valid geospatial object.\n```sql\n<allow_invalid>```\nA string expression must be in hexadecimal format (without a leading 0x).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geometryfromwkb)\n",
	"st_geometryfromwkt":      "```sql\nST_GEOMETRYFROMWKT( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nST_GEOMFROMWKT( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nST_GEOMETRYFROMEWKT( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nST_GEOMFROMEWKT( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nST_GEOMETRYFROMTEXT( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nST_GEOMFROMTEXT( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )\n```\n```sql\n<varchar_expression>```\nRequired:\n```sql\n<srid>```\nThe argument must be a string expression in WKT or EWKT that represents a valid geospatial object.\n```sql\n<allow_invalid>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geometryfromwkt)\n",
	"st_geomfromgeohash":      "```sql\nST_GEOMFROMGEOHASH( <geohash> [, <precision> ] )\n```\n```sql\n<geohash>```\nRequired:\n```sql\n<precision>```\nThe argument must be a geohash.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geomfromgeohash)\n",
	"st_geompointfromgeohash": "```sql\nST_GEOMPOINTFROMGEOHASH( <geohash> )\n```\n```sql\n<geohash>```\nThe argument must be a geohash.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_geompointfromgeohash)\n",
	"st_hausdorffdistance":    "```sql\nST_HAUSDORFFDISTANCE( <geography_expression_1> , <geography_expression_2> )\n```\n```sql\n<geography_expression_1>```\nThe argument must be an expression of type GEOGRAPHY.\n```sql\n<geography_expression_2>```\nThe argument must be an expression of type GEOGRAPHY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_hausdorffdistance)\n",
	"st_interpolate":          "```sql\nST_INTERPOLATE( <geography_expression> [ , <tolerance> ] )\n```\n```sql\n<geography_expression>```\nRequired:\n```sql\n<tolerance>```\nThe GEOGRAPHY object to interpolate.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_interpolate)\n",
	"st_intersection":         "```sql\nST_INTERSECTION( <geography_expression_1> , <geography_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_intersection)\n",
	"st_intersection_agg":     "```sql\nST_INTERSECTION_AGG( <geography_column> )\n```\n```sql\n<geography_column>```\nA GEOGRAPHY column.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_intersection_agg)\n",
	"st_intersects":           "```sql\nST_INTERSECTS( <geography_expression_1> , <geography_expression_2> )\n\nST_INTERSECTS( <geometry_expression_1> , <geometry_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object.\n```sql\n<geometry_expression_1>```\nA GEOMETRY object.\n```sql\n<geometry_expression_2>```\nA GEOMETRY object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_intersects)\n",
	"st_isvalid":              "```sql\nST_ISVALID( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_isvalid)\n",
	"st_length":               "```sql\nST_LENGTH( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_length)\n",
	"st_makegeompoint":        "```sql\nST_MAKEGEOMPOINT( <longitude> , <latitude> )\n```\n```sql\n<longitude>```\nA REAL that represents the longitude.\n```sql\n<latitude>```\nA REAL that represents the latitude.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_makegeompoint)\n",
	"st_makeline":             "```sql\nST_MAKELINE( <geography_expression_1> , <geography_expression_2> )\n\nST_MAKELINE( <geometry_expression_1> , <geometry_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object containing the points to connect. This object must be a Point, MultiPoint, or LineString.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object containing the points to connect. This object must be a Point, MultiPoint, or LineString.\n```sql\n<geometry_expression_1>```\nA GEOMETRY object containing the points to connect. This object must be a Point, MultiPoint, or LineString.\n```sql\n<geometry_expression_2>```\nA GEOMETRY object containing the points to connect. This object must be a Point, MultiPoint, or LineString.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_makeline)\n",
	"st_makepoint":            "```sql\nST_MAKEPOINT( <longitude> , <latitude> )\n```\n```sql\n<longitude>```\nA REAL that represents the longitude.\n```sql\n<latitude>```\nA REAL that represents the latitude.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_makepoint)\n",
	"st_makepolygon":          "```sql\nST_MAKEPOLYGON( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nA GEOGRAPHY or GEOMETRY object that represents a LineString in which the last point is the same as the first (i.e. a\nloop).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_makepolygon)\n",
	"st_makepolygonoriented":  "```sql\nST_MAKEPOLYGONORIENTED( <geography_expression> )\n```\n```sql\n<geography_expression>```\nA GEOGRAPHY object that represents a LineString in which the last point is the same as the first (i.e. a loop).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_makepolygonoriented)\n",
	"st_npoints":              "```sql\nST_NPOINTS( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_npoints)\n",
	"st_perimeter":            "```sql\nST_PERIMETER( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_perimeter)\n",
	"st_pointn":               "```sql\nST_POINTN( <geography_or_geometry_expression> , <index> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY that represents a LineString.\n```sql\n<index>```\nThe index of the Point to return. The index must be an integer.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_pointn)\n",
	"st_setsrid":              "```sql\nST_SETSRID( <geometry_expression> , <srid> )\n```\n```sql\n<geometry_expression>```\nThe argument must be an expression of type GEOMETRY.\n```sql\n<srid>```\nThe SRID to set in the returned GEOMETRY object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_setsrid)\n",
	"st_simplify":             "```sql\nST_SIMPLIFY( <geography_expression>, <tolerance> [ , <preserve_collapsed> ] )\nST_SIMPLIFY( <geometry_expression>, <tolerance> )\n```\n```sql\n<geography_expression>```\nRequired:\n```sql\n<tolerance>```\nThe GEOGRAPHY or GEOMETRY object to simplify.\n```sql\n<preserve_collapsed>```\nDepending on the type of the GEOGRAPHY or GEOMETRY object, ST_SIMPLIFY has the following effect:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_simplify)\n",
	"st_srid":                 "```sql\nST_SRID( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_srid)\n",
	"st_startpoint":           "```sql\nST_STARTPOINT( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY that represents a LineString.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_startpoint)\n",
	"st_symdifference":        "```sql\nST_SYMDIFFERENCE( <geography_expression_1> , <geography_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_symdifference)\n",
	"st_transform":            "```sql\nST_TRANSFORM( <geometry_expression> [ , <from_srid> ] , <to_srid> );\n```\n```sql\n<geometry_expression>```\nRequired:\n```sql\n<to_srid>```\nThe argument must be of type GEOMETRY.\n```sql\n<from_srid>```\nThe spatial reference system identifier (SRID) that identifies the SRS to use. The function transforms the input GEOMETRY\nobject to a new object that uses this SRS.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_transform)\n",
	"st_union":                "```sql\nST_UNION( <geography_expression_1> , <geography_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_union)\n",
	"st_union_agg":            "```sql\nST_UNION_AGG( <geography_column> )\n```\n```sql\n<geography_column>```\nA GEOGRAPHY column.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_union_agg)\n",
	"st_within":               "```sql\nST_WITHIN( <geography_expression_1> , <geography_expression_2> )\n\nST_WITHIN( <geometry_expression_1> , <geometry_expression_2> )\n```\n```sql\n<geography_expression_1>```\nA GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geography_expression_2>```\nA GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geometry_expression_1>```\nA GEOMETRY object that is not a GeometryCollection or FeatureCollection.\n```sql\n<geometry_expression_2>```\nA GEOMETRY object that is not a GeometryCollection or FeatureCollection.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_within)\n",
	"st_x":                    "```sql\nST_X( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of the type GEOGRAPHY or GEOMETRY and must contain a Point.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_x)\n",
	"st_xmax":                 "```sql\nST_XMAX( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_xmax)\n",
	"st_xmin":                 "```sql\nST_XMIN( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_xmin)\n",
	"st_y":                    "```sql\nST_Y( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of the type GEOGRAPHY or GEOMETRY and must contain a Point.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_y)\n",
	"st_ymax":                 "```sql\nST_YMAX( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_ymax)\n",
	"st_ymin":                 "```sql\nST_YMIN( <geography_or_geometry_expression> )\n```\n```sql\n<geography_or_geometry_expression>```\nThe argument must be an expression of type GEOGRAPHY or GEOMETRY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/st_ymin)\n",
	"stage_directory_file_registration_history": "```sql\nSTAGE_DIRECTORY_FILE_REGISTRATION_HISTORY (\n      STAGE_NAME => \"<string>\"\n      [, START_TIME => <constant_expr> ] )\n```\n```sql\n<STAGE_NAME>```\nRequired:\n```sql\n<START_TIME>```\nA string specifying the name of a stage that has a directory table.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/stage_directory_file_registration_history)\n",
	"stage_storage_usage_history":               "```sql\nSTAGE_STORAGE_USAGE_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [, DATE_RANGE_END => <constant_expr> ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/stage_storage_usage_history)\n",
	"startswith":                                "```sql\nSTARTSWITH( <expr1> , <expr2> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/startswith)\n",
	"stddev":                                    "```sql\n{ STDDEV | STDDEV_SAMP } ( [ DISTINCT ] <expr1> )\n```\n```sql\n<expr1>```\nAn expression that evaluates to a numeric value. This is the expression on which the standard deviation is calculated.\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the optional expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/stddev)\n",
	"stddev_pop":                                "```sql\nSTDDEV_POP( [ DISTINCT ] <expr1>)\n```\n```sql\n<expr1>```\nAn expression that evaluates to a numeric value. This is the expression on which the standard deviation is calculated.\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the optional expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/stddev_pop)\n",
	"strip_null_value":                          "```sql\nSTRIP_NULL_VALUE( <variant_expr> )\n```\n```sql\n<variant_expr>```\nAn expression of type VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/strip_null_value)\n",
	"strtok":                                    "```sql\nSTRTOK(<string> [,<delimiter>] [,<partNr>])\n```\n```sql\n<string>```\nRequired:\n```sql\n<delimiter>```\nText to be tokenized.\n```sql\n<partNr>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/strtok)\n",
	"strtok_split_to_table":                     "```sql\nSTRTOK_SPLIT_TO_TABLE(<string> [,<delimiter_list>])\n```\n```sql\n<string>```\nRequired:\n```sql\n<delimiter_list>```\nText to be tokenized.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/strtok_split_to_table)\n",
	"strtok_to_array":                           "```sql\nSTRTOK_TO_ARRAY(<string> [,<delimiter>])\n```\n```sql\n<string>```\nRequired:\n```sql\n<delimiter>```\nText to be tokenized.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/strtok_to_array)\n",
	"substr":                                    "```sql\nSUBSTR( <base_expr>, <start_expr> [ , <length_expr> ] )\n\nSUBSTRING( <base_expr>, <start_expr> [ , <length_expr> ] )\n```\n```sql\n<base_expr>```\nAn expression that evaluates to a VARCHAR or BINARY value.\n```sql\n<start_expr>```\nAn expression that evaluates to an integer. It specifies the offset from which the substring starts. The offset is measured in:\n```sql\n<length_expr>```\nThe number of UTF-8 characters if the input is a VARCHAR value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/substr)\n",
	"sum":                                       "```sql\nSUM( [ DISTINCT ] <expr1> )\n```\n```sql\n<expr1>```\nThis is an expression that evaluates to a numeric data type (INTEGER, FLOAT, DECIMAL, etc.).\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the optional expression to order by within each partition. (This does not control the order of the\nentire query output.)\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sum)\n",
	"summarize-snowflake-cortex":                "```sql\nSNOWFLAKE.CORTEX.SUMMARIZE(<text>)\n```\n```sql\n<text>```\nA string containing the English text from which a summary should be generated.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/summarize)\n",
	"sysdate":                                   "```sql\nSYSDATE()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/sysdate)\n",
	"system_abort_session":                      "```sql\nSYSTEM$ABORT_SESSION( <session_id> )\n```\n```sql\n<session_id>```\nIdentifier for the session to abort. To obtain the ID for a session, log into the web interface as an account administrator (user with the ACCOUNTADMIN role) and go to:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_abort_session)\n",
	"system_abort_transaction":                  "```sql\nSYSTEM$ABORT_TRANSACTION(<transaction_id>)\n```\n```sql\n<transaction_id>```\nIdentifier for the transaction to abort. To obtain transaction IDs,\nyou can use the SHOW TRANSACTIONS or\nSHOW LOCKS commands.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_abort_transaction)\n",
	"system_add_event":                          "```sql\nSYSTEM$ADD_EVENT(\"<name>\", \"<object>\");\n```\n```sql\n<\">```\nThe name of the event to add.\n```sql\n<\">```\nAn object containing name-value pairs representing the attributes to add.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_add_event)\n",
	"system_allowlist":                          "```sql\nSYSTEM$ALLOWLIST()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_allowlist)\n",
	"system_allowlist_privatelink":              "```sql\nSYSTEM$ALLOWLIST_PRIVATELINK()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_allowlist_privatelink)\n",
	"system_authorize_privatelink":              "```sql\nSYSTEM$AUTHORIZE_PRIVATELINK( \"<aws_id>\" , \"<federated_token>\" )\n```\n```sql\n<\">```\nThe 12-digit identifier that uniquely identifies your Amazon Web Services (AWS) account, as a string.\n```sql\n<\">```\nThe identifier that uniquely identifies your Snowflake account in Microsoft Azure (Azure) as a string.\n```sql\n<\">```\nThe federated token value that contains access credentials for a federated user as a string.\n```sql\n<SubscriptionID>```\nTo obtain this value, execute the appropriate command for the cloud platform that hosts your Snowflake account. Use the command-line tool\nprovided by the platform:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_authorize_privatelink)\n",
	"system_authorize_stage_privatelink_access":             "```sql\n-- Azure\nSYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS( \"<privateEndpointResourceID>\" )\n```\n```sql\n<\">```\nThe unique identifier for the Private Endpoint in Azure.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_authorize_stage_privatelink_access)\n",
	"system_auto_refresh_status":                            "```sql\nSYSTEM$AUTO_REFRESH_STATUS(\"<table_name>\")\n```\n```sql\n<\">```\nThe name of the Iceberg table for which you want to retrieve the current automated refresh status.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_auto_refresh_status)\n",
	"system_behavior_change_bundle_status":                  "```sql\nSYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS( \"<bundle_name>\" )\n```\n```sql\n<bundle_name>```\nName of the behavior change bundle, specified as a string. To obtain the name for a bundle, see\nBehavior change log.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_behavior_change_bundle_status)\n",
	"system_block_internal_stages_public_access":            "```sql\nSYSTEM$BLOCK_INTERNAL_STAGES_PUBLIC_ACCESS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_block_internal_stages_public_access)\n",
	"system_cancel_all_queries":                             "```sql\nSYSTEM$CANCEL_ALL_QUERIES( <session_id> )\n```\n```sql\n<session_id>```\nIdentifier for the session for which to cancel all queries. To obtain the ID for a session, log into the web interface as an account administrator (user with the ACCOUNTADMIN role) and go to:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_cancel_all_queries)\n",
	"system_cancel_query":                                   "```sql\nSYSTEM$CANCEL_QUERY( <query_id> )\n```\n```sql\n<query_id>```\nIdentifier for the query to cancel. To obtain the ID for a query executed within the last 14 days, log into the web interface and go to the History  page.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_cancel_query)\n",
	"system_cleanup_database_role_grants":                   "```sql\nSYSTEM$CLEANUP_DATABASE_ROLE_GRANTS( \"<database_role_name>\" , \"<share_name>\" )\n```\n```sql\n<\">```\nThe name of the database role.\n```sql\n<\">```\nIf the identifier is not fully qualified in the form of db_name.database_role_name, the command uses the database role\nin the current database for the session.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_cleanup_database_role_grants)\n",
	"system_client_version_info":                            "```sql\nSYSTEM$CLIENT_VERSION_INFO()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_client_version_info)\n",
	"system_clustering_depth":                               "```sql\nSYSTEM$CLUSTERING_DEPTH( \"<table_name>\" , \"( <col1> [ , <col2> ... ] )\" [ , \"<predicate>\" ] )\n```\n```sql\n<table_name>```\nTable for which you want to calculate the clustering depth.\n```sql\n<col1>```\nColumn(s) in the table used to calculate the clustering depth:\n```sql\n<predicate>```\nFor a table with no clustering key, this argument is required. If this argument is omitted, an error is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_clustering_depth)\n",
	"system_clustering_information":                         "```sql\nSYSTEM$CLUSTERING_INFORMATION( \"<table_name>\"\n    [ , { \"( <expr1> [ , <expr2> ... ] )\" | <number_of_errors> } ] )\n```\n```sql\n<table_name>```\nTable for which you want to return clustering information.\n```sql\n<(>```\nColumn names or expressions for which clustering information is returned:\n```sql\n<number_of_errors>```\nFor a table with no clustering key, this argument is required. If this argument is omitted, an error is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_clustering_information)\n",
	"system_clustering_ratio":                               "```sql\nSYSTEM$CLUSTERING_RATIO( \"<table_name>\" , \"( <col1> [ , <col2> ... ] )\" [ , \"<predicate>\" ] )\n```\n```sql\n<table_name>```\nTable for which you want to calculate the clustering ratio.\n```sql\n<col1>```\nColumn(s) in the table used to calculate the clustering ratio:\n```sql\n<predicate>```\nFor a table with no clustering key, this argument is required. If this argument is omitted, an error is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_clustering_ratio)\n",
	"system_commit_move_organization_account":               "```sql\nSYSTEM$COMMIT_MOVE_ORGANIZATION_ACCOUNT( <grace_period> )\n```\n```sql\n<grace_period>```\nSpecifies the number of days after which the organization account in the original region (that is, the source region) will be deleted.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_commit_move_organization_account)\n",
	"system_convert_pipes_sqs_to_sns":                       "```sql\nSYSTEM$CONVERT_PIPES_SQS_TO_SNS( \"<bucket_name>, \"<sns_topic_arn>\" )\n```\n```sql\n<bucket_name>```\nName of the S3 bucket.\n```sql\n<sns_topic_arn>```\nARN of Amazon SNS topic.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_convert_pipes_sqs_to_sns)\n",
	"system_create_billing_event":                           "```sql\nSYSTEM$CREATE_BILLING_EVENT(\n \"<class>\",\n \"<subclass>\",\n <start_timestamp>,\n <timestamp>,\n <base_charge>,\n \"<objects>\",\n \"<additional_info>\"\n )\n```\n```sql\n<\">```\nRequired:\n```sql\n<timestamp>```\nIdentifier for the custom event class.\n```sql\n<base_charge>```\nType: STRING\n```sql\n<\">```\nThe identifier has the following requirements:\n```sql\n<start_timestamp>```\nMust start with a letter (A-Z) or an underscore (“_”).\n```sql\n<\">```\nMust contain only letters, underscores, decimal digits (0-9), and dollar signs (“$”).\n```sql\n<\">```\nLength cannot exceed 64 characters.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_create_billing_event)\n",
	"system_create_billing_events":                          "```sql\nSYSTEM$CREATE_BILLING_EVENTS(\"<json_array_of_events>\")\n```\n```sql\n<\">```\nA STRING containing a JSON array of objects. Each object specifies a billing event.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_create_billing_events)\n",
	"system_current_user_task_name":                         "```sql\nSYSTEM$CURRENT_USER_TASK_NAME()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_current_user_task_name)\n",
	"system_data_metric_scan":                               "```sql\nSYSTEM$DATA_METRIC_SCAN(\n  REF_ENTITY_NAME  => \"<object>\"\n  , METRIC_NAME  => \"<data_metric_function>\"\n  , ARGUMENT_NAME => \"<column>\"\n   [ , AT_TIMESTAMP => \"<timestamp>\" ] )\n```\n```sql\n<REF_ENTITY_NAME>```\nRequired:\n```sql\n<METRIC_NAME>```\nName of the table or view on which the specified data metric function will run. The function returns rows from this object.\n```sql\n<ARGUMENT_NAME>```\nName of the system data metric that you want to run to evaluate the specified table or view. Only the following system functions are\nsupported:\n```sql\n<AT_TIMESTAMP>```\nSNOWFLAKE.CORE.NULL_COUNT\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_data_metric_scan)\n",
	"system_database_refresh_history":                       "```sql\nSYSTEM$DATABASE_REFRESH_HISTORY( \"<secondary_db_name>\" )\n```\n```sql\n<secondary_db_name>```\nName of the secondary database. This argument is optional if the secondary database is the active database in the current session.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_database_refresh_history)\n",
	"system_database_refresh_progress":                      "```sql\nSYSTEM$DATABASE_REFRESH_PROGRESS( \"<secondary_db_name>\" )\n\nSYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB( \"<query_id>\" )\n```\n```sql\n<secondary_db_name>```\nName of the secondary database. This argument is optional if the secondary database is the active database in the current session.\n```sql\n<query_id>```\nNote that the entire name must be enclosed in single quotes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_database_refresh_progress)\n",
	"system_deprovision_privatelink_endpoint":               "```sql\nSYSTEM$DEPROVISION_PRIVATELINK_ENDPOINT( \"<provider_service_name>\" )\n```\n```sql\n<provider_service_name>```\nSpecifies the external service or resource endpoint. For example, com.amazonaws.us-west-2.execute-api for the Amazon API\nGateway or com.amazonaws.us-west-2.s3 for Amazon S3.\n```sql\n<\">```\nSpecifies the fully-qualified identifier for the resource in your VPC or VNet.\n```sql\n<\">```\nSpecifies the name of the subresource of the Azure resource.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_deprovision_privatelink_endpoint)\n",
	"system_disable_behavior_change_bundle":                 "```sql\nSYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE( \"<bundle_name>\" )\n```\n```sql\n<bundle_name>```\nName of the behavior change bundle, specified as a string. To obtain the name for a bundle, see\nBehavior change log.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_disable_behavior_change_bundle)\n",
	"system_disable_database_replication":                   "```sql\nSYSTEM$DISABLE_DATABASE_REPLICATION(\"<db_name>\");\n```\n```sql\n<db_name>```\nSpecifies the identifier for the database.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_disable_database_replication)\n",
	"system_disable_preview_access":                         "```sql\nSYSTEM$DISABLE_PREVIEW_ACCESS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_disable_preview_access)\n",
	"system_enable_behavior_change_bundle":                  "```sql\nSYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE( \"<bundle_name>\" )\n```\n```sql\n<bundle_name>```\nName of the behavior change bundle, specified as a string. To obtain the name for a bundle, see\nBehavior change log.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_enable_behavior_change_bundle)\n",
	"system_enable_preview_access":                          "```sql\nSYSTEM$ENABLE_PREVIEW_ACCESS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_enable_preview_access)\n",
	"system_estimate_automatic_clustering_costs":            "```sql\nSYSTEM$ESTIMATE_AUTOMATIC_CLUSTERING_COSTS( \"<table_name>\" ,\n [ \"( <expr1> [ , <expr2> ... ] )\" ] )\n```\n```sql\n<table_name>```\nName of the table for which you want to return the estimated cost of clustering.\n```sql\n<(>```\nThe proposed cluster key for the table is where each expression resolves to a table column. The function estimates the cost of\nclustering the table using these columns as the cluster key.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_estimate_automatic_clustering_costs)\n",
	"system_estimate_query_acceleration":                    "```sql\nSYSTEM$ESTIMATE_QUERY_ACCELERATION( \"<query_id>\" )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_estimate_query_acceleration)\n",
	"system_estimate_search_optimization_costs":             "```sql\nSYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS(\"<table_name>\" [ , \"<search_method_with_target>\" ])\n```\n```sql\n<table_name>```\nRequired:\n```sql\n<search_method_with_target>```\nTable for which you want to estimate the search optimization costs.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_estimate_search_optimization_costs)\n",
	"system_explain_json_to_text":                           "```sql\nSYSTEM$EXPLAIN_JSON_TO_TEXT( <explain_output_in_json_format> )\n```\n```sql\n<explain_output_in_json_format>```\nA string, or an expression that evaluates to a string, containing EXPLAIN output as a JSON-compatible string.\nIf the input is a string, the string should be enclosed in single quotes \".\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_explain_json_to_text)\n",
	"system_explain_plan_json":                              "```sql\nSYSTEM$EXPLAIN_PLAN_JSON( { <sql_statement_expression> | <sql_query_id_expression> } )\n```\n```sql\n<sql_statement_expression>```\nA string, or an expression that evaluates to a string, containing the SQL statement for which you want the EXPLAIN\nplan.\nIf a literal string is used, it should be surrounded by single quote characters \".\n```sql\n<sql_query_id_expression>```\nA string, or an expression that evaluates to a string, containing the query ID for which you want the EXPLAIN plan.\nIf a literal string is used, it should be surrounded by single quote characters \".\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_explain_plan_json)\n",
	"system_external_table_pipe_status":                     "```sql\nSYSTEM$EXTERNAL_TABLE_PIPE_STATUS( \"<external_table_name>\" )\n```\n```sql\n<external_table_name>```\nExternal table for which you want to retrieve the current automatic refresh status.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_external_table_pipe_status)\n",
	"system_finish_oauth_flow":                              "```sql\nSYSTEM$FINISH_OAUTH_FLOW( \"<query_string>\" )\n```\n```sql\n<\">```\nQuery string from the URL in the browser after completing user authentication and providing OAuth consent.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_finish_oauth_flow)\n",
	"system_generate_saml_csr":                              "```sql\nSYSTEM$GENERATE_SAML_CSR( <name> , <DN> )\n```\n```sql\n<name>```\nThe name of the SAML2 security integration to generate the CSR.\n```sql\n<DN>```\nRequired.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_generate_saml_csr)\n",
	"system_generate_scim_access_token":                     "```sql\nSYSTEM$GENERATE_SCIM_ACCESS_TOKEN(\"<integration_name>\")\n```\n```sql\n<<integration_name>>```\nName of the security integration where TYPE = SCIM. Note that the integration name is case-sensitive, must be uppercase, and be enclosed in single quotes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_generate_scim_access_token)\n",
	"system_get_aws_sns_iam_policy":                         "```sql\nSYSTEM$GET_AWS_SNS_IAM_POLICY( \"<sns_topic_arn>\" )\n```\n```sql\n<sns_topic_arn>```\nAmazon Resource Name (ARN) of the SNS topic for your S3 bucket. The function returns an IAM policy for Snowflake’s SQS queue to subscribe to this topic.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_aws_sns_iam_policy)\n",
	"system_get_classification_result":                      "```sql\nSELECT SYSTEM$GET_CLASSIFICATION_RESULT( \"<object_name>\" )\n```\n```sql\n<object_name>```\nThe name of the table, external table, view, or materialized view containing the columns to be classified. If a database and schema are\nnot in use in the current session, the name must be fully-qualified.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_classification_result)\n",
	"system_get_cmk_akv_consent_url":                        "```sql\nSYSTEM$GET_CMK_AKV_CONSENT_URL( \"<account_identifier>\" , \"<tenant_id>\" )\n```\n```sql\n<\">```\nSpecifies the account identifier for your Snowflake account on Azure.\n```sql\n<\">```\nRequired.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_cmk_akv_consent_url)\n",
	"system_get_cmk_config":                                 "```sql\nSYSTEM$GET_CMK_CONFIG()\n```\n```sql\n<tenant_id>```\nSpecifies the unique identifier for the Azure Key Vault\ntenant in your Microsoft Azure subscription.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_cmk_config)\n",
	"system_get_cmk_info":                                   "```sql\nSYSTEM$GET_CMK_INFO()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_cmk_info)\n",
	"system_get_cmk_kms_key_policy":                         "```sql\nSYSTEM$GET_CMK_KMS_KEY_POLICY()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_cmk_kms_key_policy)\n",
	"system_get_compute_pool_status":                        "```sql\nSYSTEM$GET_COMPUTE_POOL_STATUS( \"<computePoolName>\" )\n```\n```sql\n<computePoolName>```\nRequired:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_compute_pool_status)\n",
	"system_get_directory_table_status":                     "```sql\nSYSTEM$GET_DIRECTORY_TABLE_STATUS( [ \"<stage_name>\" ] )\n```\n```sql\n<\">```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_directory_table_status)\n",
	"system_get_gcp_kms_cmk_grant_access_cmd":               "```sql\nSYSTEM$GET_GCP_KMS_CMK_GRANT_ACCESS_CMD()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_gcp_kms_cmk_grant_access_cmd)\n",
	"system_get_iceberg_table_information":                  "```sql\nSYSTEM$GET_ICEBERG_TABLE_INFORMATION(\"<iceberg_table_name>\")\n```\n```sql\n<\">```\nThe name of the Iceberg table for which you want to retrieve information. The table name is a string, so it must be enclosed in single\nquotes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_iceberg_table_information)\n",
	"system_get_login_failure_details":                      "```sql\nSYSTEM$GET_LOGIN_FAILURE_DETAILS(\"<uuid>\")\n```\n```sql\n<uuid>```\nA string representing a UUID. The UUID appears after the error message that is returned from a failed login event associated with External\nOAuth, SAML, or key pair authentication.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_login_failure_details)\n",
	"system_get_predecessor_return_value":                   "```sql\nSYSTEM$GET_PREDECESSOR_RETURN_VALUE(\"<task_name>\")\n```\n```sql\n<\">```\nIdentifier for the predecessor task that sets the return value to be retrieved.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_predecessor_return_value)\n",
	"system_get_preview_access_status":                      "```sql\nSYSTEM$GET_PREVIEW_ACCESS_STATUS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_preview_access_status)\n",
	"system_get_privatelink":                                "```sql\nSYSTEM$GET_PRIVATELINK( \"<aws_id>\" , \"<federated_token>\" )\n```\n```sql\n<\">```\nThe 12-digit identifier that uniquely identifies your Amazon Web Services (AWS) account, as a string.\n```sql\n<\">```\nThe identifier that uniquely identifies the private endpoint in Microsoft Azure (Azure) as a string.\n```sql\n<\">```\nThe federated token value that contains access credentials for a federated user as a string.\n```sql\n<SubscriptionID>```\nTo obtain this value, execute the appropriate command for the cloud platform that hosts your Snowflake account. Use the command-line tool\nprovided by the platform:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink)\n",
	"system_get_privatelink_authorized_endpoints":           "```sql\nSYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_authorized_endpoints)\n",
	"system_get_privatelink_config":                         "```sql\nSYSTEM$GET_PRIVATELINK_CONFIG()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_config)\n",
	"system_get_privatelink_endpoint_registrations":         "```sql\nSYSTEM$GET_PRIVATELINK_ENDPOINT_REGISTRATIONS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_endpoint_registrations)\n",
	"system_get_privatelink_endpoints_info":                 "```sql\nSYSTEM$GET_PRIVATELINK_ENDPOINTS_INFO()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_privatelink_endpoints_info)\n",
	"system_get_service_dns_domain":                         "```sql\nSYSTEM$GET_SERVICE_DNS_DOMAIN( <schema_name> )\n```\n```sql\n<schema_name>```\nSchema name. If the schema is not in the current database, specify the fully qualified name of the schema.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_service_dns_domain)\n",
	"system_get_service_logs":                               "```sql\nSYSTEM$GET_SERVICE_LOGS( <service_name>, <instance_id>, <container_name>\n   [, <number_of_most_recent_lines> ] [, <retrieve_previous_logs> ])\n```\n```sql\n<service_name>```\nRequired:\n```sql\n<instance_id>```\nService name.\n```sql\n<container_name>```\nID of the service instance, starting with 0.\n```sql\n<number_of_most_recent_lines>```\nContainer name as specified in the service specification file.\n```sql\n<retrieve_previous_logs>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_service_logs)\n",
	"system_get_service_status":                             "```sql\nSYSTEM$GET_SERVICE_STATUS( [ <db_name>.<schema_name>. ]<service_name> [ , <timeout_secs> ]  )\n```\n```sql\n<service_name>```\nRequired:\n```sql\n<timeout_secs>```\nService name. If you omit the db_name and schema_name, the function uses the current database and schema.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_service_status)\n",
	"system_get_snowflake_platform_info":                    "```sql\nSYSTEM$GET_SNOWFLAKE_PLATFORM_INFO()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_snowflake_platform_info)\n",
	"system_get_tag":                                        "```sql\nSYSTEM$GET_TAG( \"<tag_name>\" , \"<obj_name>\" , \"<obj_domain>\" )\n```\n```sql\n<\">```\nThe name of the tag as a string.\n```sql\n<\">```\nThe name is the key in the key-value pair of the tag. For example, in the tag cost_center = \"sales\", cost_center is the\nkey-name of the tag. For this argument, use \"cost_center\".\n```sql\n<\">```\nThe name of the object as a string.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_tag)\n",
	"system_get_tag_allowed_values":                         "```sql\nSYSTEM$GET_TAG_ALLOWED_VALUES(\"<name>\")\n```\n```sql\n<name>```\nThe fully-qualified name of the tag key as a string.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_tag_allowed_values)\n",
	"system_get_tag_on_current_column":                      "```sql\nSYSTEM$GET_TAG_ON_CURRENT_COLUMN( \"<tag_name>\" )\n```\n```sql\n<\">```\nIdentifier for the tag as a string.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_tag_on_current_column)\n",
	"system_get_tag_on_current_table":                       "```sql\nSYSTEM$GET_TAG_ON_CURRENT_TABLE( \"<tag_name>\" )\n```\n```sql\n<\">```\nIdentifier for the tag as a string.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_tag_on_current_table)\n",
	"system_get_task_graph_config":                          "```sql\nSYSTEM$GET_TASK_GRAPH_CONFIG([configuration_path])\n```\n```sql\n<configuration_path>```\nPath to the configuration value to return.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_get_task_graph_config)\n",
	"system_global_account_set_parameter":                   "```sql\nSELECT SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER(\"<account_identifier>\",\n  \"ENABLE_ACCOUNT_DATABASE_REPLICATION\", \"true\");\n```\n```sql\n<<account_identifier>>```\nIdentifier of an account for which you are enabling replication. The preferred format for the identifier is\norganization_name.account_name. Though the legacy account_locator format is also supported, its use is discouraged as it\ncan cause unexpected results when an organization has multiple accounts with the same locator (in different regions).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_global_account_set_parameter)\n",
	"system_initiate_move_organization_account":             "```sql\nSYSTEM$INITIATE_MOVE_ORGANIZATION_ACCOUNT(\n    \"<temp_name>\" ,\n    \"<region>\" ,\n    { \"ALL\" | \"<object> [, <object> ...]\" } )\n```\n```sql\n<\">```\nSpecifies a temporary account name by which the organization account in the new region can be identified until the move is finalized. The\nname must start with a letter and can only contain uppercase letters, numbers, and underscores.\n```sql\n<\">```\nThe name of the organization account in the new region changes from this temporary account name to the name of the original organization\naccount when the SYSTEM$COMMIT_MOVE_ORGANIZATION_ACCOUNT function finishes successfully.\n```sql\n<{>```\nSnowflake Region ID of the region where the organization account will be moved.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_initiate_move_organization_account)\n",
	"system_internal_stages_public_access_status":           "```sql\nSYSTEM$INTERNAL_STAGES_PUBLIC_ACCESS_STATUS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_internal_stages_public_access_status)\n",
	"system_is_application_installed_from_same_account":     "```sql\nSYSTEM$IS_APPLICATION_INSTALLED_FROM_SAME_ACCOUNT()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_is_application_installed_from_same_account)\n",
	"system_is_application_sharing_events_with_provider":    "```sql\nSYSTEM$IS_APPLICATION_SHARING_EVENTS_WITH_PROVIDER()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_is_application_sharing_events_with_provider)\n",
	"system_last_change_commit_time":                        "```sql\nSYSTEM$LAST_CHANGE_COMMIT_TIME( \"<object_name>\"  )\n```\n```sql\n<object_name>```\nSpecifies the table or view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_last_change_commit_time)\n",
	"system_link_account_objects_by_name":                   "```sql\nSYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME(\"<group_name>\")\n```\n```sql\n<group_name>```\nSpecifies the identifier for the replication or failover group.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_link_account_objects_by_name)\n",
	"system_list_application_restricted_features":           "```sql\nSYSTEM$LIST_APPLICATION_RESTRICTED_FEATURES( \"<app_name>\" )\n```\n```sql\n<app_name>```\nName of the Snowflake Native App.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_list_application_restricted_features)\n",
	"system_list_iceberg_tables_from_catalog":               "```sql\nSYSTEM$LIST_ICEBERG_TABLES_FROM_CATALOG( \"<catalog_integration_name>\"\n  [ , \"<parent_namespace>\", <levels> ] )\n```\n```sql\n<catalog_integration_name>```\nRequired:\n```sql\n<parent_namespace>```\nIdentifier for the catalog integration for Iceberg REST or\nSnowflake Open Catalog.\n```sql\n<levels>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_list_iceberg_tables_from_catalog)\n",
	"system_list_namespaces_from_catalog":                   "```sql\nSYSTEM$LIST_NAMESPACES_FROM_CATALOG( \"<catalog_integration_name>\"\n  [ , \"<parent_namespace>\", <levels> ] )\n```\n```sql\n<catalog_integration_name>```\nRequired:\n```sql\n<parent_namespace>```\nIdentifier for the catalog integration for Iceberg REST or\nSnowflake Open Catalog.\n```sql\n<levels>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_list_namespaces_from_catalog)\n",
	"system_log":                                            "```sql\nSYSTEM$LOG(\"<level>\", <message>);\n\nSYSTEM$LOG_TRACE(<message>);\nSYSTEM$LOG_DEBUG(<message>);\nSYSTEM$LOG_INFO(<message>);\nSYSTEM$LOG_WARN(<message>);\nSYSTEM$LOG_ERROR(<message>);\nSYSTEM$LOG_FATAL(<message>);\n```\n```sql\n<\">```\nThe severity level at which to log the message. You can specify one of the following strings:\n```sql\n<message>```\n‘trace’\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_log)\n",
	"system_migrate_saml_idp_registration":                  "```sql\nSYSTEM$MIGRATE_SAML_IDP_REGISTRATION( \"<integration_name>\", \"<issuer>\" )\n```\n```sql\n<integration_name>```\nName of the new SAML2 security integration that will be created by the function.\n```sql\n<issuer>```\nNote that the entire name must be enclosed in single quotes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_migrate_saml_idp_registration)\n",
	"system_pipe_force_resume":                              "```sql\nSYSTEM$PIPE_FORCE_RESUME( \"<pipe_name>\" , \"[ STALENESS_CHECK_OVERRIDE ] [ , OWNERSHIP_TRANSFER_CHECK_OVERRIDE ]\")\n```\n```sql\n<pipe_name>```\nPipe to resume running.\n```sql\n<STALENESS_CHECK_OVERRIDE>```\nSpecifies to resume a stale pipe. A pipe is considered stale when it is paused for longer than the limited retention period for event\nmessages received for the pipe (14 days by default).\n```sql\n<OWNERSHIP_TRANSFER_CHECK_OVERRIDE>```\nNote\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_pipe_force_resume)\n",
	"system_pipe_rebinding_with_notification_channel":       "```sql\nSYSTEM$PIPE_REBINDING_WITH_NOTIFICATION( \"<pipe_name>\")\n```\n```sql\n<\">```\nThe name of the pipe that needs to go through the rebind notification process.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_pipe_rebinding_with_notification_channel)\n",
	"system_pipe_status":                                    "```sql\nSYSTEM$PIPE_STATUS( \"<pipe_name>\" )\n```\n```sql\n<pipe_name>```\nPipe for which you want to retrieve the current status.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_pipe_status)\n",
	"system_provision_privatelink_endpoint":                 "```sql\nSYSTEM$PROVISION_PRIVATELINK_ENDPOINT(\n  \"<provider_service_name>\",\n  \"<host_name>\"\n)\n```\n```sql\n<\">```\nSpecifies the external service or resource to connect to. For example, com.amazonaws.us-west-2.execute-api for the Amazon API\nGateway or com.amazonaws.us-west-2.s3 for Amazon S3.\n```sql\n<\">```\nFor information about retrieving this value from AWS, see Provision private connectivity endpoints.\n```sql\n<\">```\nSpecifies the fully-qualified hostname to access the resource in your VPC or VNet.\n```sql\n<\">```\nThis value does not contain any port numbers and must match what you specified in the Snowflake object that enables you to connect to the\nexternal service.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_provision_privatelink_endpoint)\n",
	"system_query_reference":                                "```sql\nSYSTEM$QUERY_REFERENCE(\"<select_statement>\", [ , <use_session_scope> ] )\n```\n```sql\n<select_statement>```\nRequired\n```sql\n<use_session_scope>```\nThe SELECT statement to pass to the stored procedure. This must be a statement that serves as an inline view.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_query_reference)\n",
	"system_reference":                                      "```sql\nSYSTEM$REFERENCE(\"<object_type>\", \"<object_identifier>\",\n  [ , \"<reference_scope>\" [ , \"<privilege>\" [ , \"<privilege>\" ... ] ] ] )\n```\n```sql\n<\">```\nRequired\n```sql\n<\">```\nType of the object. You can specify one of the following values:\n```sql\n<\">```\napi_integration\n```sql\n<\">```\ncompute_pool\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_reference)\n",
	"system_register_cmk_info":                              "```sql\nSYSTEM$REGISTER_CMK_INFO( \"<cmk-arn>\" )\n```\n```sql\n<cmk-arn>```\nSpecifies the Amazon Web Services resource number (ARN) that specifies the customer-managed key (CMK) for use with Tri-Secret Secure.\n```sql\n<vault-uri>```\nSpecifies the Microsoft Azure unique endpoint identifier for your Azure Key Vault.\n```sql\n<key-name>```\nSpecifies the name for your CMK in Microsoft Azure.\n```sql\n<project-id>```\nSpecifies the unique identifier for your project in Google Cloud Platform.\n```sql\n<location>```\nSpecifies the Google Cloud Platform region that hosts your Snowflake account.\n```sql\n<key-ring>```\nSpecifies the key ring for your CMK in Google Cloud Platform.\n```sql\n<key-name>```\nSpecifies the name of your CMK.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_register_cmk_info)\n",
	"system_register_privatelink_endpoint":                  "```sql\nSYSTEM$REGISTER_PRIVATELINK_ENDPOINT(\n  \"<aws_private_endpoint_vpce_id>\",\n  \"<aws_account_id>\",\n  \"<token>\",\n  [ <delay_time> ]\n  )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_register_privatelink_endpoint)\n",
	"system_registry_list_images":                           "```sql\nSYSTEM$REGISTRY_LIST_IMAGES( \"/<dbName>/<schemaName>/<repositoryName>\" )\n```\n```sql\n<dbName>```\nRequired:\n```sql\n<schemaName>```\nName of the database in which the repository is created.\n```sql\n<repositoryName>```\nName of the database in which the repository is created.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_registry_list_images)\n",
	"system_restore_privatelink_endpoint":                   "```sql\nSYSTEM$RESTORE_PRIVATELINK_ENDPOINT( \"<provider_service_name>\" )\n```\n```sql\n<provider_service_name>```\nSpecifies the external service or resource endpoint to restore. For example, com.amazonaws.us-west-2.execute-api for the Amazon API\nGateway or com.amazonaws.us-west-2.s3 for Amazon S3.\n```sql\n<\">```\nSpecifies the fully-qualified identifier for the resource in your VPC or VNet.\n```sql\n<\">```\nSpecifies the name of the subresource of the Azure resource.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_restore_privatelink_endpoint)\n",
	"system_revoke_privatelink":                             "```sql\nSYSTEM$REVOKE_PRIVATELINK( \"<aws_id>\" , \"<federated_token>\" )\n```\n```sql\n<\">```\nThe 12-digit identifier that uniquely identifies your Amazon Web Services (AWS) account, as a string.\n```sql\n<\">```\nThe identifier that uniquely identifies the private endpoint in Microsoft Azure (Azure) as a string.\n```sql\n<\">```\nThe federated token value that contains access credentials for a federated user as a string.\n```sql\n<SubscriptionID>```\nTo obtain this value, execute the appropriate command for the cloud platform that hosts your Snowflake account. Use the command-line tool\nprovided by the platform:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_revoke_privatelink)\n",
	"system_revoke_stage_privatelink_access":                "```sql\n-- Azure\nSYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS( \"<privateEndpointResourceID>\" )\n```\n```sql\n<\">```\nThe unique identifier for the Private Endpoint in Azure.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_revoke_stage_privatelink_access)\n",
	"system_send_notifications_to_catalog":                  "```sql\nSYSTEM$SEND_NOTIFICATIONS_TO_CATALOG( \"<domain>\" , \"<entity_name>\" [ , \"<notification_type>\"] [ , \"<catalog_sync_integration_name>\"] )\n```\n```sql\n<domain>```\nRequired:\n```sql\n<entity_name>```\nThe domain at which to send the notification. You can specify one of the following domains:\n```sql\n<notification_type>```\nDATABASE\n```sql\n<catalog_sync_integration_name>```\nSCHEMA\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_send_notifications_to_catalog)\n",
	"system_set_application_restricted_feature_access":      "```sql\nSYSTEM$SET_APPLICATION_RESTRICTED_FEATURE_ACCESS(\n  \"<app_name>\",\n  \"<type>\",\n  \"<parameters>\"\n)\n```\n```sql\n<app_name>```\nName of the Snowflake Native App.\n```sql\n<type>```\nThe type of restricted feature. Currently only EXTERNAL_DATA is supported.\n```sql\n<parameters>```\nA JSON object that contains configuration parameters for the restricted feature. Currently,\nonly JSON objects of the following format are supported:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_set_application_restricted_feature_access)\n",
	"system_set_event_sharing_account_for_region":           "```sql\nSYSTEM$SET_EVENT_SHARING_ACCOUNT_FOR_REGION( \"<snowflake_region>\" , \"<region_group>\" , \"<account_name>\" )\n```\n```sql\n<snowflake_region>```\nSpecifies the region where the account is located, for example: AWS_US_WEST_2, AWS_US_EAST_1.\n```sql\n<region_group>```\nSpecifies the region group, for example: PUBLIC. Refer to\nRegion groups for details.\n```sql\n<account_name>```\nSpecifies the account name. If another account is already set as the events account in the\nspecified region, calling this function changes the events account to be the account\nspecified here.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_set_event_sharing_account_for_region)\n",
	"system_set_return_value":                               "```sql\nSYSTEM$SET_RETURN_VALUE( \"<string_expression>\" )\n```\n```sql\n<string_expression>```\nThe string to set as the return value. The string size must be <= 10 kB (when encoded in UTF8).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_set_return_value)\n",
	"system_set_span_attributes":                            "```sql\nSYSTEM$SET_SPAN_ATTRIBUTES(\"<object>\");\n```\n```sql\n<\">```\nAn object containing name-value pairs representing the attributes to add.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_set_span_attributes)\n",
	"system_show_active_behavior_change_bundles":            "```sql\nSYSTEM$SHOW_ACTIVE_BEHAVIOR_CHANGE_BUNDLES()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_show_active_behavior_change_bundles)\n",
	"system_show_budgets_in_account":                        "```sql\nSYSTEM$SHOW_BUDGETS_IN_ACCOUNT()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_show_budgets_in_account)\n",
	"system_show_event_sharing_accounts":                    "```sql\nSYSTEM$SHOW_EVENT_SHARING_ACCOUNTS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_show_event_sharing_accounts)\n",
	"system_show_move_organization_account_status":          "```sql\nSYSTEM$SHOW_MOVE_ORGANIZATION_ACCOUNT_STATUS( )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_show_move_organization_account_status)\n",
	"system_show_oauth_client_secrets":                      "```sql\nSYSTEM$SHOW_OAUTH_CLIENT_SECRETS( \"<integration_name>\" )\n```\n```sql\n<integration_name>```\nName of the integration. Note that the integration name is case-sensitive and must be uppercase and enclosed in single quotes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_show_oauth_client_secrets)\n",
	"system_snowpipe_streaming_update_channel_offset_token": "```sql\nSYSTEM$SNOWPIPE_STREAMING_UPDATE_CHANNEL_OFFSET_TOKEN(\"<dbName>.<schemaName>.<tableName>\", \"<channelName>\", \"<new_offset_token>\")\n```\n```sql\n<dbName>```\nName of the database in which the channel is stored.\n```sql\n<schemaName>```\nName of the schema in which the channel is stored.\n```sql\n<tableName>```\nName of the table where the channel is mapped to.\n```sql\n<channelName>```\nName of the channel.\n```sql\n<new_offset_token>```\nThe new offset token.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_snowpipe_streaming_update_channel_offset_token)\n",
	"system_start_oauth_flow":                               "```sql\nSYSTEM$START_OAUTH_FLOW( \"<database_name.schema_name.secret_name>\" )\n```\n```sql\n<\">```\nThe name of the OAuth2 secret specifying authentication information for the API to access with OAuth.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_start_oauth_flow)\n",
	"system_stream_backlog":                                 "```sql\nSYSTEM$STREAM_BACKLOG(\"<stream_name>\")\n```\n```sql\n<stream_name>```\nThe name of the stream to query.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_stream_backlog)\n",
	"system_stream_get_table_timestamp":                     "```sql\nSYSTEM$STREAM_GET_TABLE_TIMESTAMP(\"<stream_name>\")\n```\n```sql\n<stream_name>```\nThe name of the stream to query.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_stream_get_table_timestamp)\n",
	"system_stream_has_data":                                "```sql\nSYSTEM$STREAM_HAS_DATA(\"<stream_name>\")\n```\n```sql\n<stream_name>```\nThe name of the stream to query.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_stream_has_data)\n",
	"system_task_dependents_enable":                         "```sql\nSYSTEM$TASK_DEPENDENTS_ENABLE( \"<task_name>\" )\n```\n```sql\n<task_name>```\nName of a task in a simple task graph. It does not need to be a root task.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_task_dependents_enable)\n",
	"system_task_runtime_info":                              "```sql\nSYSTEM$TASK_RUNTIME_INFO(\"<arg_name>\")\n```\n```sql\n<\">```\nSpecifies the type of information to return. You can specify one of the following values:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_task_runtime_info)\n",
	"system_typeof":                                         "```sql\nSYSTEM$TYPEOF( <expr> )\n```\n```sql\n<expr>```\nThe argument can be a column name or a general expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_typeof)\n",
	"system_unblock_internal_stages_public_access":          "```sql\nSYSTEM$UNBLOCK_INTERNAL_STAGES_PUBLIC_ACCESS()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_unblock_internal_stages_public_access)\n",
	"system_unregister_privatelink_endpoint":                "```sql\nSYSTEM$UNREGISTER_PRIVATELINK_ENDPOINT(\n  \"<aws_private_endpoint_vpce_id>\",\n  \"<aws_account_id>\",\n  \"<token>\",\n  )\n```\n```sql\n<aws_private_endpoint_vpce_id>```\nAWS\n```sql\n<aws_account_id>```\nSpecifies the identifier for your Amazon Web Services (AWS) virtual private cloud endpoint (AWS VPCEID).\n```sql\n<azure_private_endpoint_link_id>```\nTo obtain the AWS VPCEID value, navigate through the AWS console or use the following command:\n```sql\n<azure_private_endpoint_resource_id>```\nThe 12-digit identifier that uniquely identifies your Amazon Web Services (AWS) account, as a string.\n```sql\n<token>```\nTo obtain the AWS account ID value, navigate through the AWS console or use the following command:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_unregister_privatelink_endpoint)\n",
	"system_unset_event_sharing_account_for_region":         "```sql\nSYSTEM$UNSET_EVENT_SHARING_ACCOUNT_FOR_REGION( \"<snowflake_region>\" , \"<region_group>\" , \"<account_name>\" )\n```\n```sql\n<snowflake_region>```\nSpecifies the region where the account is located, for example: AWS_US_WEST_2, AWS_US_EAST_1.\n```sql\n<region_group>```\nSpecifies the region group, for example: PUBLIC.\n```sql\n<account_name>```\nSpecifies the account name.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_unset_event_sharing_account_for_region)\n",
	"system_user_task_cancel_ongoing_executions":            "```sql\nSYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS( \"<task_name>\" )\n```\n```sql\n<task_name>```\nName of the task.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_user_task_cancel_ongoing_executions)\n",
	"system_validate_storage_integration":                   "```sql\nSYSTEM$VALIDATE_STORAGE_INTEGRATION( \"<storage_integration_name>\", \"<storage_path>\", \"<test_file_name>\", \"<validate_action>\" )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_validate_storage_integration)\n",
	"system_verify_catalog_integration":                     "```sql\nSYSTEM$VERIFY_CATALOG_INTEGRATION( \"<rest_catalog_integration_name>\" )\n```\n```sql\n<rest_catalog_integration_name>```\nName of the Iceberg REST catalog integration to test.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_verify_catalog_integration)\n",
	"system_verify_cmk_info":                                "```sql\nSYSTEM$VERIFY_CMK_INFO()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_verify_cmk_info)\n",
	"system_verify_ext_oauth_token":                         "```sql\nSYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN( \"<access_token>\" )\n```\n```sql\n<access_token>```\nThe External OAuth access token generated by your OAuth 2.0 server.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_verify_ext_oauth_token)\n",
	"system_verify_external_volume":                         "```sql\nSYSTEM$VERIFY_EXTERNAL_VOLUME(\"<external_volume_name>\")\n```\n```sql\n<external_volume_name>```\nName of the external volume to verify. If the identifier contains spaces or special characters,\nthe entire string must be enclosed in double quotes. Identifiers enclosed in double quotes are also case sensitive.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_verify_external_volume)\n",
	"system_wait":                                           "```sql\nSYSTEM$WAIT( amount [ , time_unit ] )\n```\n```sql\n<amount>```\nRequired:\n```sql\n<time_unit>```\nNumber specifying the amount of time to wait as determined by time_unit.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_wait)\n",
	"system_wait_for_services":                              "```sql\nSYSTEM$WAIT_FOR_SERVICES( <seconds_to_pause>, \"<service_name>\" [, ...] )\n```\n```sql\n<seconds_to_pause>```\nNumber of seconds to pause.\n```sql\n<service_name>```\nNames of one or more services to wait for.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_wait_for_services)\n",
	"system_whitelist":                                      "```sql\nSYSTEM$WHITELIST()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_whitelist)\n",
	"system_whitelist_privatelink":                          "```sql\nSYSTEM$WHITELIST_PRIVATELINK()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/system_whitelist_privatelink)\n",
	"systimestamp":                                          "```sql\nSYSTIMESTAMP()\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/systimestamp)\n",
	"tag_references":                                        "```sql\nTAG_REFERENCES( \"<object_name>\" , \"<object_domain>\" )\n```\n```sql\n<\">```\nName of the referenced object if the tag association is on the object.\n```sql\n<\">```\nDomain of the reference object, such as a table or view, if the tag association is on the object. For columns, the domain is COLUMN\nif the tag association is on a column.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/tag_references)\n",
	"tag_references_all_columns":                            "```sql\nTAG_REFERENCES_ALL_COLUMNS( \"<object_name>\" , \"<object_domain>\" )\n```\n```sql\n<\">```\nName of the referenced object if the tag association is on the object.\n```sql\n<\">```\nThis argument supports the names for tables and views.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/tag_references_all_columns)\n",
	"tag_references_with_lineage":                           "```sql\nTAG_REFERENCES_WITH_LINEAGE( \"<name>\" )\n```\n```sql\n<\">```\nThe fully qualified name of the tag.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/tag_references_with_lineage)\n",
	"tan":                                                   "```sql\nTAN( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number. The value should be in\nradians, not degrees.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/tan)\n",
	"tanh":                                                  "```sql\nTANH( <real_expr> )\n```\n```sql\n<real_expr>```\nThis expression should evaluate to a real number.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/tanh)\n",
	"task_dependents":                                       "```sql\nTASK_DEPENDENTS(\n      TASK_NAME => \"<string>\"\n      [, RECURSIVE => <Boolean> ] )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/task_dependents)\n",
	"task_history":                                          "```sql\nTASK_HISTORY(\n      [ SCHEDULED_TIME_RANGE_START => <constant_expr> ]\n      [, SCHEDULED_TIME_RANGE_END => <constant_expr> ]\n      [, RESULT_LIMIT => <integer> ]\n      [, TASK_NAME => \"<string>\" ]\n      [, ERROR_ONLY => { TRUE | FALSE } ]\n      [, ROOT_TASK_ID => \"<string>\"] )\n```\n```sql\n<SCHEDULED_TIME_RANGE_START>```\nAll the arguments are optional.\n```sql\n<RESULT_LIMIT>```\nTime range (in TIMESTAMP_LTZ format), within the last 7 days, in which the task execution was scheduled. If the time range does not fall\nwithin the last 7 days, an error is returned.\n```sql\n<TASK_NAME>```\nIf SCHEDULED_TIME_RANGE_END is not specified, the function returns those tasks that have already completed, are currently\nrunning, or are scheduled in the future.\n```sql\n<ERROR_ONLY>```\nIf SCHEDULED_TIME_RANGE_END is CURRENT_TIMESTAMP, the function returns those tasks that have\nalready completed or are currently running. Note that a task that is executed immediately before the current time might still be\nidentified as scheduled.\n```sql\n<ROOT_TASK_ID>```\nTo query only those tasks that have already completed or are currently running, include WHERE query_id IS NOT NULL as a filter.\nThe QUERY_ID column in the TASK_HISTORY output is populated only when a task has started running.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/task_history)\n",
	"text_html":                                             "```sql\nSNOWFLAKE.NOTIFICATION.TEXT_HTML( \"<message>\" )\n```\n```sql\n<\">```\nContent of the message to send.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/text_html)\n",
	"text_plain":                                            "```sql\nSNOWFLAKE.NOTIFICATION.TEXT_PLAIN( \"<message>\" )\n```\n```sql\n<\">```\nContent of the message to send.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/text_plain)\n",
	"time_from_parts":                                       "```sql\nTIME_FROM_PARTS( <hour>, <minute>, <second> [, <nanoseconds>] )\n```\n```sql\n<hour>```\nRequired:\n```sql\n<minute>```\nAn integer expression to use as an hour for building a time,\nusually in the 0-23 range.\n```sql\n<second>```\nAn integer expression to use as a minute for building a time,\nusually in the 0-59 range.\n```sql\n<nanoseconds>```\nAn integer expression to use as a second for building a time,\nusually in the 0-59 range.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/time_from_parts)\n",
	"time_slice":                                            "```sql\nTIME_SLICE( <date_or_time_expr> , <slice_length> , <date_or_time_part> [ , <start_or_end> ] )\n```\n```sql\n<date_or_time_expr>```\nRequired:\n```sql\n<slice_length>```\nThe function returns the start or end of the slice that contains this date or time. The expression must\nbe of type DATE or TIMESTAMP_NTZ.\n```sql\n<date_or_time_part>```\nThis indicates the width of the slice (i.e. how many units of\ntime are contained in the slice). For example, if the unit is MONTH and the slice_length\nis 2, then each slice is 2 months wide. The slice_length must be an integer\ngreater than or equal to 1.\n```sql\n<start_or_end>```\nTime unit for the slice length. The value must be a string containing one of the values listed\nbelow:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/time_slice)\n",
	"timeadd":                                               "```sql\nTIMEADD( <date_or_time_part> , <value> , <date_or_time_expr> )\n```\n```sql\n<date_or_time_part>```\nThis indicates the units of time that you want to add. For example if you\nwant to add two days, then specify day. This unit of measure must\nbe one of the values listed in Supported date and time parts.\n```sql\n<value>```\nThis is the number of units of time that you want to add. For example,\nif the units of time is day, and you want to add two days, specify 2.\nIf you want to subtract two days, specify -2.\n```sql\n<date_or_time_expr>```\ndate_or_time_expr must evaluate to a date, time, or timestamp.\nThis is the date, time, or timestamp to which you want to add.\nFor example, if you want to add two days to August 1, 2024, then specify\n\"2024-08-01\"::DATE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/timeadd)\n",
	"timediff":                                              "```sql\nTIMEDIFF( <date_or_time_part> , <date_or_time_expr1> , <date_or time_expr2> )\n```\n```sql\n<date_or_time_part>```\nThe unit of time. Must be one of the values listed in Supported date and time parts (for example, month).\nThe value can be a string literal or can be unquoted (for example, \"month\" or month).\n```sql\n<date_or_time_expr1>```\nThe values to compare. Must be a date, a time, a timestamp, or an expression that can be evaluated to\na date, a time, or a timestamp. The value date_or_time_expr1 is subtracted from\ndate_or_time_expr2.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/timediff)\n",
	"timestampadd":                                          "```sql\nTIMESTAMPADD( <date_or_time_part> , <time_value> , <date_or_time_expr> )\n```\n```sql\n<date_or_time_part>```\nThis indicates the units of time that you want to add. For example if you\nwant to add two days, then specify day. This unit of measure must\nbe one of the values listed in Supported date and time parts.\n```sql\n<value>```\nThis is the number of units of time that you want to add. For example,\nif the units of time is day, and you want to add two days, specify 2.\nIf you want to subtract two days, specify -2.\n```sql\n<date_or_time_expr>```\ndate_or_time_expr must evaluate to a date, time, or timestamp.\nThis is the date, time, or timestamp to which you want to add.\nFor example, if you want to add two days to August 1, 2024, then specify\n\"2024-08-01\"::DATE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/timestampadd)\n",
	"timestampdiff":                                         "```sql\nTIMESTAMPDIFF( <date_or_time_part> , <date_or_time_expr1> , <date_or_time_expr2> )\n```\n```sql\n<date_or_time_part>```\nThe unit of time. Must be one of the values listed in Supported date and time parts (for example, month).\nThe value can be a string literal or can be unquoted (for example, \"month\" or month).\n```sql\n<date_or_time_expr1>```\nThe values to compare. Must be a date, a time, a timestamp, or an expression that can be evaluated to\na date, a time, or a timestamp. The value date_or_time_expr1 is subtracted from\ndate_or_time_expr2.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/timestampdiff)\n",
	"to_array":                                              "```sql\nTO_ARRAY( <expr> )\n```\n```sql\n<expr>```\nAn expression of any data type.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_array)\n",
	"to_binary":                                             "```sql\nTO_BINARY( <string_expr> [, \"<format>\"] )\nTO_BINARY( <variant_expr> )\n```\n```sql\n<string_expr>```\nRequired:\n```sql\n<format>```\nA string expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_binary)\n",
	"to_boolean":                                            "```sql\nTO_BOOLEAN( <string_or_numeric_expr> )\n```\n```sql\n<string_or_numeric_expr>```\nA string expression or numeric expression that can be evaluated to a BOOLEAN value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_boolean)\n",
	"to_char":                                               "```sql\nTO_CHAR( <expr> )\nTO_CHAR( <numeric_expr> [, \"<format>\" ] )\nTO_CHAR( <date_or_time_expr> [, \"<format>\" ] )\nTO_CHAR( <binary_expr> [, \"<format>\" ] )\n\nTO_VARCHAR( <expr> )\nTO_VARCHAR( <numeric_expr> [, \"<format>\" ] )\nTO_VARCHAR( <date_or_time_expr> [, \"<format>\" ] )\nTO_VARCHAR( <binary_expr> [, \"<format>\" ] )\n```\n```sql\n<expr>```\nRequired:\n```sql\n<numeric_expr>```\nAn expression of any data type.\n```sql\n<date_or_time_expr>```\nA numeric expression.\n```sql\n<binary_expr>```\nAn expression of type DATE, TIME, or TIMESTAMP.\n```sql\n<format>```\nAn expression of type BINARY or VARBINARY.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_char)\n",
	"to_date":                                               "```sql\nTO_DATE( <string_expr> [, <format> ] )\nTO_DATE( <timestamp_expr> )\nTO_DATE( \"<integer>\" )\nTO_DATE( <variant_expr> )\n\nDATE( <string_expr> [, <format> ] )\nDATE( <timestamp_expr> )\nDATE( \"<integer>\" )\nDATE( <variant_expr> )\n```\n```sql\n<string_expr>```\nRequired:\n```sql\n<timestamp_expr>```\nOne of:\n```sql\n<\">```\nString from which to extract a date. For example: \"2024-01-31\".\n```sql\n<variant_expr>```\nA TIMESTAMP expression. The DATE portion of the TIMESTAMP value is extracted.\n```sql\n<format>```\nAn expression that evaluates to a string containing an integer. For example: \"15000000\". Depending\non the magnitude of the string, it can be interpreted as seconds, milliseconds, microseconds, or\nnanoseconds. For details, see the Usage notes for this function.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_date)\n",
	"to_decimal":                                            "```sql\nTO_DECIMAL( <expr> [, \"<format>\" ] [, <precision> [, <scale> ] ] )\n\nTO_NUMBER( <expr> [, \"<format>\" ] [, <precision> [, <scale> ] ] )\n\nTO_NUMERIC( <expr> [, \"<format>\" ] [, <precision> [, <scale> ] ] )\n```\n```sql\n<expr>```\nRequired:\n```sql\n<format>```\nAn expression of a numeric, character, or variant type.\n```sql\n<precision>```\nOptional:\n```sql\n<scale>```\nThe SQL format model used to parse the input expr and return. For more\ninformation, see SQL format models.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_decimal)\n",
	"to_double":                                             "```sql\nTO_DOUBLE( <expr> [, \"<format>\" ] )\n```\n```sql\n<expr>```\nAn expression of a numeric, character, or variant type.\n```sql\n<format>```\nIf the expression evaluates to a string, then the function accepts\nan optional format model. Format models are described at\nSQL format models. The format model\nspecifies the format of the input string, not the format of the\noutput value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_double)\n",
	"to_geography":                                          "```sql\nTO_GEOGRAPHY( <varchar_expression> [ , <allow_invalid> ] )\n\nTO_GEOGRAPHY( <binary_expression> [ , <allow_invalid> ] )\n\nTO_GEOGRAPHY( <variant_expression> [ , <allow_invalid> ] )\n\nTO_GEOGRAPHY( <geometry_expression> [ , <allow_invalid> ] )\n```\n```sql\n<varchar_expression>```\nRequired:\n```sql\n<binary_expression>```\nThe argument must be a string expression that represents a valid geometric object in one of the following formats:\n```sql\n<variant_expression>```\nWKT (well-known text).\n```sql\n<geometry_expression>```\nWKB (well-known binary) in hexadecimal format (without a leading 0x).\n```sql\n<allow_invalid>```\nEWKT (extended well-known text).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_geography)\n",
	"to_geometry":                                           "```sql\nTO_GEOMETRY( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nTO_GEOMETRY( <binary_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nTO_GEOMETRY( <variant_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nTO_GEOMETRY( <geography_expression> [ , <srid> ] [ , <allow_invalid> ] )\n```\n```sql\n<varchar_expression>```\nRequired:\n```sql\n<binary_expression>```\nThe argument must be a string expression that represents a valid geometric object in one of the following formats:\n```sql\n<variant_expression>```\nWKT (well-known text).\n```sql\n<geography_expression>```\nWKB (well-known binary) in hexadecimal format (without a leading 0x).\n```sql\n<srid>```\nEWKT (extended well-known text).\n```sql\n<allow_invalid>```\nEWKB (extended well-known binary) in hexadecimal format (without a leading 0x).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_geometry)\n",
	"to_json":                                               "```sql\nTO_JSON( <expr> )\n```\n```sql\n<expr>```\nAn expression of type VARIANT that holds valid JSON information.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_json)\n",
	"to_object":                                             "```sql\nTO_OBJECT( <expr> )\n```\n```sql\n<expr>```\nAn expression that evaluates to a VARIANT that contains an OBJECT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_object)\n",
	"to_query":                                              "```sql\nTO_QUERY( SQL => \"<string>\" [ , <arg> => \"<value>\" [, <arg> => \"<value>\" ...] ] )\n```\n```sql\n<SQL>```\nRequired\n```sql\n<arg>```\nString representation of the subquery.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_query)\n",
	"to_time":                                               "```sql\nTO_TIME( <string_expr> [, <format> ] )\nTO_TIME( <timestamp_expr> )\nTO_TIME( \"<integer>\" )\nTO_TIME( <variant_expr> )\n\nTIME( <string_expr> )\nTIME( <timestamp_expr> )\nTIME( \"<integer>\" )\nTIME( <variant_expr> )\n```\n```sql\n<string_expr>```\nRequired:\n```sql\n<format>```\nExpression to be converted into a time:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_time)\n",
	"to_timestamp":                                          "```sql\ntimestampFunction ( <numeric_expr> [ , <scale> ] )\n\ntimestampFunction ( <date_expr> )\n\ntimestampFunction ( <timestamp_expr> )\n\ntimestampFunction ( <string_expr> [ , <format> ] )\n\ntimestampFunction ( \"<integer>\" )\n\ntimestampFunction ( <variant_expr> )\n```\n```sql\n<numeric_expr>```\nRequired:\n```sql\n<date_expr>```\nOne of:\n```sql\n<timestamp_expr>```\nA number of seconds (if scale = 0 or is absent) or fractions of a second (e.g. milliseconds or nanoseconds)\nsince the start of the Unix epoch (1970-01-01 00:00:00 UTC). If a non-integer decimal expression is input, the\nscale of the result is inherited.\n```sql\n<string_expr>```\nA date to be converted into a timestamp.\n```sql\n<\">```\nA timestamp to be converted into another timestamp (e.g. convert TIMESTAMP_LTZ to TIMESTAMP_NTZ).\n```sql\n<variant_expr>```\nA string from which to extract a timestamp, for example \"2019-01-31 01:02:03.004\".\n```sql\n<format>```\nAn expression that evaluates to a string containing an integer, for example \"15000000\". Depending\non the magnitude of the string, it can be interpreted as seconds, milliseconds, microseconds, or\nnanoseconds. For details, see the Usage Notes.\n```sql\n<scale>```\nAn expression of type VARIANT. The VARIANT must contain one of the following:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_timestamp)\n",
	"to_variant":                                            "```sql\nTO_VARIANT( <expr> )\n```\n```sql\n<expr>```\nAn expression of any data type.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_variant)\n",
	"to_xml":                                                "```sql\nTO_XML( <expression> )\n```\n```sql\n<expression>```\nAn expression that evaluates to a VARIANT or that can be cast to a VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/to_xml)\n",
	"transform":                                             "```sql\nTRANSFORM( <array> , <lambda_expression> )\n```\n```sql\n<array>```\nThe array that contains the elements to be transformed. The array can be semi-structured or structured.\n```sql\n<lambda_expression>```\nA lambda expression that defines the transformation\nlogic on each array element.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/transform)\n",
	"translate":                                             "```sql\nTRANSLATE( <subject>, <sourceAlphabet>, <targetAlphabet> )\n```\n```sql\n<subject>```\nA string expression that is translated. If a character in subject isn’t\nin sourceAlphabet, the character is added to the result without any translation.\n```sql\n<sourceAlphabet>```\nA string with all characters that are modified by\nthis function. Each character is either translated to the corresponding\ncharacter in the targetAlphabet or omitted in the result. A character is\nomitted in the result if the targetAlphabet has no corresponding character\n(that is, has fewer characters than the sourceAlphabet).\n```sql\n<targetAlphabet>```\nA string with all characters that are used to replace characters from the\nsourceAlphabet.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/translate)\n",
	"translate-snowflake-cortex":                            "```sql\nSNOWFLAKE.CORTEX.TRANSLATE(\n    <text>, <source_language>, <target_language>)\n```\n```sql\n<text>```\nA string containing the text to be translated.\n```sql\n<source_language>```\nA string specifying the language code for the language the text is currently in. See Usage notes for a list of\nsupported language codes. If the source language code is an empty string, \"\", the source language is\nautomatically detected.\n```sql\n<target_language>```\nA string specifying the language code into which the text should be translated. See Usage notes for a list of\nsupported language codes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/translate)\n",
	"trim":                                                  "```sql\nTRIM( <expr> [, <characters> ] )\n```\n```sql\n<expr>```\nA string expression to be trimmed.\n```sql\n<characters>```\nOne or more characters to remove from the left and right side of expr.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/trim)\n",
	"trunc":                                                 "```sql\nTRUNCATE( <input_expr> [ , <scale_expr> ] )\n\nTRUNC( <input_expr> [ , <scale_expr> ] )\n```\n```sql\n<input_expr>```\nThe value or expression to operate on. The data type should be one of the numeric data types, such as FLOAT or NUMBER.\n```sql\n<scale_expr>```\nThe number of digits the output should include after the decimal point. The expression should evaluate to an\ninteger from -38 to +38.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/trunc)\n",
	"trunc2":                                                "```sql\nTRUNC( <date_or_time_expr>, <date_or_time_part> )\n```\n```sql\n<date_or_time_expr>```\nThis argument must evaluate to a date, time, or timestamp.\n```sql\n<date_or_time_part>```\nThis argument must be one of the values listed in Supported date and time parts.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/trunc2)\n",
	"try_base64_decode_binary":                              "```sql\nTRY_BASE64_DECODE_BINARY(<input> [, <alphabet>])\n```\n```sql\n<input>```\nThe base64-encoded string to convert to BINARY data type.\n```sql\n<alphabet>```\nA string consisting of up to three ASCII characters:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_base64_decode_binary)\n",
	"try_base64_decode_string":                              "```sql\nTRY_BASE64_DECODE_STRING(<input> [, <alphabet>])\n```\n```sql\n<input>```\nThe base64-encoded string to decode to a normal string.\n```sql\n<alphabet>```\nA string consisting of up to three ASCII characters:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_base64_decode_string)\n",
	"try_cast":                                              "```sql\nTRY_CAST( <source_string_expr> AS <target_data_type> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_cast)\n",
	"try_complete-snowflake-cortex":                         "```sql\nSNOWFLAKE.CORTEX.TRY_COMPLETE( <model>, <prompt_or_history> [ , <options> ] )\n```\n```sql\n<model>```\nRequired:\n```sql\n<prompt_or_history>```\nA string specifying the model to be used. Specify one of the following values.\n```sql\n<options>```\nclaude-3-5-sonnet\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_complete)\n",
	"try_decrypt":                                           "```sql\nTRY_DECRYPT( <value_to_decrypt> , <passphrase> ,\n         [ [ <additional_authenticated_data> , ] <encryption_method> ]\n       )\n```\n```sql\n<value_to_decrypt>```\nRequired:\n```sql\n<passphrase>```\nThe BINARY value to decrypt.\n```sql\n<additional_authenticated_data>```\nThe passphrase to use to encrypt/decrypt the data. The passphrase is a VARCHAR.\n```sql\n<encryption_method>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_decrypt)\n",
	"try_decrypt_raw":                                       "```sql\nTRY_DECRYPT_RAW( <value_to_decrypt> , <key> , <iv> ,\n         [ [ [ <additional_authenticated_data> , ] <encryption_method> , ] <aead_tag> ]\n       )\n```\n```sql\n<value_to_decrypt>```\nRequired:\n```sql\n<key>```\nThe binary value to decrypt.\n```sql\n<iv>```\nThe key to use to encrypt/decrypt the data. The key must be a BINARY value. The key can be any value as long as the\nlength is correct. For example, for AES128, the key must be 128 bits (16 bytes), and for AES256, the key must be\n256 bits (32 bytes).\n```sql\n<additional_authenticated_data>```\nThe key used to encrypt the value must be used to decrypt the value.\n```sql\n<encryption_method>```\nThis parameter contains the Initialization Vector (IV) to use to encrypt and decrypt this piece of\ndata. The IV must be a BINARY value of a specific length:\n```sql\n<aead_tag>```\nFor GCM, this field must be 96 bits (12 bytes). While the GCM encryption method allows this field to be a different\nsize, Snowflake currently only supports 96 bits.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_decrypt_raw)\n",
	"try_hex_decode_binary":                                 "```sql\nTRY_HEX_DECODE_BINARY(<input>)\n```\n```sql\n<input>```\nA string expression containing only hexadecimal digits. Typically, this\ninput string is generated by calling the function\nHEX_ENCODE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_hex_decode_binary)\n",
	"try_hex_decode_string":                                 "```sql\nTRY_HEX_DECODE_STRING(<input>)\n```\n```sql\n<input>```\nA hex-encoded string expression. Typically the input was created by a\ncall to HEX_ENCODE.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_hex_decode_string)\n",
	"try_parse_json":                                        "```sql\nTRY_PARSE_JSON( <expr> [ , \"<parameter>\" ] )\n```\n```sql\n<expr>```\nRequired:\n```sql\n<\">```\nAn expression of string type (for example, VARCHAR) that holds valid JSON information.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_parse_json)\n",
	"try_to_binary":                                         "```sql\nTRY_TO_BINARY( <string_expr> [, \"<format>\"] )\n```\n```sql\n<string_expr>```\nRequired:\n```sql\n<format>```\nA string expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_binary)\n",
	"try_to_boolean":                                        "```sql\nTRY_TO_BOOLEAN( <string_expr> )\n```\n```sql\n<string_expr>```\nA string expression that can be evaluated to a BOOLEAN value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_boolean)\n",
	"try_to_date":                                           "```sql\nTRY_TO_DATE( <string_expr> [, <format> ] )\nTRY_TO_DATE( \"<integer>\" )\n```\n```sql\n<string_expr>```\nRequired:\n```sql\n<\">```\nOne of:\n```sql\n<format>```\nString from which to extract a date. For example: \"2024-01-31\".\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_date)\n",
	"try_to_decimal":                                        "```sql\nTRY_TO_DECIMAL( <string_expr> [, \"<format>\" ] [, <precision> [, <scale> ] ] )\n\nTRY_TO_NUMBER( <string_expr> [, \"<format>\" ] [, <precision> [, <scale> ] ] )\n\nTRY_TO_NUMERIC( <string_expr> [, \"<format>\" ] [, <precision> [, <scale> ] ] )\n```\n```sql\n<string_expr>```\nRequired:\n```sql\n<format>```\nAn expression of type VARCHAR.\n```sql\n<precision>```\nOptional:\n```sql\n<scale>```\nThe SQL format model used to parse the input expr and return. For more\ninformation, see SQL format models.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_decimal)\n",
	"try_to_double":                                         "```sql\nTRY_TO_DOUBLE( <string_expr> [, \"<format>\" ] )\n```\n```sql\n<expr>```\nAn expression of a character type.\n```sql\n<format>```\nIf the expression evaluates to a string, then the function accepts\nan optional format model. Format models are described at\nSQL format models. The format model\nspecifies the format of the input string, not the format of the\noutput value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_double)\n",
	"try_to_geography":                                      "```sql\nTRY_TO_GEOGRAPHY( <varchar_expression> [ , <allow_invalid> ] )\n\nTRY_TO_GEOGRAPHY( <binary_expression> [ , <allow_invalid> ] )\n\nTRY_TO_GEOGRAPHY( <variant_expression> [ , <allow_invalid> ] )\n```\n```sql\n<varchar_expression>```\nRequired:\n```sql\n<binary_expression>```\nThe argument must be a string expression that represents a valid geometric object in one of the following formats:\n```sql\n<variant_expression>```\nWKT (well-known text).\n```sql\n<allow_invalid>```\nWKB (well-known binary) in hexadecimal format (without a leading 0x).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_geography)\n",
	"try_to_geometry":                                       "```sql\nTRY_TO_GEOMETRY( <varchar_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nTRY_TO_GEOMETRY( <binary_expression> [ , <srid> ] [ , <allow_invalid> ] )\n\nTRY_TO_GEOMETRY( <variant_expression> [ , <srid> ] [ , <allow_invalid> ] )\n```\n```sql\n<varchar_expression>```\nRequired:\n```sql\n<binary_expression>```\nThe argument must be a string expression that represents a valid geometric object in one of the following formats:\n```sql\n<variant_expression>```\nWKT (well-known text).\n```sql\n<srid>```\nWKB (well-known binary) in hexadecimal format (without a leading 0x).\n```sql\n<allow_invalid>```\nEWKT (extended well-known text).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_geometry)\n",
	"try_to_time":                                           "```sql\nTRY_TO_TIME( <string_expr> [, <format> ] )\nTRY_TO_TIME( \"<integer>\" )\n```\n```sql\n<string_expr>```\nRequired:\n```sql\n<\">```\nOne of:\n```sql\n<format>```\nA string that can be converted to a valid time.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_time)\n",
	"try_to_timestamp":                                      "```sql\ntimestampFunction ( <string_expr> [, <format> ] )\ntimestampFunction ( \"<integer>\" )\n```\n```sql\n<string_expr>```\nRequired:\n```sql\n<\">```\nOne of:\n```sql\n<format>```\nA string that can be evaluated to a TIMESTAMP (TIMESTAMP_NTZ, TIMESTAMP_LTZ, or TIMESTAMP_TZ).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/try_to_timestamp)\n",
	"typeof":                                                "```sql\nTYPEOF( <expr> )\n```\n```sql\n<expr>```\nThe argument can be a column name or a general expression of type VARIANT. If necessary, you can\ncast the expr to a VARIANT.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/typeof)\n",
	"unicode":                                               "```sql\nUNICODE( <input> )\n```\n```sql\n<input>```\nThe string for which the Unicode code point for the first character in the string is returned.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/unicode)\n",
	"uniform":                                               "```sql\nUNIFORM( <min> , <max> , <gen> )\n```\n```sql\n<min>```\nA constant specifying the minimum value (inclusive) of the generated number.\n```sql\n<max>```\nA constant specifying the maximum value (inclusive) of the generated number.\n```sql\n<gen>```\nAn expression that serves as a raw source of uniform random numbers,\ntypically the RANDOM function. For more information, see the Data\nGeneration Functions Usage notes.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/uniform)\n",
	"upper":                                                 "```sql\nUPPER( <expr> )\n```\n```sql\n<expr>```\nThe string expression.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/upper)\n",
	"uuid_string":                                           "```sql\nUUID_STRING()\n\nUUID_STRING( \"<uuid>\" , \"<name>\" )\n```\n```sql\n<\">```\nA valid UUID string. This value is the namespace used to generate the returned UUID.\n```sql\n<\">```\nThe name used to generate the returned UUID.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/uuid_string)\n",
	"validate":                                              "```sql\nVALIDATE( [<namespace>.]<table_name> , JOB_ID => { \"<query_id>\" | \"_last\" } )\n```\n```sql\n<[>```\nSpecifies the fully-qualified name of the table that was the target of the load.\n```sql\n<JOB_ID>```\nNamespace is the database and/or schema in which the table resides, in the form of database_name.schema_name or schema_name. It is optional if a database and schema\nare currently in use within the user session; otherwise, it is required.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/validate)\n",
	"validate_pipe_load":                                    "```sql\nVALIDATE_PIPE_LOAD(\n      PIPE_NAME => \"<string>\"\n       , START_TIME => <constant_expr>\n      [, END_TIME => <constant_expr> ] )\n```\n```sql\n<PIPE_NAME>```\nA string specifying a pipe. The function returns results for the specified pipe only.\n```sql\n<START_TIME>```\nTimestamp (in TIMESTAMP_LTZ format), within the last 14 days, marking the start of the time range for retrieving error events.\n```sql\n<END_TIME>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/validate_pipe_load)\n",
	"var_pop":                                               "```sql\nVAR_POP( [ DISTINCT ] <expr1> )\n```\n```sql\n<expr1>```\nThe expr1 should evaluate to one of the numeric data types.\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the optional expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/var_pop)\n",
	"var_samp":                                              "```sql\nVAR_SAMP( [DISTINCT] <expr1> )\n```\n```sql\n<expr1>```\nThe expr1 should evaluate to one of the numeric data types.\n```sql\n<expr2>```\nThis is the expression to partition by.\n```sql\n<expr3>```\nThis is the expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/var_samp)\n",
	"variance":                                              "```sql\nVARIANCE( [ DISTINCT ] <expr1> )\n```\n```sql\n<expr1>```\nThe expr1 should evaluate to one of the numeric data types.\n```sql\n<expr2>```\nThis is the expression to partition by.\n```sql\n<expr3>```\nThis is the expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/variance)\n",
	"variance_pop":                                          "```sql\nVARIANCE_POP( [ DISTINCT ] <expr1> )\n```\n```sql\n<expr1>```\nThe expr1 should evaluate to one of the numeric data types.\n```sql\n<expr2>```\nThis is the optional expression to partition by.\n```sql\n<expr3>```\nThis is the optional expression to order by within each partition.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/variance_pop)\n",
	"vector_cosine_similarity":                              "```sql\nVECTOR_COSINE_SIMILARITY( <vector>, <vector> )\n```\n```sql\n<vector>```\nThe VECTOR value to calculate the angle from.\n```sql\n<vector>```\nThe VECTOR value to calculate the angle to.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/vector_cosine_similarity)\n",
	"vector_inner_product":                                  "```sql\nVECTOR_INNER_PRODUCT( <vector>, <vector> )\n```\n```sql\n<vector>```\nFirst VECTOR value.\n```sql\n<vector>```\nSecond VECTOR value.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/vector_inner_product)\n",
	"vector_l1_distance":                                    "```sql\nVECTOR_L1_DISTANCE( <vector>, <vector> )\n```\n```sql\n<vector>```\nThe VECTOR value to calculate the distance from.\n```sql\n<vector>```\nThe VECTOR value to calculate the distance to.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/vector_l1_distance)\n",
	"vector_l2_distance":                                    "```sql\nVECTOR_L2_DISTANCE( <vector>, <vector> )\n```\n```sql\n<vector>```\nThe VECTOR value to calculate the distance from.\n```sql\n<vector>```\nThe VECTOR value to calculate the distance to.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/vector_l2_distance)\n",
	"warehouse_load_history":                                "```sql\nWAREHOUSE_LOAD_HISTORY(\n      [ DATE_RANGE_START => <constant_expr> ]\n      [, DATE_RANGE_END => <constant_expr> ]\n      [, WAREHOUSE_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nAll the arguments are optional.\n```sql\n<WAREHOUSE_NAME>```\nThe date range, within the last 14 days, for which to retrieve warehouse load history data:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/warehouse_load_history)\n",
	"warehouse_metering_history":                            "```sql\nWAREHOUSE_METERING_HISTORY(\n      DATE_RANGE_START => <constant_expr>\n      [ , DATE_RANGE_END => <constant_expr> ]\n      [ , WAREHOUSE_NAME => \"<string>\" ] )\n```\n```sql\n<DATE_RANGE_START>```\nRequired:\n```sql\n<DATE_RANGE_END>```\nThe starting date, within the last 6 months, for which warehouse usage is returned.\n```sql\n<WAREHOUSE_NAME>```\nOptional:\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/warehouse_metering_history)\n",
	"width_bucket":                                          "```sql\nWIDTH_BUCKET( <expr> , <min_value> , <max_value> , <num_buckets> )\n```\n```sql\n<expr>```\nThe expression for which the histogram is created. This expression must evaluate to a numeric value or to a value that can be implicitly converted to a numeric value.\n```sql\n<min_value>```\nThe value must be within the range of -(2^53 - 1) to 2^53 - 1 (inclusive).\n```sql\n<num_buckets>```\nThe low and high end points of the acceptable range for the expression. The end points must also evaluate to numeric values and not be equal.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/width_bucket)\n",
	"xmlget":                                                "```sql\nXMLGET( <expression> , <tag_name> [ , <instance_number> ] )\n```\n```sql\n<expression>```\nThe expression from which to extract the element.\n```sql\n<tag_name>```\nThe expression must evaluate to an OBJECT (or a VARIANT containing an OBJECT). The OBJECT must contain\nvalid XML in the internal format that Snowflake supports. Typically, that means that the OBJECT was produced by one of the\nfollowing:\n```sql\n<instance_number>```\nCalling the PARSE_XML function.\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/xmlget)\n",
	"year":                                                  "```sql\nYEAR( <date_or_timestamp_expr> )\n\nYEAROFWEEK( <date_or_timestamp_expr> )\nYEAROFWEEKISO( <date_or_timestamp_expr> )\n\nDAY( <date_or_timestamp_expr> )\n\nDAYOFMONTH( <date_or_timestamp_expr> )\nDAYOFWEEK( <date_or_timestamp_expr> )\nDAYOFWEEKISO( <date_or_timestamp_expr> )\nDAYOFYEAR( <date_or_timestamp_expr> )\n\nWEEK( <date_or_timestamp_expr> )\n\nWEEKOFYEAR( <date_or_timestamp_expr> )\nWEEKISO( <date_or_timestamp_expr> )\n\nMONTH( <date_or_timestamp_expr> )\n\nQUARTER( <date_or_timestamp_expr> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/year)\n",
	"zeroifnull":                                            "```sql\nZEROIFNULL( <expr> )\n```\n```sql\n<expr>```\nThe input should be an expression that evaluates to a numeric value (or NULL).\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/zeroifnull)\n",
	"zipf":                                                  "```sql\nZIPF( <s> , <N> , <gen> )\n```\n[Snowflake Documentation](https://docs.snowflake.com/en/sql-reference/functions/zipf)\n",
}
